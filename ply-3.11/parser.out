Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars quadMain modules main_end programa2
Rule 4     programa1 -> vars quadMain modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     quadMain -> <empty>
Rule 9     main_end -> <empty>
Rule 10    tipo -> INT guardaTipoVar
Rule 11    tipo -> FLOAT guardaTipoVar
Rule 12    tipo -> CHAR guardaTipoVar
Rule 13    guardaTipoVar -> <empty>
Rule 14    vars -> var
Rule 15    vars -> empty
Rule 16    var -> VAR var2
Rule 17    var1 -> ID
Rule 18    var1 -> ID COMMA var1 addV
Rule 19    var1 -> ID arr
Rule 20    var1 -> ID arr COMMA var1 addV
Rule 21    var1 -> empty
Rule 22    addV -> <empty>
Rule 23    var2 -> var2 tipo var1 SEMICOLON addV
Rule 24    var2 -> empty
Rule 25    arr -> LBRACKET CTEI RBRACKET
Rule 26    arr -> LBRACKET exp RBRACKET
Rule 27    modules -> fun modules
Rule 28    modules -> empty
Rule 29    save_fun -> <empty>
Rule 30    fun -> FUNCTION VOID fun1
Rule 31    fun -> FUNCTION INT fun2
Rule 32    fun -> FUNCTION FLOAT fun2
Rule 33    fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
Rule 34    fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
Rule 35    fun_goto -> <empty>
Rule 36    end_func -> <empty>
Rule 37    operadorReturn -> <empty>
Rule 38    quad_return -> <empty>
Rule 39    statement -> statement1 statement
Rule 40    statement -> empty
Rule 41    statement1 -> asignacion SEMICOLON
Rule 42    statement1 -> llamada SEMICOLON
Rule 43    statement1 -> lectura SEMICOLON
Rule 44    statement1 -> escritura SEMICOLON
Rule 45    statement1 -> for
Rule 46    statement1 -> if
Rule 47    statement1 -> while
Rule 48    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 49    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 50    genera_quad_asignacion -> <empty>
Rule 51    addOperadorName -> <empty>
Rule 52    param1 -> ID addParam
Rule 53    param1 -> ID COMMA param1 addParam
Rule 54    param1 -> ID arr
Rule 55    param1 -> ID COMMA param1
Rule 56    param1 -> empty
Rule 57    addParam -> <empty>
Rule 58    param2 -> param2 tipo param1
Rule 59    param2 -> empty
Rule 60    llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
Rule 61    aux_exp -> exp
Rule 62    aux_exp -> exp COMMA aux_exp
Rule 63    aux_exp -> empty
Rule 64    quad_param -> <empty>
Rule 65    llena_endproc -> <empty>
Rule 66    era_call -> <empty>
Rule 67    gosub_quad -> <empty>
Rule 68    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 69    else -> ELSE else_quad LCURLY statement RCURLY
Rule 70    else -> empty
Rule 71    for_op -> <empty>
Rule 72    for_quad -> <empty>
Rule 73    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
Rule 74    for1 -> FROM asignacion TO exp
Rule 75    for_end -> <empty>
Rule 76    loop_end -> <empty>
Rule 77    while_quad -> <empty>
Rule 78    while_op -> <empty>
Rule 79    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
Rule 80    escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
Rule 81    escritura1 -> escritura2 COMMA escritura2
Rule 82    escritura1 -> escritura2
Rule 83    escritura2 -> COMILLA CTESTRING COMILLA
Rule 84    escritura2 -> CTEI saveCTE operadorWriteQuad
Rule 85    escritura2 -> CTEF saveCTE operadorWriteQuad
Rule 86    escritura2 -> exp
Rule 87    lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN
Rule 88    exp -> nexp
Rule 89    exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 90    genera_quad_or -> <empty>
Rule 91    genera_quad_and -> <empty>
Rule 92    compare_quad -> <empty>
Rule 93    if_quad -> <empty>
Rule 94    end_if -> <empty>
Rule 95    else_quad -> <empty>
Rule 96    nexp -> compexp
Rule 97    nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 98    compexp -> sumexp
Rule 99    compexp -> compexp1 sumexp
Rule 100   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 101   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 102   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 103   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 104   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 105   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 106   sumexp -> mulexp
Rule 107   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 108   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 109   genera_sum_quad -> <empty>
Rule 110   genera_mul_quad -> <empty>
Rule 111   operadorWrite -> <empty>
Rule 112   operadorWriteQuad -> <empty>
Rule 113   operatorRead -> <empty>
Rule 114   operatorReadQuad -> <empty>
Rule 115   mulexp -> pexp
Rule 116   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 117   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 118   pexp -> var1 saveId
Rule 119   pexp -> CTEI saveCTE
Rule 120   pexp -> CTEF saveCTE
Rule 121   pexp -> CTEC saveCTE
Rule 122   pexp -> CTESTRING saveCTE
Rule 123   pexp -> llamada
Rule 124   pexp -> LPAREN exp RPAREN
Rule 125   empty -> <empty>
Rule 126   saveId -> <empty>
Rule 127   saveId2 -> <empty>
Rule 128   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 97
CHAR                 : 12
COMILLA              : 83 83
COMMA                : 18 20 53 55 62 81
COMPARE              : 105
CTEC                 : 121
CTEF                 : 85 120
CTEI                 : 25 84 119
CTESTRING            : 83 122
DIV                  : 117
ELSE                 : 69
END                  : 7
EQUALS               : 48 49
FLOAT                : 11 32
FOR                  : 73
FROM                 : 74
FUNCTION             : 30 31 32
GT                   : 100
GTE                  : 102
ID                   : 1 17 18 19 20 33 34 48 49 52 53 54 55 60
IF                   : 68
INT                  : 10 31
LBRACKET             : 25 26
LCURLY               : 7 33 34 68 69 73 79
LPAREN               : 7 33 34 60 68 73 79 80 87 124
LT                   : 101
LTE                  : 103
MAIN                 : 7
MINUS                : 108
MUL                  : 116
NE                   : 104
OR                   : 89
PLUS                 : 107
PROGRAM              : 1
RBRACKET             : 25 26
RCURLY               : 7 33 34 68 69 73
READ                 : 87
RETURN               : 34
RPAREN               : 7 33 34 60 68 73 79 80 87 124
SEMICOLON            : 1 23 33 34 34 41 42 43 44
TO                   : 74
VAR                  : 16
VOID                 : 30
WHILE                : 79
WRITE                : 80
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 48 49 89 97 100 101 102 103 104 105 107 108 116 117
addP                 : 1
addParam             : 52 53
addV                 : 18 20 23
arr                  : 19 20 49 54
asignacion           : 41 74
aux_exp              : 60 62
compare_quad         : 100 101 102 103 104 105
compexp              : 96 97 97
compexp1             : 99
else                 : 68
else_quad            : 69
empty                : 15 21 24 28 40 56 59 63 70
end_func             : 33 34
end_if               : 68
era_call             : 60
escritura            : 44
escritura1           : 80
escritura2           : 81 81 82
exp                  : 26 34 48 49 61 62 68 74 79 86 87 124
for                  : 45
for1                 : 73
for_end              : 73
for_op               : 73
for_quad             : 73
fun                  : 27
fun1                 : 30
fun2                 : 31 32
fun_goto             : 33 34
genera_mul_quad      : 116 117
genera_quad_and      : 97
genera_quad_asignacion : 48 49
genera_quad_or       : 89
genera_sum_quad      : 107 108
gosub_quad           : 60
guardaTipoVar        : 10 11 12
if                   : 46
if_quad              : 68
lectura              : 43
llamada              : 42 123
llena_endproc        : 60
loop_end             : 79
main                 : 6
main_end             : 3
modules              : 3 4 27
mulexp               : 106 107 107 108 108
nexp                 : 88 89 89
operadorReturn       : 34
operadorWrite        : 80
operadorWriteQuad    : 80 84 85
operatorRead         : 87
operatorReadQuad     : 87
param1               : 53 55 58
param2               : 7 33 34 58
pexp                 : 115 116 116 117 117
programa             : 0
programa1            : 1
programa2            : 3 5
quadMain             : 3 4
quad_param           : 60
quad_return          : 34
saveCTE              : 84 85 119 120 121 122
saveId               : 118
saveId2              : 48 49
save_fun             : 7 33 34
statement            : 7 33 34 39 68 69 73 79
statement1           : 39
sumexp               : 98 99 100 100 101 101 102 102 103 103 104 104 105 105
tipo                 : 23 58
var                  : 14
var1                 : 18 20 23 118
var2                 : 16 23
vars                 : 3 4 7 33 34
while                : 47
while_op             : 79
while_quad           : 79

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUNCTION        reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars quadMain modules main_end programa2
    (4) programa1 -> . vars quadMain modules
    (5) programa1 -> . programa2
    (14) vars -> . var
    (15) vars -> . empty
    (6) programa2 -> . main
    (16) var -> . VAR var2
    (125) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUNCTION        reduce using rule 125 (empty -> .)
    $end            reduce using rule 125 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 125 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . quadMain modules main_end programa2
    (4) programa1 -> vars . quadMain modules
    (8) quadMain -> .

    FUNCTION        reduce using rule 8 (quadMain -> .)
    MAIN            reduce using rule 8 (quadMain -> .)
    $end            reduce using rule 8 (quadMain -> .)

    quadMain                       shift and go to state 14

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (14) vars -> var .

    FUNCTION        reduce using rule 14 (vars -> var .)
    MAIN            reduce using rule 14 (vars -> var .)
    $end            reduce using rule 14 (vars -> var .)
    ID              reduce using rule 14 (vars -> var .)
    READ            reduce using rule 14 (vars -> var .)
    WRITE           reduce using rule 14 (vars -> var .)
    FOR             reduce using rule 14 (vars -> var .)
    IF              reduce using rule 14 (vars -> var .)
    WHILE           reduce using rule 14 (vars -> var .)
    RCURLY          reduce using rule 14 (vars -> var .)
    RETURN          reduce using rule 14 (vars -> var .)


state 10

    (15) vars -> empty .

    FUNCTION        reduce using rule 15 (vars -> empty .)
    MAIN            reduce using rule 15 (vars -> empty .)
    $end            reduce using rule 15 (vars -> empty .)
    ID              reduce using rule 15 (vars -> empty .)
    READ            reduce using rule 15 (vars -> empty .)
    WRITE           reduce using rule 15 (vars -> empty .)
    FOR             reduce using rule 15 (vars -> empty .)
    IF              reduce using rule 15 (vars -> empty .)
    WHILE           reduce using rule 15 (vars -> empty .)
    RCURLY          reduce using rule 15 (vars -> empty .)
    RETURN          reduce using rule 15 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (16) var -> VAR . var2
    (23) var2 -> . var2 tipo var1 SEMICOLON addV
    (24) var2 -> . empty
    (125) empty -> .

    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)
    FUNCTION        reduce using rule 125 (empty -> .)
    MAIN            reduce using rule 125 (empty -> .)
    $end            reduce using rule 125 (empty -> .)
    ID              reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    RCURLY          reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 17

state 14

    (3) programa1 -> vars quadMain . modules main_end programa2
    (4) programa1 -> vars quadMain . modules
    (27) modules -> . fun modules
    (28) modules -> . empty
    (30) fun -> . FUNCTION VOID fun1
    (31) fun -> . FUNCTION INT fun2
    (32) fun -> . FUNCTION FLOAT fun2
    (125) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 125 (empty -> .)
    $end            reduce using rule 125 (empty -> .)

    modules                        shift and go to state 18
    fun                            shift and go to state 19
    empty                          shift and go to state 20

state 15

    (16) var -> VAR var2 .
    (23) var2 -> var2 . tipo var1 SEMICOLON addV
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    FUNCTION        reduce using rule 16 (var -> VAR var2 .)
    MAIN            reduce using rule 16 (var -> VAR var2 .)
    $end            reduce using rule 16 (var -> VAR var2 .)
    ID              reduce using rule 16 (var -> VAR var2 .)
    READ            reduce using rule 16 (var -> VAR var2 .)
    WRITE           reduce using rule 16 (var -> VAR var2 .)
    FOR             reduce using rule 16 (var -> VAR var2 .)
    IF              reduce using rule 16 (var -> VAR var2 .)
    WHILE           reduce using rule 16 (var -> VAR var2 .)
    RCURLY          reduce using rule 16 (var -> VAR var2 .)
    RETURN          reduce using rule 16 (var -> VAR var2 .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 22

state 16

    (24) var2 -> empty .

    INT             reduce using rule 24 (var2 -> empty .)
    FLOAT           reduce using rule 24 (var2 -> empty .)
    CHAR            reduce using rule 24 (var2 -> empty .)
    FUNCTION        reduce using rule 24 (var2 -> empty .)
    MAIN            reduce using rule 24 (var2 -> empty .)
    $end            reduce using rule 24 (var2 -> empty .)
    ID              reduce using rule 24 (var2 -> empty .)
    READ            reduce using rule 24 (var2 -> empty .)
    WRITE           reduce using rule 24 (var2 -> empty .)
    FOR             reduce using rule 24 (var2 -> empty .)
    IF              reduce using rule 24 (var2 -> empty .)
    WHILE           reduce using rule 24 (var2 -> empty .)
    RCURLY          reduce using rule 24 (var2 -> empty .)
    RETURN          reduce using rule 24 (var2 -> empty .)


state 17

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 26


state 18

    (3) programa1 -> vars quadMain modules . main_end programa2
    (4) programa1 -> vars quadMain modules .
    (9) main_end -> .

    $end            reduce using rule 4 (programa1 -> vars quadMain modules .)
    MAIN            reduce using rule 9 (main_end -> .)

    main_end                       shift and go to state 27

state 19

    (27) modules -> fun . modules
    (27) modules -> . fun modules
    (28) modules -> . empty
    (30) fun -> . FUNCTION VOID fun1
    (31) fun -> . FUNCTION INT fun2
    (32) fun -> . FUNCTION FLOAT fun2
    (125) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 125 (empty -> .)
    $end            reduce using rule 125 (empty -> .)

    fun                            shift and go to state 19
    modules                        shift and go to state 28
    empty                          shift and go to state 20

state 20

    (28) modules -> empty .

    MAIN            reduce using rule 28 (modules -> empty .)
    $end            reduce using rule 28 (modules -> empty .)


state 21

    (30) fun -> FUNCTION . VOID fun1
    (31) fun -> FUNCTION . INT fun2
    (32) fun -> FUNCTION . FLOAT fun2

    VOID            shift and go to state 29
    INT             shift and go to state 30
    FLOAT           shift and go to state 31


state 22

    (23) var2 -> var2 tipo . var1 SEMICOLON addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (125) empty -> .

    ID              shift and go to state 33
    SEMICOLON       reduce using rule 125 (empty -> .)

    var1                           shift and go to state 32
    empty                          shift and go to state 34

state 23

    (10) tipo -> INT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 35

state 24

    (11) tipo -> FLOAT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 36

state 25

    (12) tipo -> CHAR . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 37

state 26

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (58) param2 -> . param2 tipo param1
    (59) param2 -> . empty
    (125) empty -> .

    RPAREN          reduce using rule 125 (empty -> .)
    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)

    param2                         shift and go to state 38
    empty                          shift and go to state 39

state 27

    (3) programa1 -> vars quadMain modules main_end . programa2
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    MAIN            shift and go to state 13

    programa2                      shift and go to state 40
    main                           shift and go to state 11

state 28

    (27) modules -> fun modules .

    MAIN            reduce using rule 27 (modules -> fun modules .)
    $end            reduce using rule 27 (modules -> fun modules .)


state 29

    (30) fun -> FUNCTION VOID . fun1
    (33) fun1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    ID              shift and go to state 42

    fun1                           shift and go to state 41

state 30

    (31) fun -> FUNCTION INT . fun2
    (34) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 44

    fun2                           shift and go to state 43

state 31

    (32) fun -> FUNCTION FLOAT . fun2
    (34) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 44

    fun2                           shift and go to state 45

state 32

    (23) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 46


state 33

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 47
    LBRACKET        shift and go to state 49

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]

    arr                            shift and go to state 48

state 34

    (21) var1 -> empty .

    SEMICOLON       reduce using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    RBRACKET        reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    TO              reduce using rule 21 (var1 -> empty .)
    CTEI            reduce using rule 21 (var1 -> empty .)
    CTEF            reduce using rule 21 (var1 -> empty .)
    CTEC            reduce using rule 21 (var1 -> empty .)
    CTESTRING       reduce using rule 21 (var1 -> empty .)
    LPAREN          reduce using rule 21 (var1 -> empty .)
    ID              reduce using rule 21 (var1 -> empty .)


state 35

    (10) tipo -> INT guardaTipoVar .

    ID              reduce using rule 10 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> INT guardaTipoVar .)


state 36

    (11) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)


state 37

    (12) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 12 (tipo -> CHAR guardaTipoVar .)


state 38

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (58) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 50
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 39

    (59) param2 -> empty .

    RPAREN          reduce using rule 59 (param2 -> empty .)
    INT             reduce using rule 59 (param2 -> empty .)
    FLOAT           reduce using rule 59 (param2 -> empty .)
    CHAR            reduce using rule 59 (param2 -> empty .)


state 40

    (3) programa1 -> vars quadMain modules main_end programa2 .

    $end            reduce using rule 3 (programa1 -> vars quadMain modules main_end programa2 .)


state 41

    (30) fun -> FUNCTION VOID fun1 .

    FUNCTION        reduce using rule 30 (fun -> FUNCTION VOID fun1 .)
    MAIN            reduce using rule 30 (fun -> FUNCTION VOID fun1 .)
    $end            reduce using rule 30 (fun -> FUNCTION VOID fun1 .)


state 42

    (33) fun1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 52

state 43

    (31) fun -> FUNCTION INT fun2 .

    FUNCTION        reduce using rule 31 (fun -> FUNCTION INT fun2 .)
    MAIN            reduce using rule 31 (fun -> FUNCTION INT fun2 .)
    $end            reduce using rule 31 (fun -> FUNCTION INT fun2 .)


state 44

    (34) fun2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 53

state 45

    (32) fun -> FUNCTION FLOAT fun2 .

    FUNCTION        reduce using rule 32 (fun -> FUNCTION FLOAT fun2 .)
    MAIN            reduce using rule 32 (fun -> FUNCTION FLOAT fun2 .)
    $end            reduce using rule 32 (fun -> FUNCTION FLOAT fun2 .)


state 46

    (23) var2 -> var2 tipo var1 SEMICOLON . addV
    (22) addV -> .

    INT             reduce using rule 22 (addV -> .)
    FLOAT           reduce using rule 22 (addV -> .)
    CHAR            reduce using rule 22 (addV -> .)
    FUNCTION        reduce using rule 22 (addV -> .)
    MAIN            reduce using rule 22 (addV -> .)
    $end            reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)
    READ            reduce using rule 22 (addV -> .)
    WRITE           reduce using rule 22 (addV -> .)
    FOR             reduce using rule 22 (addV -> .)
    IF              reduce using rule 22 (addV -> .)
    WHILE           reduce using rule 22 (addV -> .)
    RCURLY          reduce using rule 22 (addV -> .)
    RETURN          reduce using rule 22 (addV -> .)

    addV                           shift and go to state 54

state 47

    (18) var1 -> ID COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (125) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 33
    SEMICOLON       reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    CTEI            reduce using rule 125 (empty -> .)
    CTEF            reduce using rule 125 (empty -> .)
    CTEC            reduce using rule 125 (empty -> .)
    CTESTRING       reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)

  ! ID              [ reduce using rule 125 (empty -> .) ]

    var1                           shift and go to state 55
    empty                          shift and go to state 34

state 48

    (19) var1 -> ID arr .
    (20) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (var1 -> ID arr .)
    MUL             reduce using rule 19 (var1 -> ID arr .)
    DIV             reduce using rule 19 (var1 -> ID arr .)
    PLUS            reduce using rule 19 (var1 -> ID arr .)
    MINUS           reduce using rule 19 (var1 -> ID arr .)
    GT              reduce using rule 19 (var1 -> ID arr .)
    LT              reduce using rule 19 (var1 -> ID arr .)
    GTE             reduce using rule 19 (var1 -> ID arr .)
    LTE             reduce using rule 19 (var1 -> ID arr .)
    NE              reduce using rule 19 (var1 -> ID arr .)
    COMPARE         reduce using rule 19 (var1 -> ID arr .)
    AND             reduce using rule 19 (var1 -> ID arr .)
    OR              reduce using rule 19 (var1 -> ID arr .)
    RBRACKET        reduce using rule 19 (var1 -> ID arr .)
    RPAREN          reduce using rule 19 (var1 -> ID arr .)
    TO              reduce using rule 19 (var1 -> ID arr .)
    CTEI            reduce using rule 19 (var1 -> ID arr .)
    CTEF            reduce using rule 19 (var1 -> ID arr .)
    CTEC            reduce using rule 19 (var1 -> ID arr .)
    CTESTRING       reduce using rule 19 (var1 -> ID arr .)
    LPAREN          reduce using rule 19 (var1 -> ID arr .)
    ID              reduce using rule 19 (var1 -> ID arr .)
    COMMA           shift and go to state 56

  ! COMMA           [ reduce using rule 19 (var1 -> ID arr .) ]


state 49

    (25) arr -> LBRACKET . CTEI RBRACKET
    (26) arr -> LBRACKET . exp RBRACKET
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 57
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)

    exp                            shift and go to state 58
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 50

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 72


state 51

    (58) param2 -> param2 tipo . param1
    (52) param1 -> . ID addParam
    (53) param1 -> . ID COMMA param1 addParam
    (54) param1 -> . ID arr
    (55) param1 -> . ID COMMA param1
    (56) param1 -> . empty
    (125) empty -> .

    ID              shift and go to state 74
    RPAREN          reduce using rule 125 (empty -> .)
    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)

    param1                         shift and go to state 73
    empty                          shift and go to state 75

state 52

    (33) fun1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    LPAREN          shift and go to state 76


state 53

    (34) fun2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LPAREN          shift and go to state 77


state 54

    (23) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUNCTION        reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WRITE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 55

    (18) var1 -> ID COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RBRACKET        reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 78

state 56

    (20) var1 -> ID arr COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (125) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 33
    SEMICOLON       reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    CTEI            reduce using rule 125 (empty -> .)
    CTEF            reduce using rule 125 (empty -> .)
    CTEC            reduce using rule 125 (empty -> .)
    CTESTRING       reduce using rule 125 (empty -> .)
    LPAREN          reduce using rule 125 (empty -> .)

  ! ID              [ reduce using rule 125 (empty -> .) ]

    var1                           shift and go to state 79
    empty                          shift and go to state 34

state 57

    (25) arr -> LBRACKET CTEI . RBRACKET
    (119) pexp -> CTEI . saveCTE
    (128) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 80
    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 128 (saveCTE -> .) ]

    saveCTE                        shift and go to state 81

state 58

    (26) arr -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 82


state 59

    (88) exp -> nexp .
    (89) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 88 (exp -> nexp .)
    RPAREN          reduce using rule 88 (exp -> nexp .)
    COMMA           reduce using rule 88 (exp -> nexp .)
    SEMICOLON       reduce using rule 88 (exp -> nexp .)
    TO              reduce using rule 88 (exp -> nexp .)
    OR              shift and go to state 83


state 60

    (96) nexp -> compexp .
    (97) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 96 (nexp -> compexp .)
    RBRACKET        reduce using rule 96 (nexp -> compexp .)
    RPAREN          reduce using rule 96 (nexp -> compexp .)
    COMMA           reduce using rule 96 (nexp -> compexp .)
    SEMICOLON       reduce using rule 96 (nexp -> compexp .)
    TO              reduce using rule 96 (nexp -> compexp .)
    AND             shift and go to state 84


state 61

    (98) compexp -> sumexp .
    (100) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (101) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (102) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (105) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 98 (compexp -> sumexp .)
    OR              reduce using rule 98 (compexp -> sumexp .)
    RBRACKET        reduce using rule 98 (compexp -> sumexp .)
    RPAREN          reduce using rule 98 (compexp -> sumexp .)
    COMMA           reduce using rule 98 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 98 (compexp -> sumexp .)
    TO              reduce using rule 98 (compexp -> sumexp .)
    GT              shift and go to state 85
    LT              shift and go to state 86
    GTE             shift and go to state 87
    LTE             shift and go to state 88
    NE              shift and go to state 89
    COMPARE         shift and go to state 90


state 62

    (99) compexp -> compexp1 . sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

    sumexp                         shift and go to state 91
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 63

    (106) sumexp -> mulexp .
    (107) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 106 (sumexp -> mulexp .)
    LT              reduce using rule 106 (sumexp -> mulexp .)
    GTE             reduce using rule 106 (sumexp -> mulexp .)
    LTE             reduce using rule 106 (sumexp -> mulexp .)
    NE              reduce using rule 106 (sumexp -> mulexp .)
    COMPARE         reduce using rule 106 (sumexp -> mulexp .)
    AND             reduce using rule 106 (sumexp -> mulexp .)
    OR              reduce using rule 106 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 106 (sumexp -> mulexp .)
    RPAREN          reduce using rule 106 (sumexp -> mulexp .)
    COMMA           reduce using rule 106 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 106 (sumexp -> mulexp .)
    TO              reduce using rule 106 (sumexp -> mulexp .)
    CTEI            reduce using rule 106 (sumexp -> mulexp .)
    CTEF            reduce using rule 106 (sumexp -> mulexp .)
    CTEC            reduce using rule 106 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 106 (sumexp -> mulexp .)
    LPAREN          reduce using rule 106 (sumexp -> mulexp .)
    ID              reduce using rule 106 (sumexp -> mulexp .)
    MUL             reduce using rule 106 (sumexp -> mulexp .)
    DIV             reduce using rule 106 (sumexp -> mulexp .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 106 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 106 (sumexp -> mulexp .) ]


state 64

    (115) mulexp -> pexp .
    (116) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 115 (mulexp -> pexp .)
    MINUS           reduce using rule 115 (mulexp -> pexp .)
    GT              reduce using rule 115 (mulexp -> pexp .)
    LT              reduce using rule 115 (mulexp -> pexp .)
    GTE             reduce using rule 115 (mulexp -> pexp .)
    LTE             reduce using rule 115 (mulexp -> pexp .)
    NE              reduce using rule 115 (mulexp -> pexp .)
    COMPARE         reduce using rule 115 (mulexp -> pexp .)
    AND             reduce using rule 115 (mulexp -> pexp .)
    OR              reduce using rule 115 (mulexp -> pexp .)
    RBRACKET        reduce using rule 115 (mulexp -> pexp .)
    RPAREN          reduce using rule 115 (mulexp -> pexp .)
    COMMA           reduce using rule 115 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 115 (mulexp -> pexp .)
    TO              reduce using rule 115 (mulexp -> pexp .)
    CTEI            reduce using rule 115 (mulexp -> pexp .)
    CTEF            reduce using rule 115 (mulexp -> pexp .)
    CTEC            reduce using rule 115 (mulexp -> pexp .)
    CTESTRING       reduce using rule 115 (mulexp -> pexp .)
    LPAREN          reduce using rule 115 (mulexp -> pexp .)
    ID              reduce using rule 115 (mulexp -> pexp .)
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! MUL             [ reduce using rule 115 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 115 (mulexp -> pexp .) ]


state 65

    (118) pexp -> var1 . saveId
    (126) saveId -> .

    MUL             reduce using rule 126 (saveId -> .)
    DIV             reduce using rule 126 (saveId -> .)
    PLUS            reduce using rule 126 (saveId -> .)
    MINUS           reduce using rule 126 (saveId -> .)
    GT              reduce using rule 126 (saveId -> .)
    LT              reduce using rule 126 (saveId -> .)
    GTE             reduce using rule 126 (saveId -> .)
    LTE             reduce using rule 126 (saveId -> .)
    NE              reduce using rule 126 (saveId -> .)
    COMPARE         reduce using rule 126 (saveId -> .)
    AND             reduce using rule 126 (saveId -> .)
    OR              reduce using rule 126 (saveId -> .)
    RBRACKET        reduce using rule 126 (saveId -> .)
    RPAREN          reduce using rule 126 (saveId -> .)
    COMMA           reduce using rule 126 (saveId -> .)
    SEMICOLON       reduce using rule 126 (saveId -> .)
    TO              reduce using rule 126 (saveId -> .)
    CTEI            reduce using rule 126 (saveId -> .)
    CTEF            reduce using rule 126 (saveId -> .)
    CTEC            reduce using rule 126 (saveId -> .)
    CTESTRING       reduce using rule 126 (saveId -> .)
    LPAREN          reduce using rule 126 (saveId -> .)
    ID              reduce using rule 126 (saveId -> .)

    saveId                         shift and go to state 97

state 66

    (120) pexp -> CTEF . saveCTE
    (128) saveCTE -> .

    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)
    RBRACKET        reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    COMMA           reduce using rule 128 (saveCTE -> .)
    SEMICOLON       reduce using rule 128 (saveCTE -> .)
    TO              reduce using rule 128 (saveCTE -> .)
    CTEI            reduce using rule 128 (saveCTE -> .)
    CTEF            reduce using rule 128 (saveCTE -> .)
    CTEC            reduce using rule 128 (saveCTE -> .)
    CTESTRING       reduce using rule 128 (saveCTE -> .)
    LPAREN          reduce using rule 128 (saveCTE -> .)
    ID              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 98

state 67

    (121) pexp -> CTEC . saveCTE
    (128) saveCTE -> .

    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)
    RBRACKET        reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    COMMA           reduce using rule 128 (saveCTE -> .)
    SEMICOLON       reduce using rule 128 (saveCTE -> .)
    TO              reduce using rule 128 (saveCTE -> .)
    CTEI            reduce using rule 128 (saveCTE -> .)
    CTEF            reduce using rule 128 (saveCTE -> .)
    CTEC            reduce using rule 128 (saveCTE -> .)
    CTESTRING       reduce using rule 128 (saveCTE -> .)
    LPAREN          reduce using rule 128 (saveCTE -> .)
    ID              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 99

state 68

    (122) pexp -> CTESTRING . saveCTE
    (128) saveCTE -> .

    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)
    RBRACKET        reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    COMMA           reduce using rule 128 (saveCTE -> .)
    SEMICOLON       reduce using rule 128 (saveCTE -> .)
    TO              reduce using rule 128 (saveCTE -> .)
    CTEI            reduce using rule 128 (saveCTE -> .)
    CTEF            reduce using rule 128 (saveCTE -> .)
    CTEC            reduce using rule 128 (saveCTE -> .)
    CTESTRING       reduce using rule 128 (saveCTE -> .)
    LPAREN          reduce using rule 128 (saveCTE -> .)
    ID              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 100

state 69

    (123) pexp -> llamada .

    MUL             reduce using rule 123 (pexp -> llamada .)
    DIV             reduce using rule 123 (pexp -> llamada .)
    PLUS            reduce using rule 123 (pexp -> llamada .)
    MINUS           reduce using rule 123 (pexp -> llamada .)
    GT              reduce using rule 123 (pexp -> llamada .)
    LT              reduce using rule 123 (pexp -> llamada .)
    GTE             reduce using rule 123 (pexp -> llamada .)
    LTE             reduce using rule 123 (pexp -> llamada .)
    NE              reduce using rule 123 (pexp -> llamada .)
    COMPARE         reduce using rule 123 (pexp -> llamada .)
    AND             reduce using rule 123 (pexp -> llamada .)
    OR              reduce using rule 123 (pexp -> llamada .)
    RBRACKET        reduce using rule 123 (pexp -> llamada .)
    RPAREN          reduce using rule 123 (pexp -> llamada .)
    COMMA           reduce using rule 123 (pexp -> llamada .)
    SEMICOLON       reduce using rule 123 (pexp -> llamada .)
    TO              reduce using rule 123 (pexp -> llamada .)
    CTEI            reduce using rule 123 (pexp -> llamada .)
    CTEF            reduce using rule 123 (pexp -> llamada .)
    CTEC            reduce using rule 123 (pexp -> llamada .)
    CTESTRING       reduce using rule 123 (pexp -> llamada .)
    LPAREN          reduce using rule 123 (pexp -> llamada .)
    ID              reduce using rule 123 (pexp -> llamada .)


state 70

    (124) pexp -> LPAREN . exp RPAREN
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    exp                            shift and go to state 101
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 71

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (60) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET
    (66) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 47
    LBRACKET        shift and go to state 49

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 66 (era_call -> .) ]

    arr                            shift and go to state 48
    era_call                       shift and go to state 102

state 72

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (125) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    RCURLY          reduce using rule 125 (empty -> .)

    vars                           shift and go to state 103
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 73

    (58) param2 -> param2 tipo param1 .

    RPAREN          reduce using rule 58 (param2 -> param2 tipo param1 .)
    INT             reduce using rule 58 (param2 -> param2 tipo param1 .)
    FLOAT           reduce using rule 58 (param2 -> param2 tipo param1 .)
    CHAR            reduce using rule 58 (param2 -> param2 tipo param1 .)


state 74

    (52) param1 -> ID . addParam
    (53) param1 -> ID . COMMA param1 addParam
    (54) param1 -> ID . arr
    (55) param1 -> ID . COMMA param1
    (57) addParam -> .
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

    COMMA           shift and go to state 105
    RPAREN          reduce using rule 57 (addParam -> .)
    INT             reduce using rule 57 (addParam -> .)
    FLOAT           reduce using rule 57 (addParam -> .)
    CHAR            reduce using rule 57 (addParam -> .)
    LBRACKET        shift and go to state 49

    addParam                       shift and go to state 104
    arr                            shift and go to state 106

state 75

    (56) param1 -> empty .

    RPAREN          reduce using rule 56 (param1 -> empty .)
    INT             reduce using rule 56 (param1 -> empty .)
    FLOAT           reduce using rule 56 (param1 -> empty .)
    CHAR            reduce using rule 56 (param1 -> empty .)


state 76

    (33) fun1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (58) param2 -> . param2 tipo param1
    (59) param2 -> . empty
    (125) empty -> .

    RPAREN          reduce using rule 125 (empty -> .)
    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)

    param2                         shift and go to state 107
    empty                          shift and go to state 39

state 77

    (34) fun2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (58) param2 -> . param2 tipo param1
    (59) param2 -> . empty
    (125) empty -> .

    RPAREN          reduce using rule 125 (empty -> .)
    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)

    param2                         shift and go to state 108
    empty                          shift and go to state 39

state 78

    (18) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID COMMA var1 addV .)


state 79

    (20) var1 -> ID arr COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RBRACKET        reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 109

state 80

    (25) arr -> LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)


state 81

    (119) pexp -> CTEI saveCTE .

    MUL             reduce using rule 119 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 119 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 119 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 119 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 119 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 119 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 119 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 119 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 119 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 119 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 119 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 119 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 119 (pexp -> CTEI saveCTE .)


state 82

    (26) arr -> LBRACKET exp RBRACKET .

    COMMA           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)


state 83

    (89) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 110

state 84

    (97) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 111

state 85

    (100) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 112

state 86

    (101) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 113

state 87

    (102) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 114

state 88

    (103) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 115

state 89

    (104) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 116

state 90

    (105) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 117

state 91

    (99) compexp -> compexp1 sumexp .

    AND             reduce using rule 99 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 99 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 99 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 99 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 99 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 99 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 99 (compexp -> compexp1 sumexp .)


state 92

    (119) pexp -> CTEI . saveCTE
    (128) saveCTE -> .

    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)
    RBRACKET        reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    COMMA           reduce using rule 128 (saveCTE -> .)
    SEMICOLON       reduce using rule 128 (saveCTE -> .)
    TO              reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    CTEI            reduce using rule 128 (saveCTE -> .)
    CTEF            reduce using rule 128 (saveCTE -> .)
    CTEC            reduce using rule 128 (saveCTE -> .)
    CTESTRING       reduce using rule 128 (saveCTE -> .)
    LPAREN          reduce using rule 128 (saveCTE -> .)
    ID              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 81

state 93

    (107) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 118

state 94

    (108) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 119

state 95

    (116) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 120

state 96

    (117) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    RBRACKET        reduce using rule 51 (addOperadorName -> .)
    RPAREN          reduce using rule 51 (addOperadorName -> .)
    COMMA           reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 121

state 97

    (118) pexp -> var1 saveId .

    MUL             reduce using rule 118 (pexp -> var1 saveId .)
    DIV             reduce using rule 118 (pexp -> var1 saveId .)
    PLUS            reduce using rule 118 (pexp -> var1 saveId .)
    MINUS           reduce using rule 118 (pexp -> var1 saveId .)
    GT              reduce using rule 118 (pexp -> var1 saveId .)
    LT              reduce using rule 118 (pexp -> var1 saveId .)
    GTE             reduce using rule 118 (pexp -> var1 saveId .)
    LTE             reduce using rule 118 (pexp -> var1 saveId .)
    NE              reduce using rule 118 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 118 (pexp -> var1 saveId .)
    AND             reduce using rule 118 (pexp -> var1 saveId .)
    OR              reduce using rule 118 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 118 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 118 (pexp -> var1 saveId .)
    COMMA           reduce using rule 118 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 118 (pexp -> var1 saveId .)
    TO              reduce using rule 118 (pexp -> var1 saveId .)
    CTEI            reduce using rule 118 (pexp -> var1 saveId .)
    CTEF            reduce using rule 118 (pexp -> var1 saveId .)
    CTEC            reduce using rule 118 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 118 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 118 (pexp -> var1 saveId .)
    ID              reduce using rule 118 (pexp -> var1 saveId .)


state 98

    (120) pexp -> CTEF saveCTE .

    MUL             reduce using rule 120 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 120 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 120 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 120 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 120 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 120 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 120 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 120 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 120 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 120 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 120 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 120 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 120 (pexp -> CTEF saveCTE .)


state 99

    (121) pexp -> CTEC saveCTE .

    MUL             reduce using rule 121 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 121 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 121 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 121 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 121 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 121 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 121 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 121 (pexp -> CTEC saveCTE .)


state 100

    (122) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 122 (pexp -> CTESTRING saveCTE .)


state 101

    (124) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 122


state 102

    (60) llamada -> ID era_call . LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    LPAREN          shift and go to state 123


state 103

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 124
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 104

    (52) param1 -> ID addParam .

    RPAREN          reduce using rule 52 (param1 -> ID addParam .)
    INT             reduce using rule 52 (param1 -> ID addParam .)
    FLOAT           reduce using rule 52 (param1 -> ID addParam .)
    CHAR            reduce using rule 52 (param1 -> ID addParam .)


state 105

    (53) param1 -> ID COMMA . param1 addParam
    (55) param1 -> ID COMMA . param1
    (52) param1 -> . ID addParam
    (53) param1 -> . ID COMMA param1 addParam
    (54) param1 -> . ID arr
    (55) param1 -> . ID COMMA param1
    (56) param1 -> . empty
    (125) empty -> .

    ID              shift and go to state 74
    RPAREN          reduce using rule 125 (empty -> .)
    INT             reduce using rule 125 (empty -> .)
    FLOAT           reduce using rule 125 (empty -> .)
    CHAR            reduce using rule 125 (empty -> .)

    param1                         shift and go to state 140
    empty                          shift and go to state 75

state 106

    (54) param1 -> ID arr .

    RPAREN          reduce using rule 54 (param1 -> ID arr .)
    INT             reduce using rule 54 (param1 -> ID arr .)
    FLOAT           reduce using rule 54 (param1 -> ID arr .)
    CHAR            reduce using rule 54 (param1 -> ID arr .)


state 107

    (33) fun1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (58) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 141
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 108

    (34) fun2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (58) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 142
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 109

    (20) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)


state 110

    (89) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

    nexp                           shift and go to state 143
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 111

    (97) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

    compexp                        shift and go to state 144
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 112

    (100) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 145
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 113

    (101) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 146
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 114

    (102) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 147
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 115

    (103) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 148
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 116

    (104) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 149
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 117

    (105) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    sumexp                         shift and go to state 150
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 118

    (107) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    mulexp                         shift and go to state 151
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 119

    (108) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    mulexp                         shift and go to state 152
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 120

    (116) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    pexp                           shift and go to state 153
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 121

    (117) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RBRACKET        reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)

  ! CTEI            [ reduce using rule 125 (empty -> .) ]
  ! CTEF            [ reduce using rule 125 (empty -> .) ]
  ! CTEC            [ reduce using rule 125 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 125 (empty -> .) ]
  ! LPAREN          [ reduce using rule 125 (empty -> .) ]
  ! ID              [ reduce using rule 125 (empty -> .) ]

    pexp                           shift and go to state 154
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 122

    (124) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)


state 123

    (60) llamada -> ID era_call LPAREN . aux_exp quad_param RPAREN gosub_quad llena_endproc
    (61) aux_exp -> . exp
    (62) aux_exp -> . exp COMMA aux_exp
    (63) aux_exp -> . empty
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (125) empty -> .
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71

    aux_exp                        shift and go to state 155
    exp                            shift and go to state 156
    empty                          shift and go to state 157
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69

state 124

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 158


state 125

    (39) statement -> statement1 . statement
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! WRITE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]

    statement1                     shift and go to state 125
    statement                      shift and go to state 159
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 126

    (40) statement -> empty .

    RCURLY          reduce using rule 40 (statement -> empty .)
    RETURN          reduce using rule 40 (statement -> empty .)
    ID              reduce using rule 40 (statement -> empty .)
    READ            reduce using rule 40 (statement -> empty .)
    WRITE           reduce using rule 40 (statement -> empty .)
    FOR             reduce using rule 40 (statement -> empty .)
    IF              reduce using rule 40 (statement -> empty .)
    WHILE           reduce using rule 40 (statement -> empty .)


state 127

    (41) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 160


state 128

    (42) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 161


state 129

    (43) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 162


state 130

    (44) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 163


state 131

    (45) statement1 -> for .

    ID              reduce using rule 45 (statement1 -> for .)
    READ            reduce using rule 45 (statement1 -> for .)
    WRITE           reduce using rule 45 (statement1 -> for .)
    FOR             reduce using rule 45 (statement1 -> for .)
    IF              reduce using rule 45 (statement1 -> for .)
    WHILE           reduce using rule 45 (statement1 -> for .)
    RCURLY          reduce using rule 45 (statement1 -> for .)
    RETURN          reduce using rule 45 (statement1 -> for .)


state 132

    (46) statement1 -> if .

    ID              reduce using rule 46 (statement1 -> if .)
    READ            reduce using rule 46 (statement1 -> if .)
    WRITE           reduce using rule 46 (statement1 -> if .)
    FOR             reduce using rule 46 (statement1 -> if .)
    IF              reduce using rule 46 (statement1 -> if .)
    WHILE           reduce using rule 46 (statement1 -> if .)
    RCURLY          reduce using rule 46 (statement1 -> if .)
    RETURN          reduce using rule 46 (statement1 -> if .)


state 133

    (47) statement1 -> while .

    ID              reduce using rule 47 (statement1 -> while .)
    READ            reduce using rule 47 (statement1 -> while .)
    WRITE           reduce using rule 47 (statement1 -> while .)
    FOR             reduce using rule 47 (statement1 -> while .)
    IF              reduce using rule 47 (statement1 -> while .)
    WHILE           reduce using rule 47 (statement1 -> while .)
    RCURLY          reduce using rule 47 (statement1 -> while .)
    RETURN          reduce using rule 47 (statement1 -> while .)


state 134

    (48) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (127) saveId2 -> .
    (66) era_call -> .

    EQUALS          reduce using rule 127 (saveId2 -> .)
    LBRACKET        reduce using rule 127 (saveId2 -> .)
    LPAREN          reduce using rule 66 (era_call -> .)

    saveId2                        shift and go to state 164
    era_call                       shift and go to state 102

state 135

    (87) lectura -> READ . operatorRead LPAREN exp operatorReadQuad RPAREN
    (113) operatorRead -> .

    LPAREN          reduce using rule 113 (operatorRead -> .)

    operatorRead                   shift and go to state 165

state 136

    (80) escritura -> WRITE . LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN

    LPAREN          shift and go to state 166


state 137

    (73) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (71) for_op -> .

    LPAREN          reduce using rule 71 (for_op -> .)

    for_op                         shift and go to state 167

state 138

    (68) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 168


state 139

    (79) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (78) while_op -> .

    LPAREN          reduce using rule 78 (while_op -> .)

    while_op                       shift and go to state 169

state 140

    (53) param1 -> ID COMMA param1 . addParam
    (55) param1 -> ID COMMA param1 .
    (57) addParam -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 55 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for INT resolved using rule 55 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for CHAR resolved using rule 55 (param1 -> ID COMMA param1 .)
    RPAREN          reduce using rule 55 (param1 -> ID COMMA param1 .)
    INT             reduce using rule 55 (param1 -> ID COMMA param1 .)
    FLOAT           reduce using rule 55 (param1 -> ID COMMA param1 .)
    CHAR            reduce using rule 55 (param1 -> ID COMMA param1 .)

  ! RPAREN          [ reduce using rule 57 (addParam -> .) ]
  ! INT             [ reduce using rule 57 (addParam -> .) ]
  ! FLOAT           [ reduce using rule 57 (addParam -> .) ]
  ! CHAR            [ reduce using rule 57 (addParam -> .) ]

    addParam                       shift and go to state 170

state 141

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    SEMICOLON       shift and go to state 171


state 142

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 172


state 143

    (89) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (90) genera_quad_or -> .

    RBRACKET        reduce using rule 90 (genera_quad_or -> .)
    RPAREN          reduce using rule 90 (genera_quad_or -> .)
    COMMA           reduce using rule 90 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 90 (genera_quad_or -> .)
    TO              reduce using rule 90 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 173

state 144

    (97) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (91) genera_quad_and -> .

    OR              reduce using rule 91 (genera_quad_and -> .)
    RBRACKET        reduce using rule 91 (genera_quad_and -> .)
    RPAREN          reduce using rule 91 (genera_quad_and -> .)
    COMMA           reduce using rule 91 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 91 (genera_quad_and -> .)
    TO              reduce using rule 91 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 174

state 145

    (100) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 175

state 146

    (101) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 176

state 147

    (102) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 177

state 148

    (103) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 178

state 149

    (104) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 179

state 150

    (105) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (92) compare_quad -> .

    CTEI            reduce using rule 92 (compare_quad -> .)
    CTEF            reduce using rule 92 (compare_quad -> .)
    CTEC            reduce using rule 92 (compare_quad -> .)
    CTESTRING       reduce using rule 92 (compare_quad -> .)
    LPAREN          reduce using rule 92 (compare_quad -> .)
    ID              reduce using rule 92 (compare_quad -> .)
    PLUS            reduce using rule 92 (compare_quad -> .)
    MINUS           reduce using rule 92 (compare_quad -> .)
    MUL             reduce using rule 92 (compare_quad -> .)
    DIV             reduce using rule 92 (compare_quad -> .)
    AND             reduce using rule 92 (compare_quad -> .)
    OR              reduce using rule 92 (compare_quad -> .)
    RBRACKET        reduce using rule 92 (compare_quad -> .)
    RPAREN          reduce using rule 92 (compare_quad -> .)
    COMMA           reduce using rule 92 (compare_quad -> .)
    SEMICOLON       reduce using rule 92 (compare_quad -> .)
    TO              reduce using rule 92 (compare_quad -> .)

    compare_quad                   shift and go to state 180

state 151

    (107) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (109) genera_sum_quad -> .

    GT              reduce using rule 109 (genera_sum_quad -> .)
    LT              reduce using rule 109 (genera_sum_quad -> .)
    GTE             reduce using rule 109 (genera_sum_quad -> .)
    LTE             reduce using rule 109 (genera_sum_quad -> .)
    NE              reduce using rule 109 (genera_sum_quad -> .)
    COMPARE         reduce using rule 109 (genera_sum_quad -> .)
    AND             reduce using rule 109 (genera_sum_quad -> .)
    OR              reduce using rule 109 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 109 (genera_sum_quad -> .)
    RPAREN          reduce using rule 109 (genera_sum_quad -> .)
    COMMA           reduce using rule 109 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 109 (genera_sum_quad -> .)
    TO              reduce using rule 109 (genera_sum_quad -> .)
    CTEI            reduce using rule 109 (genera_sum_quad -> .)
    CTEF            reduce using rule 109 (genera_sum_quad -> .)
    CTEC            reduce using rule 109 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 109 (genera_sum_quad -> .)
    LPAREN          reduce using rule 109 (genera_sum_quad -> .)
    ID              reduce using rule 109 (genera_sum_quad -> .)
    PLUS            reduce using rule 109 (genera_sum_quad -> .)
    MINUS           reduce using rule 109 (genera_sum_quad -> .)
    MUL             reduce using rule 109 (genera_sum_quad -> .)
    DIV             reduce using rule 109 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 181

state 152

    (108) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (109) genera_sum_quad -> .

    GT              reduce using rule 109 (genera_sum_quad -> .)
    LT              reduce using rule 109 (genera_sum_quad -> .)
    GTE             reduce using rule 109 (genera_sum_quad -> .)
    LTE             reduce using rule 109 (genera_sum_quad -> .)
    NE              reduce using rule 109 (genera_sum_quad -> .)
    COMPARE         reduce using rule 109 (genera_sum_quad -> .)
    AND             reduce using rule 109 (genera_sum_quad -> .)
    OR              reduce using rule 109 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 109 (genera_sum_quad -> .)
    RPAREN          reduce using rule 109 (genera_sum_quad -> .)
    COMMA           reduce using rule 109 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 109 (genera_sum_quad -> .)
    TO              reduce using rule 109 (genera_sum_quad -> .)
    CTEI            reduce using rule 109 (genera_sum_quad -> .)
    CTEF            reduce using rule 109 (genera_sum_quad -> .)
    CTEC            reduce using rule 109 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 109 (genera_sum_quad -> .)
    LPAREN          reduce using rule 109 (genera_sum_quad -> .)
    ID              reduce using rule 109 (genera_sum_quad -> .)
    PLUS            reduce using rule 109 (genera_sum_quad -> .)
    MINUS           reduce using rule 109 (genera_sum_quad -> .)
    MUL             reduce using rule 109 (genera_sum_quad -> .)
    DIV             reduce using rule 109 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 182

state 153

    (116) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (110) genera_mul_quad -> .

    PLUS            reduce using rule 110 (genera_mul_quad -> .)
    MINUS           reduce using rule 110 (genera_mul_quad -> .)
    GT              reduce using rule 110 (genera_mul_quad -> .)
    LT              reduce using rule 110 (genera_mul_quad -> .)
    GTE             reduce using rule 110 (genera_mul_quad -> .)
    LTE             reduce using rule 110 (genera_mul_quad -> .)
    NE              reduce using rule 110 (genera_mul_quad -> .)
    COMPARE         reduce using rule 110 (genera_mul_quad -> .)
    AND             reduce using rule 110 (genera_mul_quad -> .)
    OR              reduce using rule 110 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 110 (genera_mul_quad -> .)
    RPAREN          reduce using rule 110 (genera_mul_quad -> .)
    COMMA           reduce using rule 110 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 110 (genera_mul_quad -> .)
    TO              reduce using rule 110 (genera_mul_quad -> .)
    CTEI            reduce using rule 110 (genera_mul_quad -> .)
    CTEF            reduce using rule 110 (genera_mul_quad -> .)
    CTEC            reduce using rule 110 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 110 (genera_mul_quad -> .)
    LPAREN          reduce using rule 110 (genera_mul_quad -> .)
    ID              reduce using rule 110 (genera_mul_quad -> .)
    MUL             reduce using rule 110 (genera_mul_quad -> .)
    DIV             reduce using rule 110 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 183

state 154

    (117) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (110) genera_mul_quad -> .

    PLUS            reduce using rule 110 (genera_mul_quad -> .)
    MINUS           reduce using rule 110 (genera_mul_quad -> .)
    GT              reduce using rule 110 (genera_mul_quad -> .)
    LT              reduce using rule 110 (genera_mul_quad -> .)
    GTE             reduce using rule 110 (genera_mul_quad -> .)
    LTE             reduce using rule 110 (genera_mul_quad -> .)
    NE              reduce using rule 110 (genera_mul_quad -> .)
    COMPARE         reduce using rule 110 (genera_mul_quad -> .)
    AND             reduce using rule 110 (genera_mul_quad -> .)
    OR              reduce using rule 110 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 110 (genera_mul_quad -> .)
    RPAREN          reduce using rule 110 (genera_mul_quad -> .)
    COMMA           reduce using rule 110 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 110 (genera_mul_quad -> .)
    TO              reduce using rule 110 (genera_mul_quad -> .)
    CTEI            reduce using rule 110 (genera_mul_quad -> .)
    CTEF            reduce using rule 110 (genera_mul_quad -> .)
    CTEC            reduce using rule 110 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 110 (genera_mul_quad -> .)
    LPAREN          reduce using rule 110 (genera_mul_quad -> .)
    ID              reduce using rule 110 (genera_mul_quad -> .)
    MUL             reduce using rule 110 (genera_mul_quad -> .)
    DIV             reduce using rule 110 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 184

state 155

    (60) llamada -> ID era_call LPAREN aux_exp . quad_param RPAREN gosub_quad llena_endproc
    (64) quad_param -> .

    RPAREN          reduce using rule 64 (quad_param -> .)

    quad_param                     shift and go to state 185

state 156

    (61) aux_exp -> exp .
    (62) aux_exp -> exp . COMMA aux_exp

    RPAREN          reduce using rule 61 (aux_exp -> exp .)
    COMMA           shift and go to state 186


state 157

    (63) aux_exp -> empty .
    (21) var1 -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 63 (aux_exp -> empty .) ]


state 158

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 187


state 159

    (39) statement -> statement1 statement .

    RCURLY          reduce using rule 39 (statement -> statement1 statement .)
    RETURN          reduce using rule 39 (statement -> statement1 statement .)
    ID              reduce using rule 39 (statement -> statement1 statement .)
    READ            reduce using rule 39 (statement -> statement1 statement .)
    WRITE           reduce using rule 39 (statement -> statement1 statement .)
    FOR             reduce using rule 39 (statement -> statement1 statement .)
    IF              reduce using rule 39 (statement -> statement1 statement .)
    WHILE           reduce using rule 39 (statement -> statement1 statement .)


state 160

    (41) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    WRITE           reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 41 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 41 (statement1 -> asignacion SEMICOLON .)


state 161

    (42) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    WRITE           reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 42 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 42 (statement1 -> llamada SEMICOLON .)


state 162

    (43) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    WRITE           reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 43 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 43 (statement1 -> lectura SEMICOLON .)


state 163

    (44) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    WRITE           reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 44 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 44 (statement1 -> escritura SEMICOLON .)


state 164

    (48) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

    EQUALS          shift and go to state 188
    LBRACKET        shift and go to state 49

    arr                            shift and go to state 189

state 165

    (87) lectura -> READ operatorRead . LPAREN exp operatorReadQuad RPAREN

    LPAREN          shift and go to state 190


state 166

    (80) escritura -> WRITE LPAREN . operadorWrite escritura1 operadorWriteQuad RPAREN
    (111) operadorWrite -> .

    COMILLA         reduce using rule 111 (operadorWrite -> .)
    CTEI            reduce using rule 111 (operadorWrite -> .)
    CTEF            reduce using rule 111 (operadorWrite -> .)
    CTEC            reduce using rule 111 (operadorWrite -> .)
    CTESTRING       reduce using rule 111 (operadorWrite -> .)
    LPAREN          reduce using rule 111 (operadorWrite -> .)
    ID              reduce using rule 111 (operadorWrite -> .)
    RPAREN          reduce using rule 111 (operadorWrite -> .)
    COMMA           reduce using rule 111 (operadorWrite -> .)
    OR              reduce using rule 111 (operadorWrite -> .)
    AND             reduce using rule 111 (operadorWrite -> .)
    GT              reduce using rule 111 (operadorWrite -> .)
    LT              reduce using rule 111 (operadorWrite -> .)
    GTE             reduce using rule 111 (operadorWrite -> .)
    LTE             reduce using rule 111 (operadorWrite -> .)
    NE              reduce using rule 111 (operadorWrite -> .)
    COMPARE         reduce using rule 111 (operadorWrite -> .)
    PLUS            reduce using rule 111 (operadorWrite -> .)
    MINUS           reduce using rule 111 (operadorWrite -> .)
    MUL             reduce using rule 111 (operadorWrite -> .)
    DIV             reduce using rule 111 (operadorWrite -> .)

    operadorWrite                  shift and go to state 191

state 167

    (73) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end

    LPAREN          shift and go to state 192


state 168

    (68) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    exp                            shift and go to state 193
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 169

    (79) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement loop_end

    LPAREN          shift and go to state 194


state 170

    (53) param1 -> ID COMMA param1 addParam .

    RPAREN          reduce using rule 53 (param1 -> ID COMMA param1 addParam .)
    INT             reduce using rule 53 (param1 -> ID COMMA param1 addParam .)
    FLOAT           reduce using rule 53 (param1 -> ID COMMA param1 addParam .)
    CHAR            reduce using rule 53 (param1 -> ID COMMA param1 addParam .)


state 171

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RCURLY end_func

    LCURLY          shift and go to state 195


state 172

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LCURLY          shift and go to state 196


state 173

    (89) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 89 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 89 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 89 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 89 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 89 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 174

    (97) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 97 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 175

    (100) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 100 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 176

    (101) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 101 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 177

    (102) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 102 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 178

    (103) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 103 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 179

    (104) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 104 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 180

    (105) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 105 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 181

    (107) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 107 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 182

    (108) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 108 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 183

    (116) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 116 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 184

    (117) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 117 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 185

    (60) llamada -> ID era_call LPAREN aux_exp quad_param . RPAREN gosub_quad llena_endproc

    RPAREN          shift and go to state 197


state 186

    (62) aux_exp -> exp COMMA . aux_exp
    (61) aux_exp -> . exp
    (62) aux_exp -> . exp COMMA aux_exp
    (63) aux_exp -> . empty
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (125) empty -> .
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 125 (empty -> .)
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71

    exp                            shift and go to state 156
    aux_exp                        shift and go to state 198
    empty                          shift and go to state 157
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69

state 187

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 188

    (48) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 199

state 189

    (49) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 200


state 190

    (87) lectura -> READ operatorRead LPAREN . exp operatorReadQuad RPAREN
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    exp                            shift and go to state 201
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 191

    (80) escritura -> WRITE LPAREN operadorWrite . escritura1 operadorWriteQuad RPAREN
    (81) escritura1 -> . escritura2 COMMA escritura2
    (82) escritura1 -> . escritura2
    (83) escritura2 -> . COMILLA CTESTRING COMILLA
    (84) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (85) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (86) escritura2 -> . exp
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    COMILLA         shift and go to state 204
    CTEI            shift and go to state 205
    CTEF            shift and go to state 206
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    COMMA           reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    escritura1                     shift and go to state 202
    escritura2                     shift and go to state 203
    exp                            shift and go to state 207
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 192

    (73) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 209

    for1                           shift and go to state 208

state 193

    (68) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 210


state 194

    (79) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement loop_end
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    exp                            shift and go to state 211
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 195

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (125) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    RCURLY          reduce using rule 125 (empty -> .)

    vars                           shift and go to state 212
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 196

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (125) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)

    vars                           shift and go to state 213
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 197

    (60) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN . gosub_quad llena_endproc
    (67) gosub_quad -> .

    MUL             reduce using rule 67 (gosub_quad -> .)
    DIV             reduce using rule 67 (gosub_quad -> .)
    PLUS            reduce using rule 67 (gosub_quad -> .)
    MINUS           reduce using rule 67 (gosub_quad -> .)
    GT              reduce using rule 67 (gosub_quad -> .)
    LT              reduce using rule 67 (gosub_quad -> .)
    GTE             reduce using rule 67 (gosub_quad -> .)
    LTE             reduce using rule 67 (gosub_quad -> .)
    NE              reduce using rule 67 (gosub_quad -> .)
    COMPARE         reduce using rule 67 (gosub_quad -> .)
    AND             reduce using rule 67 (gosub_quad -> .)
    OR              reduce using rule 67 (gosub_quad -> .)
    RBRACKET        reduce using rule 67 (gosub_quad -> .)
    RPAREN          reduce using rule 67 (gosub_quad -> .)
    COMMA           reduce using rule 67 (gosub_quad -> .)
    SEMICOLON       reduce using rule 67 (gosub_quad -> .)
    TO              reduce using rule 67 (gosub_quad -> .)
    CTEI            reduce using rule 67 (gosub_quad -> .)
    CTEF            reduce using rule 67 (gosub_quad -> .)
    CTEC            reduce using rule 67 (gosub_quad -> .)
    CTESTRING       reduce using rule 67 (gosub_quad -> .)
    LPAREN          reduce using rule 67 (gosub_quad -> .)
    ID              reduce using rule 67 (gosub_quad -> .)

    gosub_quad                     shift and go to state 214

state 198

    (62) aux_exp -> exp COMMA aux_exp .

    RPAREN          reduce using rule 62 (aux_exp -> exp COMMA aux_exp .)


state 199

    (48) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

    exp                            shift and go to state 215
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 200

    (49) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (51) addOperadorName -> .

    CTEI            reduce using rule 51 (addOperadorName -> .)
    CTEF            reduce using rule 51 (addOperadorName -> .)
    CTEC            reduce using rule 51 (addOperadorName -> .)
    CTESTRING       reduce using rule 51 (addOperadorName -> .)
    LPAREN          reduce using rule 51 (addOperadorName -> .)
    ID              reduce using rule 51 (addOperadorName -> .)
    OR              reduce using rule 51 (addOperadorName -> .)
    AND             reduce using rule 51 (addOperadorName -> .)
    GT              reduce using rule 51 (addOperadorName -> .)
    LT              reduce using rule 51 (addOperadorName -> .)
    GTE             reduce using rule 51 (addOperadorName -> .)
    LTE             reduce using rule 51 (addOperadorName -> .)
    NE              reduce using rule 51 (addOperadorName -> .)
    COMPARE         reduce using rule 51 (addOperadorName -> .)
    PLUS            reduce using rule 51 (addOperadorName -> .)
    MINUS           reduce using rule 51 (addOperadorName -> .)
    MUL             reduce using rule 51 (addOperadorName -> .)
    DIV             reduce using rule 51 (addOperadorName -> .)
    SEMICOLON       reduce using rule 51 (addOperadorName -> .)
    TO              reduce using rule 51 (addOperadorName -> .)

    addOperadorName                shift and go to state 216

state 201

    (87) lectura -> READ operatorRead LPAREN exp . operatorReadQuad RPAREN
    (114) operatorReadQuad -> .

    RPAREN          reduce using rule 114 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 217

state 202

    (80) escritura -> WRITE LPAREN operadorWrite escritura1 . operadorWriteQuad RPAREN
    (112) operadorWriteQuad -> .

    RPAREN          reduce using rule 112 (operadorWriteQuad -> .)

    operadorWriteQuad              shift and go to state 218

state 203

    (81) escritura1 -> escritura2 . COMMA escritura2
    (82) escritura1 -> escritura2 .

    COMMA           shift and go to state 219
    RPAREN          reduce using rule 82 (escritura1 -> escritura2 .)


state 204

    (83) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 220


state 205

    (84) escritura2 -> CTEI . saveCTE operadorWriteQuad
    (119) pexp -> CTEI . saveCTE
    (128) saveCTE -> .

    COMMA           reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 221

state 206

    (85) escritura2 -> CTEF . saveCTE operadorWriteQuad
    (120) pexp -> CTEF . saveCTE
    (128) saveCTE -> .

    COMMA           reduce using rule 128 (saveCTE -> .)
    RPAREN          reduce using rule 128 (saveCTE -> .)
    MUL             reduce using rule 128 (saveCTE -> .)
    DIV             reduce using rule 128 (saveCTE -> .)
    PLUS            reduce using rule 128 (saveCTE -> .)
    MINUS           reduce using rule 128 (saveCTE -> .)
    GT              reduce using rule 128 (saveCTE -> .)
    LT              reduce using rule 128 (saveCTE -> .)
    GTE             reduce using rule 128 (saveCTE -> .)
    LTE             reduce using rule 128 (saveCTE -> .)
    NE              reduce using rule 128 (saveCTE -> .)
    COMPARE         reduce using rule 128 (saveCTE -> .)
    AND             reduce using rule 128 (saveCTE -> .)
    OR              reduce using rule 128 (saveCTE -> .)

    saveCTE                        shift and go to state 222

state 207

    (86) escritura2 -> exp .

    COMMA           reduce using rule 86 (escritura2 -> exp .)
    RPAREN          reduce using rule 86 (escritura2 -> exp .)


state 208

    (73) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY for_end

    RPAREN          shift and go to state 223


state 209

    (74) for1 -> FROM . asignacion TO exp
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 225

    asignacion                     shift and go to state 224

state 210

    (68) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (93) if_quad -> .

    LCURLY          reduce using rule 93 (if_quad -> .)

    if_quad                        shift and go to state 226

state 211

    (79) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement loop_end

    RPAREN          shift and go to state 227


state 212

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RCURLY end_func
    (35) fun_goto -> .

    ID              reduce using rule 35 (fun_goto -> .)
    READ            reduce using rule 35 (fun_goto -> .)
    WRITE           reduce using rule 35 (fun_goto -> .)
    FOR             reduce using rule 35 (fun_goto -> .)
    IF              reduce using rule 35 (fun_goto -> .)
    WHILE           reduce using rule 35 (fun_goto -> .)
    RCURLY          reduce using rule 35 (fun_goto -> .)

    fun_goto                       shift and go to state 228

state 213

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (35) fun_goto -> .

    ID              reduce using rule 35 (fun_goto -> .)
    READ            reduce using rule 35 (fun_goto -> .)
    WRITE           reduce using rule 35 (fun_goto -> .)
    FOR             reduce using rule 35 (fun_goto -> .)
    IF              reduce using rule 35 (fun_goto -> .)
    WHILE           reduce using rule 35 (fun_goto -> .)
    RETURN          reduce using rule 35 (fun_goto -> .)

    fun_goto                       shift and go to state 229

state 214

    (60) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad . llena_endproc
    (65) llena_endproc -> .

    MUL             reduce using rule 65 (llena_endproc -> .)
    DIV             reduce using rule 65 (llena_endproc -> .)
    PLUS            reduce using rule 65 (llena_endproc -> .)
    MINUS           reduce using rule 65 (llena_endproc -> .)
    GT              reduce using rule 65 (llena_endproc -> .)
    LT              reduce using rule 65 (llena_endproc -> .)
    GTE             reduce using rule 65 (llena_endproc -> .)
    LTE             reduce using rule 65 (llena_endproc -> .)
    NE              reduce using rule 65 (llena_endproc -> .)
    COMPARE         reduce using rule 65 (llena_endproc -> .)
    AND             reduce using rule 65 (llena_endproc -> .)
    OR              reduce using rule 65 (llena_endproc -> .)
    RBRACKET        reduce using rule 65 (llena_endproc -> .)
    RPAREN          reduce using rule 65 (llena_endproc -> .)
    COMMA           reduce using rule 65 (llena_endproc -> .)
    SEMICOLON       reduce using rule 65 (llena_endproc -> .)
    TO              reduce using rule 65 (llena_endproc -> .)
    CTEI            reduce using rule 65 (llena_endproc -> .)
    CTEF            reduce using rule 65 (llena_endproc -> .)
    CTEC            reduce using rule 65 (llena_endproc -> .)
    CTESTRING       reduce using rule 65 (llena_endproc -> .)
    LPAREN          reduce using rule 65 (llena_endproc -> .)
    ID              reduce using rule 65 (llena_endproc -> .)

    llena_endproc                  shift and go to state 230

state 215

    (48) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (50) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 50 (genera_quad_asignacion -> .)
    TO              reduce using rule 50 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 231

state 216

    (49) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)
    TO              reduce using rule 125 (empty -> .)

    exp                            shift and go to state 232
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 217

    (87) lectura -> READ operatorRead LPAREN exp operatorReadQuad . RPAREN

    RPAREN          shift and go to state 233


state 218

    (80) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad . RPAREN

    RPAREN          shift and go to state 234


state 219

    (81) escritura1 -> escritura2 COMMA . escritura2
    (83) escritura2 -> . COMILLA CTESTRING COMILLA
    (84) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (85) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (86) escritura2 -> . exp
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    COMILLA         shift and go to state 204
    CTEI            shift and go to state 205
    CTEF            shift and go to state 206
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    escritura2                     shift and go to state 235
    exp                            shift and go to state 207
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 220

    (83) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 236


state 221

    (84) escritura2 -> CTEI saveCTE . operadorWriteQuad
    (119) pexp -> CTEI saveCTE .
    (112) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 112 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 112 (operadorWriteQuad -> .)
    MUL             reduce using rule 119 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 119 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 119 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 119 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 119 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 119 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 112 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 112 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 119 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 119 (pexp -> CTEI saveCTE .) ]

    operadorWriteQuad              shift and go to state 237

state 222

    (85) escritura2 -> CTEF saveCTE . operadorWriteQuad
    (120) pexp -> CTEF saveCTE .
    (112) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 112 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 112 (operadorWriteQuad -> .)
    MUL             reduce using rule 120 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 120 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 120 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 120 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 120 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 120 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 112 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 112 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 120 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 120 (pexp -> CTEF saveCTE .) ]

    operadorWriteQuad              shift and go to state 238

state 223

    (73) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY for_end
    (72) for_quad -> .

    LCURLY          reduce using rule 72 (for_quad -> .)

    for_quad                       shift and go to state 239

state 224

    (74) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 240


state 225

    (48) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (127) saveId2 -> .

    EQUALS          reduce using rule 127 (saveId2 -> .)
    LBRACKET        reduce using rule 127 (saveId2 -> .)

    saveId2                        shift and go to state 164

state 226

    (68) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 241


state 227

    (79) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement loop_end
    (77) while_quad -> .

    LCURLY          reduce using rule 77 (while_quad -> .)

    while_quad                     shift and go to state 242

state 228

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RCURLY end_func
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 243
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 229

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RETURN          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 244
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 230

    (60) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .

    MUL             reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    DIV             reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    PLUS            reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    MINUS           reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GT              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LT              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GTE             reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LTE             reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    NE              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMPARE         reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    AND             reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    OR              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    RBRACKET        reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    RPAREN          reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMMA           reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    SEMICOLON       reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    TO              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEI            reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEF            reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEC            reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTESTRING       reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LPAREN          reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    ID              reduce using rule 60 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)


state 231

    (48) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 48 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 48 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 232

    (49) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (50) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 50 (genera_quad_asignacion -> .)
    TO              reduce using rule 50 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 245

state 233

    (87) lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 87 (lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .)


state 234

    (80) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .

    SEMICOLON       reduce using rule 80 (escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .)


state 235

    (81) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 81 (escritura1 -> escritura2 COMMA escritura2 .)


state 236

    (83) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 83 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 83 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 237

    (84) escritura2 -> CTEI saveCTE operadorWriteQuad .

    COMMA           reduce using rule 84 (escritura2 -> CTEI saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 84 (escritura2 -> CTEI saveCTE operadorWriteQuad .)


state 238

    (85) escritura2 -> CTEF saveCTE operadorWriteQuad .

    COMMA           reduce using rule 85 (escritura2 -> CTEF saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 85 (escritura2 -> CTEF saveCTE operadorWriteQuad .)


state 239

    (73) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY for_end

    LCURLY          shift and go to state 246


state 240

    (74) for1 -> FROM asignacion TO . exp
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    RPAREN          reduce using rule 125 (empty -> .)

    exp                            shift and go to state 247
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 241

    (68) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 248
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 242

    (79) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement loop_end

    LCURLY          shift and go to state 249


state 243

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RCURLY end_func

    RCURLY          shift and go to state 250


state 244

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    RETURN          shift and go to state 251


state 245

    (49) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 49 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 49 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 246

    (73) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY for_end
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 252
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 247

    (74) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 74 (for1 -> FROM asignacion TO exp .)


state 248

    (68) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 253


state 249

    (79) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement loop_end
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

  ! ID              [ reduce using rule 125 (empty -> .) ]
  ! READ            [ reduce using rule 125 (empty -> .) ]
  ! WRITE           [ reduce using rule 125 (empty -> .) ]
  ! FOR             [ reduce using rule 125 (empty -> .) ]
  ! IF              [ reduce using rule 125 (empty -> .) ]
  ! WHILE           [ reduce using rule 125 (empty -> .) ]

    statement                      shift and go to state 254
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 250

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY . end_func
    (36) end_func -> .

    FUNCTION        reduce using rule 36 (end_func -> .)
    MAIN            reduce using rule 36 (end_func -> .)
    $end            reduce using rule 36 (end_func -> .)

    end_func                       shift and go to state 255

state 251

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (37) operadorReturn -> .

    CTEI            reduce using rule 37 (operadorReturn -> .)
    CTEF            reduce using rule 37 (operadorReturn -> .)
    CTEC            reduce using rule 37 (operadorReturn -> .)
    CTESTRING       reduce using rule 37 (operadorReturn -> .)
    LPAREN          reduce using rule 37 (operadorReturn -> .)
    ID              reduce using rule 37 (operadorReturn -> .)
    SEMICOLON       reduce using rule 37 (operadorReturn -> .)
    OR              reduce using rule 37 (operadorReturn -> .)
    AND             reduce using rule 37 (operadorReturn -> .)
    GT              reduce using rule 37 (operadorReturn -> .)
    LT              reduce using rule 37 (operadorReturn -> .)
    GTE             reduce using rule 37 (operadorReturn -> .)
    LTE             reduce using rule 37 (operadorReturn -> .)
    NE              reduce using rule 37 (operadorReturn -> .)
    COMPARE         reduce using rule 37 (operadorReturn -> .)
    PLUS            reduce using rule 37 (operadorReturn -> .)
    MINUS           reduce using rule 37 (operadorReturn -> .)
    MUL             reduce using rule 37 (operadorReturn -> .)
    DIV             reduce using rule 37 (operadorReturn -> .)

    operadorReturn                 shift and go to state 256

state 252

    (73) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY for_end

    RCURLY          shift and go to state 257


state 253

    (68) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (69) else -> . ELSE else_quad LCURLY statement RCURLY
    (70) else -> . empty
    (125) empty -> .

    ELSE            shift and go to state 259
    ID              reduce using rule 125 (empty -> .)
    READ            reduce using rule 125 (empty -> .)
    WRITE           reduce using rule 125 (empty -> .)
    FOR             reduce using rule 125 (empty -> .)
    IF              reduce using rule 125 (empty -> .)
    WHILE           reduce using rule 125 (empty -> .)
    RCURLY          reduce using rule 125 (empty -> .)
    RETURN          reduce using rule 125 (empty -> .)

    else                           shift and go to state 258
    empty                          shift and go to state 260

state 254

    (79) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . loop_end
    (76) loop_end -> .

    ID              reduce using rule 76 (loop_end -> .)
    READ            reduce using rule 76 (loop_end -> .)
    WRITE           reduce using rule 76 (loop_end -> .)
    FOR             reduce using rule 76 (loop_end -> .)
    IF              reduce using rule 76 (loop_end -> .)
    WHILE           reduce using rule 76 (loop_end -> .)
    RCURLY          reduce using rule 76 (loop_end -> .)
    RETURN          reduce using rule 76 (loop_end -> .)

    loop_end                       shift and go to state 261

state 255

    (33) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .

    FUNCTION        reduce using rule 33 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    MAIN            reduce using rule 33 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    $end            reduce using rule 33 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)


state 256

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY end_func
    (88) exp -> . nexp
    (89) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (96) nexp -> . compexp
    (97) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (98) compexp -> . sumexp
    (99) compexp -> . compexp1 sumexp
    (106) sumexp -> . mulexp
    (107) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (108) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (100) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (101) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (115) mulexp -> . pexp
    (116) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (117) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (118) pexp -> . var1 saveId
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . llamada
    (124) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (125) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    CTESTRING       shift and go to state 68
    LPAREN          shift and go to state 70
    ID              shift and go to state 71
    MUL             reduce using rule 125 (empty -> .)
    DIV             reduce using rule 125 (empty -> .)
    PLUS            reduce using rule 125 (empty -> .)
    MINUS           reduce using rule 125 (empty -> .)
    GT              reduce using rule 125 (empty -> .)
    LT              reduce using rule 125 (empty -> .)
    GTE             reduce using rule 125 (empty -> .)
    LTE             reduce using rule 125 (empty -> .)
    NE              reduce using rule 125 (empty -> .)
    COMPARE         reduce using rule 125 (empty -> .)
    AND             reduce using rule 125 (empty -> .)
    OR              reduce using rule 125 (empty -> .)
    SEMICOLON       reduce using rule 125 (empty -> .)

    exp                            shift and go to state 262
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 69
    empty                          shift and go to state 34

state 257

    (73) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . for_end
    (75) for_end -> .

    ID              reduce using rule 75 (for_end -> .)
    READ            reduce using rule 75 (for_end -> .)
    WRITE           reduce using rule 75 (for_end -> .)
    FOR             reduce using rule 75 (for_end -> .)
    IF              reduce using rule 75 (for_end -> .)
    WHILE           reduce using rule 75 (for_end -> .)
    RCURLY          reduce using rule 75 (for_end -> .)
    RETURN          reduce using rule 75 (for_end -> .)

    for_end                        shift and go to state 263

state 258

    (68) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (94) end_if -> .

    ID              reduce using rule 94 (end_if -> .)
    READ            reduce using rule 94 (end_if -> .)
    WRITE           reduce using rule 94 (end_if -> .)
    FOR             reduce using rule 94 (end_if -> .)
    IF              reduce using rule 94 (end_if -> .)
    WHILE           reduce using rule 94 (end_if -> .)
    RCURLY          reduce using rule 94 (end_if -> .)
    RETURN          reduce using rule 94 (end_if -> .)

    end_if                         shift and go to state 264

state 259

    (69) else -> ELSE . else_quad LCURLY statement RCURLY
    (95) else_quad -> .

    LCURLY          reduce using rule 95 (else_quad -> .)

    else_quad                      shift and go to state 265

state 260

    (70) else -> empty .

    ID              reduce using rule 70 (else -> empty .)
    READ            reduce using rule 70 (else -> empty .)
    WRITE           reduce using rule 70 (else -> empty .)
    FOR             reduce using rule 70 (else -> empty .)
    IF              reduce using rule 70 (else -> empty .)
    WHILE           reduce using rule 70 (else -> empty .)
    RCURLY          reduce using rule 70 (else -> empty .)
    RETURN          reduce using rule 70 (else -> empty .)


state 261

    (79) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .

    ID              reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    READ            reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WRITE           reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    FOR             reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    IF              reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WHILE           reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RCURLY          reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RETURN          reduce using rule 79 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)


state 262

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY end_func
    (38) quad_return -> .

    SEMICOLON       reduce using rule 38 (quad_return -> .)

    quad_return                    shift and go to state 266

state 263

    (73) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .

    ID              reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    READ            reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WRITE           reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    FOR             reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    IF              reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WHILE           reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RCURLY          reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RETURN          reduce using rule 73 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)


state 264

    (68) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WRITE           reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 68 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 265

    (69) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 267


state 266

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 268


state 267

    (69) else -> ELSE else_quad LCURLY . statement RCURLY
    (39) statement -> . statement1 statement
    (40) statement -> . empty
    (41) statement1 -> . asignacion SEMICOLON
    (42) statement1 -> . llamada SEMICOLON
    (43) statement1 -> . lectura SEMICOLON
    (44) statement1 -> . escritura SEMICOLON
    (45) statement1 -> . for
    (46) statement1 -> . if
    (47) statement1 -> . while
    (125) empty -> .
    (48) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (49) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (60) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (87) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (80) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (73) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (68) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (79) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 125 (empty -> .)
    ID              shift and go to state 134
    READ            shift and go to state 135
    WRITE           shift and go to state 136
    FOR             shift and go to state 137
    IF              shift and go to state 138
    WHILE           shift and go to state 139

    statement                      shift and go to state 269
    statement1                     shift and go to state 125
    empty                          shift and go to state 126
    asignacion                     shift and go to state 127
    llamada                        shift and go to state 128
    lectura                        shift and go to state 129
    escritura                      shift and go to state 130
    for                            shift and go to state 131
    if                             shift and go to state 132
    while                          shift and go to state 133

state 268

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY end_func

    RCURLY          shift and go to state 270


state 269

    (69) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 271


state 270

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY . end_func
    (36) end_func -> .

    FUNCTION        reduce using rule 36 (end_func -> .)
    MAIN            reduce using rule 36 (end_func -> .)
    $end            reduce using rule 36 (end_func -> .)

    end_func                       shift and go to state 272

state 271

    (69) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WRITE           reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 69 (else -> ELSE else_quad LCURLY statement RCURLY .)


state 272

    (34) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .

    FUNCTION        reduce using rule 34 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    MAIN            reduce using rule 34 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    $end            reduce using rule 34 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MUL in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 71 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 112 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 112 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 112 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 113 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 113 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 113 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 114 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 115 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 116 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 116 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 117 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 118 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 118 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 119 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 120 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 120 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 121 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 121 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for READ in state 125 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 125 resolved as shift
WARNING: shift/reduce conflict for FOR in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for READ in state 249 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: reduce/reduce conflict in state 71 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 71
WARNING: reduce/reduce conflict in state 140 resolved using rule (param1 -> ID COMMA param1)
WARNING: rejected rule (addParam -> <empty>) in state 140
WARNING: reduce/reduce conflict in state 157 resolved using rule (var1 -> empty)
WARNING: rejected rule (aux_exp -> empty) in state 157
WARNING: reduce/reduce conflict in state 221 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 221
WARNING: reduce/reduce conflict in state 222 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 222
WARNING: Rule (aux_exp -> empty) is never reduced
