Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars quadMain modules main_end programa2
Rule 4     programa1 -> vars quadMain modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     quadMain -> <empty>
Rule 9     main_end -> <empty>
Rule 10    tipo -> INT guardaTipoVar
Rule 11    tipo -> FLOAT guardaTipoVar
Rule 12    tipo -> CHAR guardaTipoVar
Rule 13    guardaTipoVar -> <empty>
Rule 14    vars -> var
Rule 15    vars -> empty
Rule 16    var -> VAR var2
Rule 17    var1 -> ID
Rule 18    var1 -> ID COMMA var1 addV
Rule 19    var1 -> ID arr
Rule 20    var1 -> ID arr COMMA var1 addV
Rule 21    var1 -> empty
Rule 22    addV -> <empty>
Rule 23    var2 -> var2 tipo var1 SEMICOLON addV
Rule 24    var2 -> empty
Rule 25    arr -> LBRACKET CTEI RBRACKET
Rule 26    arr -> LBRACKET exp RBRACKET
Rule 27    modules -> fun modules
Rule 28    modules -> empty
Rule 29    save_fun -> <empty>
Rule 30    fun -> FUNCTION VOID fun1
Rule 31    fun -> FUNCTION INT fun2
Rule 32    fun -> FUNCTION CHAR fun2
Rule 33    fun -> FUNCTION FLOAT fun2
Rule 34    fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
Rule 35    fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
Rule 36    fun_goto -> <empty>
Rule 37    end_func -> <empty>
Rule 38    operadorReturn -> <empty>
Rule 39    quad_return -> <empty>
Rule 40    statement -> statement1 statement
Rule 41    statement -> empty
Rule 42    statement1 -> asignacion SEMICOLON
Rule 43    statement1 -> llamada SEMICOLON
Rule 44    statement1 -> lectura SEMICOLON
Rule 45    statement1 -> escritura SEMICOLON
Rule 46    statement1 -> for
Rule 47    statement1 -> if
Rule 48    statement1 -> while
Rule 49    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 50    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 51    genera_quad_asignacion -> <empty>
Rule 52    addOperadorName -> <empty>
Rule 53    param1 -> ID addParam
Rule 54    param1 -> ID COMMA param1 addParam
Rule 55    param1 -> ID arr
Rule 56    param1 -> ID COMMA param1
Rule 57    param1 -> empty
Rule 58    addParam -> <empty>
Rule 59    param2 -> param2 tipo param1
Rule 60    param2 -> empty
Rule 61    llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
Rule 62    aux_exp -> exp
Rule 63    aux_exp -> exp COMMA aux_exp
Rule 64    aux_exp -> empty
Rule 65    quad_param -> <empty>
Rule 66    llena_endproc -> <empty>
Rule 67    era_call -> <empty>
Rule 68    gosub_quad -> <empty>
Rule 69    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 70    else -> ELSE else_quad LCURLY statement RCURLY
Rule 71    else -> empty
Rule 72    for_op -> <empty>
Rule 73    for_quad -> <empty>
Rule 74    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
Rule 75    for1 -> FROM asignacion TO exp
Rule 76    for_end -> <empty>
Rule 77    loop_end -> <empty>
Rule 78    while_quad -> <empty>
Rule 79    while_op -> <empty>
Rule 80    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
Rule 81    escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
Rule 82    escritura1 -> escritura2 COMMA escritura2
Rule 83    escritura1 -> escritura2
Rule 84    escritura2 -> COMILLA CTESTRING COMILLA
Rule 85    escritura2 -> CTEI saveCTE operadorWriteQuad
Rule 86    escritura2 -> CTEF saveCTE operadorWriteQuad
Rule 87    escritura2 -> exp
Rule 88    lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN
Rule 89    exp -> nexp
Rule 90    exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 91    genera_quad_or -> <empty>
Rule 92    genera_quad_and -> <empty>
Rule 93    compare_quad -> <empty>
Rule 94    if_quad -> <empty>
Rule 95    end_if -> <empty>
Rule 96    else_quad -> <empty>
Rule 97    nexp -> compexp
Rule 98    nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 99    compexp -> sumexp
Rule 100   compexp -> compexp1 sumexp
Rule 101   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 102   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 103   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 104   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 105   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 106   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 107   sumexp -> mulexp
Rule 108   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 109   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 110   genera_sum_quad -> <empty>
Rule 111   genera_mul_quad -> <empty>
Rule 112   operadorWrite -> <empty>
Rule 113   operadorWriteQuad -> <empty>
Rule 114   operatorRead -> <empty>
Rule 115   operatorReadQuad -> <empty>
Rule 116   mulexp -> pexp
Rule 117   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 118   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 119   pexp -> var1 saveId
Rule 120   pexp -> CTEI saveCTE
Rule 121   pexp -> CTEF saveCTE
Rule 122   pexp -> CTEC saveCTE
Rule 123   pexp -> CTESTRING saveCTE
Rule 124   pexp -> llamada
Rule 125   pexp -> LPAREN exp RPAREN
Rule 126   empty -> <empty>
Rule 127   saveId -> <empty>
Rule 128   saveId2 -> <empty>
Rule 129   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 98
CHAR                 : 12 32
COMILLA              : 84 84
COMMA                : 18 20 54 56 63 82
COMPARE              : 106
CTEC                 : 122
CTEF                 : 86 121
CTEI                 : 25 85 120
CTESTRING            : 84 123
DIV                  : 118
ELSE                 : 70
END                  : 7
EQUALS               : 49 50
FLOAT                : 11 33
FOR                  : 74
FROM                 : 75
FUNCTION             : 30 31 32 33
GT                   : 101
GTE                  : 103
ID                   : 1 17 18 19 20 34 35 49 50 53 54 55 56 61
IF                   : 69
INT                  : 10 31
LBRACKET             : 25 26
LCURLY               : 7 34 35 69 70 74 80
LPAREN               : 7 34 35 61 69 74 80 81 88 125
LT                   : 102
LTE                  : 104
MAIN                 : 7
MINUS                : 109
MUL                  : 117
NE                   : 105
OR                   : 90
PLUS                 : 108
PROGRAM              : 1
RBRACKET             : 25 26
RCURLY               : 7 34 35 69 70 74
READ                 : 88
RETURN               : 35
RPAREN               : 7 34 35 61 69 74 80 81 88 125
SEMICOLON            : 1 23 34 35 35 42 43 44 45
TO                   : 75
VAR                  : 16
VOID                 : 30
WHILE                : 80
WRITE                : 81
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 49 50 90 98 101 102 103 104 105 106 108 109 117 118
addP                 : 1
addParam             : 53 54
addV                 : 18 20 23
arr                  : 19 20 50 55
asignacion           : 42 75
aux_exp              : 61 63
compare_quad         : 101 102 103 104 105 106
compexp              : 97 98 98
compexp1             : 100
else                 : 69
else_quad            : 70
empty                : 15 21 24 28 41 57 60 64 71
end_func             : 34 35
end_if               : 69
era_call             : 61
escritura            : 45
escritura1           : 81
escritura2           : 82 82 83
exp                  : 26 35 49 50 62 63 69 75 80 87 88 125
for                  : 46
for1                 : 74
for_end              : 74
for_op               : 74
for_quad             : 74
fun                  : 27
fun1                 : 30
fun2                 : 31 32 33
fun_goto             : 34 35
genera_mul_quad      : 117 118
genera_quad_and      : 98
genera_quad_asignacion : 49 50
genera_quad_or       : 90
genera_sum_quad      : 108 109
gosub_quad           : 61
guardaTipoVar        : 10 11 12
if                   : 47
if_quad              : 69
lectura              : 44
llamada              : 43 124
llena_endproc        : 61
loop_end             : 80
main                 : 6
main_end             : 3
modules              : 3 4 27
mulexp               : 107 108 108 109 109
nexp                 : 89 90 90
operadorReturn       : 35
operadorWrite        : 81
operadorWriteQuad    : 81 85 86
operatorRead         : 88
operatorReadQuad     : 88
param1               : 54 56 59
param2               : 7 34 35 59
pexp                 : 116 117 117 118 118
programa             : 0
programa1            : 1
programa2            : 3 5
quadMain             : 3 4
quad_param           : 61
quad_return          : 35
saveCTE              : 85 86 120 121 122 123
saveId               : 119
saveId2              : 49 50
save_fun             : 7 34 35
statement            : 7 34 35 40 69 70 74 80
statement1           : 40
sumexp               : 99 100 101 101 102 102 103 103 104 104 105 105 106 106
tipo                 : 23 59
var                  : 14
var1                 : 18 20 23 119
var2                 : 16 23
vars                 : 3 4 7 34 35
while                : 48
while_op             : 80
while_quad           : 80

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUNCTION        reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars quadMain modules main_end programa2
    (4) programa1 -> . vars quadMain modules
    (5) programa1 -> . programa2
    (14) vars -> . var
    (15) vars -> . empty
    (6) programa2 -> . main
    (16) var -> . VAR var2
    (126) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUNCTION        reduce using rule 126 (empty -> .)
    $end            reduce using rule 126 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 126 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . quadMain modules main_end programa2
    (4) programa1 -> vars . quadMain modules
    (8) quadMain -> .

    FUNCTION        reduce using rule 8 (quadMain -> .)
    MAIN            reduce using rule 8 (quadMain -> .)
    $end            reduce using rule 8 (quadMain -> .)

    quadMain                       shift and go to state 14

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (14) vars -> var .

    FUNCTION        reduce using rule 14 (vars -> var .)
    MAIN            reduce using rule 14 (vars -> var .)
    $end            reduce using rule 14 (vars -> var .)
    ID              reduce using rule 14 (vars -> var .)
    READ            reduce using rule 14 (vars -> var .)
    WRITE           reduce using rule 14 (vars -> var .)
    FOR             reduce using rule 14 (vars -> var .)
    IF              reduce using rule 14 (vars -> var .)
    WHILE           reduce using rule 14 (vars -> var .)
    RCURLY          reduce using rule 14 (vars -> var .)
    RETURN          reduce using rule 14 (vars -> var .)


state 10

    (15) vars -> empty .

    FUNCTION        reduce using rule 15 (vars -> empty .)
    MAIN            reduce using rule 15 (vars -> empty .)
    $end            reduce using rule 15 (vars -> empty .)
    ID              reduce using rule 15 (vars -> empty .)
    READ            reduce using rule 15 (vars -> empty .)
    WRITE           reduce using rule 15 (vars -> empty .)
    FOR             reduce using rule 15 (vars -> empty .)
    IF              reduce using rule 15 (vars -> empty .)
    WHILE           reduce using rule 15 (vars -> empty .)
    RCURLY          reduce using rule 15 (vars -> empty .)
    RETURN          reduce using rule 15 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (16) var -> VAR . var2
    (23) var2 -> . var2 tipo var1 SEMICOLON addV
    (24) var2 -> . empty
    (126) empty -> .

    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)
    FUNCTION        reduce using rule 126 (empty -> .)
    MAIN            reduce using rule 126 (empty -> .)
    $end            reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RCURLY          reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 17

state 14

    (3) programa1 -> vars quadMain . modules main_end programa2
    (4) programa1 -> vars quadMain . modules
    (27) modules -> . fun modules
    (28) modules -> . empty
    (30) fun -> . FUNCTION VOID fun1
    (31) fun -> . FUNCTION INT fun2
    (32) fun -> . FUNCTION CHAR fun2
    (33) fun -> . FUNCTION FLOAT fun2
    (126) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 126 (empty -> .)
    $end            reduce using rule 126 (empty -> .)

    modules                        shift and go to state 18
    fun                            shift and go to state 19
    empty                          shift and go to state 20

state 15

    (16) var -> VAR var2 .
    (23) var2 -> var2 . tipo var1 SEMICOLON addV
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    FUNCTION        reduce using rule 16 (var -> VAR var2 .)
    MAIN            reduce using rule 16 (var -> VAR var2 .)
    $end            reduce using rule 16 (var -> VAR var2 .)
    ID              reduce using rule 16 (var -> VAR var2 .)
    READ            reduce using rule 16 (var -> VAR var2 .)
    WRITE           reduce using rule 16 (var -> VAR var2 .)
    FOR             reduce using rule 16 (var -> VAR var2 .)
    IF              reduce using rule 16 (var -> VAR var2 .)
    WHILE           reduce using rule 16 (var -> VAR var2 .)
    RCURLY          reduce using rule 16 (var -> VAR var2 .)
    RETURN          reduce using rule 16 (var -> VAR var2 .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 22

state 16

    (24) var2 -> empty .

    INT             reduce using rule 24 (var2 -> empty .)
    FLOAT           reduce using rule 24 (var2 -> empty .)
    CHAR            reduce using rule 24 (var2 -> empty .)
    FUNCTION        reduce using rule 24 (var2 -> empty .)
    MAIN            reduce using rule 24 (var2 -> empty .)
    $end            reduce using rule 24 (var2 -> empty .)
    ID              reduce using rule 24 (var2 -> empty .)
    READ            reduce using rule 24 (var2 -> empty .)
    WRITE           reduce using rule 24 (var2 -> empty .)
    FOR             reduce using rule 24 (var2 -> empty .)
    IF              reduce using rule 24 (var2 -> empty .)
    WHILE           reduce using rule 24 (var2 -> empty .)
    RCURLY          reduce using rule 24 (var2 -> empty .)
    RETURN          reduce using rule 24 (var2 -> empty .)


state 17

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 26


state 18

    (3) programa1 -> vars quadMain modules . main_end programa2
    (4) programa1 -> vars quadMain modules .
    (9) main_end -> .

    $end            reduce using rule 4 (programa1 -> vars quadMain modules .)
    MAIN            reduce using rule 9 (main_end -> .)

    main_end                       shift and go to state 27

state 19

    (27) modules -> fun . modules
    (27) modules -> . fun modules
    (28) modules -> . empty
    (30) fun -> . FUNCTION VOID fun1
    (31) fun -> . FUNCTION INT fun2
    (32) fun -> . FUNCTION CHAR fun2
    (33) fun -> . FUNCTION FLOAT fun2
    (126) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 126 (empty -> .)
    $end            reduce using rule 126 (empty -> .)

    fun                            shift and go to state 19
    modules                        shift and go to state 28
    empty                          shift and go to state 20

state 20

    (28) modules -> empty .

    MAIN            reduce using rule 28 (modules -> empty .)
    $end            reduce using rule 28 (modules -> empty .)


state 21

    (30) fun -> FUNCTION . VOID fun1
    (31) fun -> FUNCTION . INT fun2
    (32) fun -> FUNCTION . CHAR fun2
    (33) fun -> FUNCTION . FLOAT fun2

    VOID            shift and go to state 29
    INT             shift and go to state 30
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 32


state 22

    (23) var2 -> var2 tipo . var1 SEMICOLON addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (126) empty -> .

    ID              shift and go to state 34
    SEMICOLON       reduce using rule 126 (empty -> .)

    var1                           shift and go to state 33
    empty                          shift and go to state 35

state 23

    (10) tipo -> INT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 36

state 24

    (11) tipo -> FLOAT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 37

state 25

    (12) tipo -> CHAR . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 38

state 26

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (59) param2 -> . param2 tipo param1
    (60) param2 -> . empty
    (126) empty -> .

    RPAREN          reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)

    param2                         shift and go to state 39
    empty                          shift and go to state 40

state 27

    (3) programa1 -> vars quadMain modules main_end . programa2
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    MAIN            shift and go to state 13

    programa2                      shift and go to state 41
    main                           shift and go to state 11

state 28

    (27) modules -> fun modules .

    MAIN            reduce using rule 27 (modules -> fun modules .)
    $end            reduce using rule 27 (modules -> fun modules .)


state 29

    (30) fun -> FUNCTION VOID . fun1
    (34) fun1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    ID              shift and go to state 43

    fun1                           shift and go to state 42

state 30

    (31) fun -> FUNCTION INT . fun2
    (35) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 45

    fun2                           shift and go to state 44

state 31

    (32) fun -> FUNCTION CHAR . fun2
    (35) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 45

    fun2                           shift and go to state 46

state 32

    (33) fun -> FUNCTION FLOAT . fun2
    (35) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 45

    fun2                           shift and go to state 47

state 33

    (23) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 48


state 34

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 49
    LBRACKET        shift and go to state 51

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]

    arr                            shift and go to state 50

state 35

    (21) var1 -> empty .

    SEMICOLON       reduce using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    RBRACKET        reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    TO              reduce using rule 21 (var1 -> empty .)
    CTEI            reduce using rule 21 (var1 -> empty .)
    CTEF            reduce using rule 21 (var1 -> empty .)
    CTEC            reduce using rule 21 (var1 -> empty .)
    CTESTRING       reduce using rule 21 (var1 -> empty .)
    LPAREN          reduce using rule 21 (var1 -> empty .)
    ID              reduce using rule 21 (var1 -> empty .)


state 36

    (10) tipo -> INT guardaTipoVar .

    ID              reduce using rule 10 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> INT guardaTipoVar .)


state 37

    (11) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)


state 38

    (12) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 12 (tipo -> CHAR guardaTipoVar .)


state 39

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (59) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 52
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 40

    (60) param2 -> empty .

    RPAREN          reduce using rule 60 (param2 -> empty .)
    INT             reduce using rule 60 (param2 -> empty .)
    FLOAT           reduce using rule 60 (param2 -> empty .)
    CHAR            reduce using rule 60 (param2 -> empty .)


state 41

    (3) programa1 -> vars quadMain modules main_end programa2 .

    $end            reduce using rule 3 (programa1 -> vars quadMain modules main_end programa2 .)


state 42

    (30) fun -> FUNCTION VOID fun1 .

    FUNCTION        reduce using rule 30 (fun -> FUNCTION VOID fun1 .)
    MAIN            reduce using rule 30 (fun -> FUNCTION VOID fun1 .)
    $end            reduce using rule 30 (fun -> FUNCTION VOID fun1 .)


state 43

    (34) fun1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 54

state 44

    (31) fun -> FUNCTION INT fun2 .

    FUNCTION        reduce using rule 31 (fun -> FUNCTION INT fun2 .)
    MAIN            reduce using rule 31 (fun -> FUNCTION INT fun2 .)
    $end            reduce using rule 31 (fun -> FUNCTION INT fun2 .)


state 45

    (35) fun2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (29) save_fun -> .

    LPAREN          reduce using rule 29 (save_fun -> .)

    save_fun                       shift and go to state 55

state 46

    (32) fun -> FUNCTION CHAR fun2 .

    FUNCTION        reduce using rule 32 (fun -> FUNCTION CHAR fun2 .)
    MAIN            reduce using rule 32 (fun -> FUNCTION CHAR fun2 .)
    $end            reduce using rule 32 (fun -> FUNCTION CHAR fun2 .)


state 47

    (33) fun -> FUNCTION FLOAT fun2 .

    FUNCTION        reduce using rule 33 (fun -> FUNCTION FLOAT fun2 .)
    MAIN            reduce using rule 33 (fun -> FUNCTION FLOAT fun2 .)
    $end            reduce using rule 33 (fun -> FUNCTION FLOAT fun2 .)


state 48

    (23) var2 -> var2 tipo var1 SEMICOLON . addV
    (22) addV -> .

    INT             reduce using rule 22 (addV -> .)
    FLOAT           reduce using rule 22 (addV -> .)
    CHAR            reduce using rule 22 (addV -> .)
    FUNCTION        reduce using rule 22 (addV -> .)
    MAIN            reduce using rule 22 (addV -> .)
    $end            reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)
    READ            reduce using rule 22 (addV -> .)
    WRITE           reduce using rule 22 (addV -> .)
    FOR             reduce using rule 22 (addV -> .)
    IF              reduce using rule 22 (addV -> .)
    WHILE           reduce using rule 22 (addV -> .)
    RCURLY          reduce using rule 22 (addV -> .)
    RETURN          reduce using rule 22 (addV -> .)

    addV                           shift and go to state 56

state 49

    (18) var1 -> ID COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (126) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 34
    SEMICOLON       reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    CTEI            reduce using rule 126 (empty -> .)
    CTEF            reduce using rule 126 (empty -> .)
    CTEC            reduce using rule 126 (empty -> .)
    CTESTRING       reduce using rule 126 (empty -> .)
    LPAREN          reduce using rule 126 (empty -> .)

  ! ID              [ reduce using rule 126 (empty -> .) ]

    var1                           shift and go to state 57
    empty                          shift and go to state 35

state 50

    (19) var1 -> ID arr .
    (20) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (var1 -> ID arr .)
    MUL             reduce using rule 19 (var1 -> ID arr .)
    DIV             reduce using rule 19 (var1 -> ID arr .)
    PLUS            reduce using rule 19 (var1 -> ID arr .)
    MINUS           reduce using rule 19 (var1 -> ID arr .)
    GT              reduce using rule 19 (var1 -> ID arr .)
    LT              reduce using rule 19 (var1 -> ID arr .)
    GTE             reduce using rule 19 (var1 -> ID arr .)
    LTE             reduce using rule 19 (var1 -> ID arr .)
    NE              reduce using rule 19 (var1 -> ID arr .)
    COMPARE         reduce using rule 19 (var1 -> ID arr .)
    AND             reduce using rule 19 (var1 -> ID arr .)
    OR              reduce using rule 19 (var1 -> ID arr .)
    RBRACKET        reduce using rule 19 (var1 -> ID arr .)
    RPAREN          reduce using rule 19 (var1 -> ID arr .)
    TO              reduce using rule 19 (var1 -> ID arr .)
    CTEI            reduce using rule 19 (var1 -> ID arr .)
    CTEF            reduce using rule 19 (var1 -> ID arr .)
    CTEC            reduce using rule 19 (var1 -> ID arr .)
    CTESTRING       reduce using rule 19 (var1 -> ID arr .)
    LPAREN          reduce using rule 19 (var1 -> ID arr .)
    ID              reduce using rule 19 (var1 -> ID arr .)
    COMMA           shift and go to state 58

  ! COMMA           [ reduce using rule 19 (var1 -> ID arr .) ]


state 51

    (25) arr -> LBRACKET . CTEI RBRACKET
    (26) arr -> LBRACKET . exp RBRACKET
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 59
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)

    exp                            shift and go to state 60
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 52

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 74


state 53

    (59) param2 -> param2 tipo . param1
    (53) param1 -> . ID addParam
    (54) param1 -> . ID COMMA param1 addParam
    (55) param1 -> . ID arr
    (56) param1 -> . ID COMMA param1
    (57) param1 -> . empty
    (126) empty -> .

    ID              shift and go to state 76
    RPAREN          reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)

    param1                         shift and go to state 75
    empty                          shift and go to state 77

state 54

    (34) fun1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    LPAREN          shift and go to state 78


state 55

    (35) fun2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LPAREN          shift and go to state 79


state 56

    (23) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUNCTION        reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WRITE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 57

    (18) var1 -> ID COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RBRACKET        reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 80

state 58

    (20) var1 -> ID arr COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (126) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 34
    SEMICOLON       reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    CTEI            reduce using rule 126 (empty -> .)
    CTEF            reduce using rule 126 (empty -> .)
    CTEC            reduce using rule 126 (empty -> .)
    CTESTRING       reduce using rule 126 (empty -> .)
    LPAREN          reduce using rule 126 (empty -> .)

  ! ID              [ reduce using rule 126 (empty -> .) ]

    var1                           shift and go to state 81
    empty                          shift and go to state 35

state 59

    (25) arr -> LBRACKET CTEI . RBRACKET
    (120) pexp -> CTEI . saveCTE
    (129) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 82
    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 129 (saveCTE -> .) ]

    saveCTE                        shift and go to state 83

state 60

    (26) arr -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 84


state 61

    (89) exp -> nexp .
    (90) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 89 (exp -> nexp .)
    RPAREN          reduce using rule 89 (exp -> nexp .)
    COMMA           reduce using rule 89 (exp -> nexp .)
    SEMICOLON       reduce using rule 89 (exp -> nexp .)
    TO              reduce using rule 89 (exp -> nexp .)
    OR              shift and go to state 85


state 62

    (97) nexp -> compexp .
    (98) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 97 (nexp -> compexp .)
    RBRACKET        reduce using rule 97 (nexp -> compexp .)
    RPAREN          reduce using rule 97 (nexp -> compexp .)
    COMMA           reduce using rule 97 (nexp -> compexp .)
    SEMICOLON       reduce using rule 97 (nexp -> compexp .)
    TO              reduce using rule 97 (nexp -> compexp .)
    AND             shift and go to state 86


state 63

    (99) compexp -> sumexp .
    (101) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (102) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (103) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (106) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 99 (compexp -> sumexp .)
    OR              reduce using rule 99 (compexp -> sumexp .)
    RBRACKET        reduce using rule 99 (compexp -> sumexp .)
    RPAREN          reduce using rule 99 (compexp -> sumexp .)
    COMMA           reduce using rule 99 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 99 (compexp -> sumexp .)
    TO              reduce using rule 99 (compexp -> sumexp .)
    GT              shift and go to state 87
    LT              shift and go to state 88
    GTE             shift and go to state 89
    LTE             shift and go to state 90
    NE              shift and go to state 91
    COMPARE         shift and go to state 92


state 64

    (100) compexp -> compexp1 . sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

    sumexp                         shift and go to state 93
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 65

    (107) sumexp -> mulexp .
    (108) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 107 (sumexp -> mulexp .)
    LT              reduce using rule 107 (sumexp -> mulexp .)
    GTE             reduce using rule 107 (sumexp -> mulexp .)
    LTE             reduce using rule 107 (sumexp -> mulexp .)
    NE              reduce using rule 107 (sumexp -> mulexp .)
    COMPARE         reduce using rule 107 (sumexp -> mulexp .)
    AND             reduce using rule 107 (sumexp -> mulexp .)
    OR              reduce using rule 107 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 107 (sumexp -> mulexp .)
    RPAREN          reduce using rule 107 (sumexp -> mulexp .)
    COMMA           reduce using rule 107 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 107 (sumexp -> mulexp .)
    TO              reduce using rule 107 (sumexp -> mulexp .)
    CTEI            reduce using rule 107 (sumexp -> mulexp .)
    CTEF            reduce using rule 107 (sumexp -> mulexp .)
    CTEC            reduce using rule 107 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 107 (sumexp -> mulexp .)
    LPAREN          reduce using rule 107 (sumexp -> mulexp .)
    ID              reduce using rule 107 (sumexp -> mulexp .)
    MUL             reduce using rule 107 (sumexp -> mulexp .)
    DIV             reduce using rule 107 (sumexp -> mulexp .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

  ! PLUS            [ reduce using rule 107 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 107 (sumexp -> mulexp .) ]


state 66

    (116) mulexp -> pexp .
    (117) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 116 (mulexp -> pexp .)
    MINUS           reduce using rule 116 (mulexp -> pexp .)
    GT              reduce using rule 116 (mulexp -> pexp .)
    LT              reduce using rule 116 (mulexp -> pexp .)
    GTE             reduce using rule 116 (mulexp -> pexp .)
    LTE             reduce using rule 116 (mulexp -> pexp .)
    NE              reduce using rule 116 (mulexp -> pexp .)
    COMPARE         reduce using rule 116 (mulexp -> pexp .)
    AND             reduce using rule 116 (mulexp -> pexp .)
    OR              reduce using rule 116 (mulexp -> pexp .)
    RBRACKET        reduce using rule 116 (mulexp -> pexp .)
    RPAREN          reduce using rule 116 (mulexp -> pexp .)
    COMMA           reduce using rule 116 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 116 (mulexp -> pexp .)
    TO              reduce using rule 116 (mulexp -> pexp .)
    CTEI            reduce using rule 116 (mulexp -> pexp .)
    CTEF            reduce using rule 116 (mulexp -> pexp .)
    CTEC            reduce using rule 116 (mulexp -> pexp .)
    CTESTRING       reduce using rule 116 (mulexp -> pexp .)
    LPAREN          reduce using rule 116 (mulexp -> pexp .)
    ID              reduce using rule 116 (mulexp -> pexp .)
    MUL             shift and go to state 97
    DIV             shift and go to state 98

  ! MUL             [ reduce using rule 116 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 116 (mulexp -> pexp .) ]


state 67

    (119) pexp -> var1 . saveId
    (127) saveId -> .

    MUL             reduce using rule 127 (saveId -> .)
    DIV             reduce using rule 127 (saveId -> .)
    PLUS            reduce using rule 127 (saveId -> .)
    MINUS           reduce using rule 127 (saveId -> .)
    GT              reduce using rule 127 (saveId -> .)
    LT              reduce using rule 127 (saveId -> .)
    GTE             reduce using rule 127 (saveId -> .)
    LTE             reduce using rule 127 (saveId -> .)
    NE              reduce using rule 127 (saveId -> .)
    COMPARE         reduce using rule 127 (saveId -> .)
    AND             reduce using rule 127 (saveId -> .)
    OR              reduce using rule 127 (saveId -> .)
    RBRACKET        reduce using rule 127 (saveId -> .)
    RPAREN          reduce using rule 127 (saveId -> .)
    COMMA           reduce using rule 127 (saveId -> .)
    SEMICOLON       reduce using rule 127 (saveId -> .)
    TO              reduce using rule 127 (saveId -> .)
    CTEI            reduce using rule 127 (saveId -> .)
    CTEF            reduce using rule 127 (saveId -> .)
    CTEC            reduce using rule 127 (saveId -> .)
    CTESTRING       reduce using rule 127 (saveId -> .)
    LPAREN          reduce using rule 127 (saveId -> .)
    ID              reduce using rule 127 (saveId -> .)

    saveId                         shift and go to state 99

state 68

    (121) pexp -> CTEF . saveCTE
    (129) saveCTE -> .

    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)
    RBRACKET        reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    COMMA           reduce using rule 129 (saveCTE -> .)
    SEMICOLON       reduce using rule 129 (saveCTE -> .)
    TO              reduce using rule 129 (saveCTE -> .)
    CTEI            reduce using rule 129 (saveCTE -> .)
    CTEF            reduce using rule 129 (saveCTE -> .)
    CTEC            reduce using rule 129 (saveCTE -> .)
    CTESTRING       reduce using rule 129 (saveCTE -> .)
    LPAREN          reduce using rule 129 (saveCTE -> .)
    ID              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 100

state 69

    (122) pexp -> CTEC . saveCTE
    (129) saveCTE -> .

    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)
    RBRACKET        reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    COMMA           reduce using rule 129 (saveCTE -> .)
    SEMICOLON       reduce using rule 129 (saveCTE -> .)
    TO              reduce using rule 129 (saveCTE -> .)
    CTEI            reduce using rule 129 (saveCTE -> .)
    CTEF            reduce using rule 129 (saveCTE -> .)
    CTEC            reduce using rule 129 (saveCTE -> .)
    CTESTRING       reduce using rule 129 (saveCTE -> .)
    LPAREN          reduce using rule 129 (saveCTE -> .)
    ID              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 101

state 70

    (123) pexp -> CTESTRING . saveCTE
    (129) saveCTE -> .

    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)
    RBRACKET        reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    COMMA           reduce using rule 129 (saveCTE -> .)
    SEMICOLON       reduce using rule 129 (saveCTE -> .)
    TO              reduce using rule 129 (saveCTE -> .)
    CTEI            reduce using rule 129 (saveCTE -> .)
    CTEF            reduce using rule 129 (saveCTE -> .)
    CTEC            reduce using rule 129 (saveCTE -> .)
    CTESTRING       reduce using rule 129 (saveCTE -> .)
    LPAREN          reduce using rule 129 (saveCTE -> .)
    ID              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 102

state 71

    (124) pexp -> llamada .

    MUL             reduce using rule 124 (pexp -> llamada .)
    DIV             reduce using rule 124 (pexp -> llamada .)
    PLUS            reduce using rule 124 (pexp -> llamada .)
    MINUS           reduce using rule 124 (pexp -> llamada .)
    GT              reduce using rule 124 (pexp -> llamada .)
    LT              reduce using rule 124 (pexp -> llamada .)
    GTE             reduce using rule 124 (pexp -> llamada .)
    LTE             reduce using rule 124 (pexp -> llamada .)
    NE              reduce using rule 124 (pexp -> llamada .)
    COMPARE         reduce using rule 124 (pexp -> llamada .)
    AND             reduce using rule 124 (pexp -> llamada .)
    OR              reduce using rule 124 (pexp -> llamada .)
    RBRACKET        reduce using rule 124 (pexp -> llamada .)
    RPAREN          reduce using rule 124 (pexp -> llamada .)
    COMMA           reduce using rule 124 (pexp -> llamada .)
    SEMICOLON       reduce using rule 124 (pexp -> llamada .)
    TO              reduce using rule 124 (pexp -> llamada .)
    CTEI            reduce using rule 124 (pexp -> llamada .)
    CTEF            reduce using rule 124 (pexp -> llamada .)
    CTEC            reduce using rule 124 (pexp -> llamada .)
    CTESTRING       reduce using rule 124 (pexp -> llamada .)
    LPAREN          reduce using rule 124 (pexp -> llamada .)
    ID              reduce using rule 124 (pexp -> llamada .)


state 72

    (125) pexp -> LPAREN . exp RPAREN
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    exp                            shift and go to state 103
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 73

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (61) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET
    (67) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 49
    LBRACKET        shift and go to state 51

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 67 (era_call -> .) ]

    arr                            shift and go to state 50
    era_call                       shift and go to state 104

state 74

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (126) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RCURLY          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 105
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 75

    (59) param2 -> param2 tipo param1 .

    RPAREN          reduce using rule 59 (param2 -> param2 tipo param1 .)
    INT             reduce using rule 59 (param2 -> param2 tipo param1 .)
    FLOAT           reduce using rule 59 (param2 -> param2 tipo param1 .)
    CHAR            reduce using rule 59 (param2 -> param2 tipo param1 .)


state 76

    (53) param1 -> ID . addParam
    (54) param1 -> ID . COMMA param1 addParam
    (55) param1 -> ID . arr
    (56) param1 -> ID . COMMA param1
    (58) addParam -> .
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

    COMMA           shift and go to state 107
    RPAREN          reduce using rule 58 (addParam -> .)
    INT             reduce using rule 58 (addParam -> .)
    FLOAT           reduce using rule 58 (addParam -> .)
    CHAR            reduce using rule 58 (addParam -> .)
    LBRACKET        shift and go to state 51

    addParam                       shift and go to state 106
    arr                            shift and go to state 108

state 77

    (57) param1 -> empty .

    RPAREN          reduce using rule 57 (param1 -> empty .)
    INT             reduce using rule 57 (param1 -> empty .)
    FLOAT           reduce using rule 57 (param1 -> empty .)
    CHAR            reduce using rule 57 (param1 -> empty .)


state 78

    (34) fun1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (59) param2 -> . param2 tipo param1
    (60) param2 -> . empty
    (126) empty -> .

    RPAREN          reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)

    param2                         shift and go to state 109
    empty                          shift and go to state 40

state 79

    (35) fun2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (59) param2 -> . param2 tipo param1
    (60) param2 -> . empty
    (126) empty -> .

    RPAREN          reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)

    param2                         shift and go to state 110
    empty                          shift and go to state 40

state 80

    (18) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID COMMA var1 addV .)


state 81

    (20) var1 -> ID arr COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RBRACKET        reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 111

state 82

    (25) arr -> LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 25 (arr -> LBRACKET CTEI RBRACKET .)


state 83

    (120) pexp -> CTEI saveCTE .

    MUL             reduce using rule 120 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 120 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 120 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 120 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 120 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 120 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 120 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 120 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 120 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 120 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 120 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 120 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 120 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 120 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 120 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 120 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 120 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 120 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 120 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 120 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 120 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 120 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 120 (pexp -> CTEI saveCTE .)


state 84

    (26) arr -> LBRACKET exp RBRACKET .

    COMMA           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 26 (arr -> LBRACKET exp RBRACKET .)


state 85

    (90) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 112

state 86

    (98) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 113

state 87

    (101) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 114

state 88

    (102) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 115

state 89

    (103) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 116

state 90

    (104) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 117

state 91

    (105) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 118

state 92

    (106) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 119

state 93

    (100) compexp -> compexp1 sumexp .

    AND             reduce using rule 100 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 100 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 100 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 100 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 100 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 100 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 100 (compexp -> compexp1 sumexp .)


state 94

    (120) pexp -> CTEI . saveCTE
    (129) saveCTE -> .

    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)
    RBRACKET        reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    COMMA           reduce using rule 129 (saveCTE -> .)
    SEMICOLON       reduce using rule 129 (saveCTE -> .)
    TO              reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    CTEI            reduce using rule 129 (saveCTE -> .)
    CTEF            reduce using rule 129 (saveCTE -> .)
    CTEC            reduce using rule 129 (saveCTE -> .)
    CTESTRING       reduce using rule 129 (saveCTE -> .)
    LPAREN          reduce using rule 129 (saveCTE -> .)
    ID              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 83

state 95

    (108) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 120

state 96

    (109) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 121

state 97

    (117) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 122

state 98

    (118) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    RBRACKET        reduce using rule 52 (addOperadorName -> .)
    RPAREN          reduce using rule 52 (addOperadorName -> .)
    COMMA           reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 123

state 99

    (119) pexp -> var1 saveId .

    MUL             reduce using rule 119 (pexp -> var1 saveId .)
    DIV             reduce using rule 119 (pexp -> var1 saveId .)
    PLUS            reduce using rule 119 (pexp -> var1 saveId .)
    MINUS           reduce using rule 119 (pexp -> var1 saveId .)
    GT              reduce using rule 119 (pexp -> var1 saveId .)
    LT              reduce using rule 119 (pexp -> var1 saveId .)
    GTE             reduce using rule 119 (pexp -> var1 saveId .)
    LTE             reduce using rule 119 (pexp -> var1 saveId .)
    NE              reduce using rule 119 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 119 (pexp -> var1 saveId .)
    AND             reduce using rule 119 (pexp -> var1 saveId .)
    OR              reduce using rule 119 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 119 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 119 (pexp -> var1 saveId .)
    COMMA           reduce using rule 119 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 119 (pexp -> var1 saveId .)
    TO              reduce using rule 119 (pexp -> var1 saveId .)
    CTEI            reduce using rule 119 (pexp -> var1 saveId .)
    CTEF            reduce using rule 119 (pexp -> var1 saveId .)
    CTEC            reduce using rule 119 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 119 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 119 (pexp -> var1 saveId .)
    ID              reduce using rule 119 (pexp -> var1 saveId .)


state 100

    (121) pexp -> CTEF saveCTE .

    MUL             reduce using rule 121 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 121 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 121 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 121 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 121 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 121 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 121 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 121 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 121 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 121 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 121 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 121 (pexp -> CTEF saveCTE .)


state 101

    (122) pexp -> CTEC saveCTE .

    MUL             reduce using rule 122 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 122 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 122 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 122 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 122 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 122 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 122 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 122 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 122 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 122 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 122 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 122 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 122 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 122 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 122 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 122 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 122 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 122 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 122 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 122 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 122 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 122 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 122 (pexp -> CTEC saveCTE .)


state 102

    (123) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 123 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 123 (pexp -> CTESTRING saveCTE .)


state 103

    (125) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 124


state 104

    (61) llamada -> ID era_call . LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    LPAREN          shift and go to state 125


state 105

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 126
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 106

    (53) param1 -> ID addParam .

    RPAREN          reduce using rule 53 (param1 -> ID addParam .)
    INT             reduce using rule 53 (param1 -> ID addParam .)
    FLOAT           reduce using rule 53 (param1 -> ID addParam .)
    CHAR            reduce using rule 53 (param1 -> ID addParam .)


state 107

    (54) param1 -> ID COMMA . param1 addParam
    (56) param1 -> ID COMMA . param1
    (53) param1 -> . ID addParam
    (54) param1 -> . ID COMMA param1 addParam
    (55) param1 -> . ID arr
    (56) param1 -> . ID COMMA param1
    (57) param1 -> . empty
    (126) empty -> .

    ID              shift and go to state 76
    RPAREN          reduce using rule 126 (empty -> .)
    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    CHAR            reduce using rule 126 (empty -> .)

    param1                         shift and go to state 142
    empty                          shift and go to state 77

state 108

    (55) param1 -> ID arr .

    RPAREN          reduce using rule 55 (param1 -> ID arr .)
    INT             reduce using rule 55 (param1 -> ID arr .)
    FLOAT           reduce using rule 55 (param1 -> ID arr .)
    CHAR            reduce using rule 55 (param1 -> ID arr .)


state 109

    (34) fun1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (59) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 143
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 110

    (35) fun2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (59) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 144
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 111

    (20) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)


state 112

    (90) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

    nexp                           shift and go to state 145
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 113

    (98) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

    compexp                        shift and go to state 146
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 114

    (101) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 147
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 115

    (102) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 148
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 116

    (103) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 149
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 117

    (104) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 150
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 118

    (105) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 151
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 119

    (106) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    sumexp                         shift and go to state 152
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 120

    (108) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    mulexp                         shift and go to state 153
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 121

    (109) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    mulexp                         shift and go to state 154
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 122

    (117) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    pexp                           shift and go to state 155
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 123

    (118) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)

  ! CTEI            [ reduce using rule 126 (empty -> .) ]
  ! CTEF            [ reduce using rule 126 (empty -> .) ]
  ! CTEC            [ reduce using rule 126 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 126 (empty -> .) ]
  ! LPAREN          [ reduce using rule 126 (empty -> .) ]
  ! ID              [ reduce using rule 126 (empty -> .) ]

    pexp                           shift and go to state 156
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 124

    (125) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 125 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 125 (pexp -> LPAREN exp RPAREN .)


state 125

    (61) llamada -> ID era_call LPAREN . aux_exp quad_param RPAREN gosub_quad llena_endproc
    (62) aux_exp -> . exp
    (63) aux_exp -> . exp COMMA aux_exp
    (64) aux_exp -> . empty
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (126) empty -> .
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73

    aux_exp                        shift and go to state 157
    exp                            shift and go to state 158
    empty                          shift and go to state 159
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71

state 126

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 160


state 127

    (40) statement -> statement1 . statement
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

  ! ID              [ reduce using rule 126 (empty -> .) ]
  ! READ            [ reduce using rule 126 (empty -> .) ]
  ! WRITE           [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]
  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]

    statement1                     shift and go to state 127
    statement                      shift and go to state 161
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 128

    (41) statement -> empty .

    RCURLY          reduce using rule 41 (statement -> empty .)
    RETURN          reduce using rule 41 (statement -> empty .)
    ID              reduce using rule 41 (statement -> empty .)
    READ            reduce using rule 41 (statement -> empty .)
    WRITE           reduce using rule 41 (statement -> empty .)
    FOR             reduce using rule 41 (statement -> empty .)
    IF              reduce using rule 41 (statement -> empty .)
    WHILE           reduce using rule 41 (statement -> empty .)


state 129

    (42) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 162


state 130

    (43) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 163


state 131

    (44) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 164


state 132

    (45) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 165


state 133

    (46) statement1 -> for .

    ID              reduce using rule 46 (statement1 -> for .)
    READ            reduce using rule 46 (statement1 -> for .)
    WRITE           reduce using rule 46 (statement1 -> for .)
    FOR             reduce using rule 46 (statement1 -> for .)
    IF              reduce using rule 46 (statement1 -> for .)
    WHILE           reduce using rule 46 (statement1 -> for .)
    RCURLY          reduce using rule 46 (statement1 -> for .)
    RETURN          reduce using rule 46 (statement1 -> for .)


state 134

    (47) statement1 -> if .

    ID              reduce using rule 47 (statement1 -> if .)
    READ            reduce using rule 47 (statement1 -> if .)
    WRITE           reduce using rule 47 (statement1 -> if .)
    FOR             reduce using rule 47 (statement1 -> if .)
    IF              reduce using rule 47 (statement1 -> if .)
    WHILE           reduce using rule 47 (statement1 -> if .)
    RCURLY          reduce using rule 47 (statement1 -> if .)
    RETURN          reduce using rule 47 (statement1 -> if .)


state 135

    (48) statement1 -> while .

    ID              reduce using rule 48 (statement1 -> while .)
    READ            reduce using rule 48 (statement1 -> while .)
    WRITE           reduce using rule 48 (statement1 -> while .)
    FOR             reduce using rule 48 (statement1 -> while .)
    IF              reduce using rule 48 (statement1 -> while .)
    WHILE           reduce using rule 48 (statement1 -> while .)
    RCURLY          reduce using rule 48 (statement1 -> while .)
    RETURN          reduce using rule 48 (statement1 -> while .)


state 136

    (49) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (128) saveId2 -> .
    (67) era_call -> .

    EQUALS          reduce using rule 128 (saveId2 -> .)
    LBRACKET        reduce using rule 128 (saveId2 -> .)
    LPAREN          reduce using rule 67 (era_call -> .)

    saveId2                        shift and go to state 166
    era_call                       shift and go to state 104

state 137

    (88) lectura -> READ . operatorRead LPAREN exp operatorReadQuad RPAREN
    (114) operatorRead -> .

    LPAREN          reduce using rule 114 (operatorRead -> .)

    operatorRead                   shift and go to state 167

state 138

    (81) escritura -> WRITE . LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN

    LPAREN          shift and go to state 168


state 139

    (74) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (72) for_op -> .

    LPAREN          reduce using rule 72 (for_op -> .)

    for_op                         shift and go to state 169

state 140

    (69) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 170


state 141

    (80) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (79) while_op -> .

    LPAREN          reduce using rule 79 (while_op -> .)

    while_op                       shift and go to state 171

state 142

    (54) param1 -> ID COMMA param1 . addParam
    (56) param1 -> ID COMMA param1 .
    (58) addParam -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 56 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for INT resolved using rule 56 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for FLOAT resolved using rule 56 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for CHAR resolved using rule 56 (param1 -> ID COMMA param1 .)
    RPAREN          reduce using rule 56 (param1 -> ID COMMA param1 .)
    INT             reduce using rule 56 (param1 -> ID COMMA param1 .)
    FLOAT           reduce using rule 56 (param1 -> ID COMMA param1 .)
    CHAR            reduce using rule 56 (param1 -> ID COMMA param1 .)

  ! RPAREN          [ reduce using rule 58 (addParam -> .) ]
  ! INT             [ reduce using rule 58 (addParam -> .) ]
  ! FLOAT           [ reduce using rule 58 (addParam -> .) ]
  ! CHAR            [ reduce using rule 58 (addParam -> .) ]

    addParam                       shift and go to state 172

state 143

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    SEMICOLON       shift and go to state 173


state 144

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 174


state 145

    (90) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (91) genera_quad_or -> .

    RBRACKET        reduce using rule 91 (genera_quad_or -> .)
    RPAREN          reduce using rule 91 (genera_quad_or -> .)
    COMMA           reduce using rule 91 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 91 (genera_quad_or -> .)
    TO              reduce using rule 91 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 175

state 146

    (98) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (92) genera_quad_and -> .

    OR              reduce using rule 92 (genera_quad_and -> .)
    RBRACKET        reduce using rule 92 (genera_quad_and -> .)
    RPAREN          reduce using rule 92 (genera_quad_and -> .)
    COMMA           reduce using rule 92 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 92 (genera_quad_and -> .)
    TO              reduce using rule 92 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 176

state 147

    (101) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 177

state 148

    (102) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 178

state 149

    (103) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 179

state 150

    (104) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 180

state 151

    (105) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 181

state 152

    (106) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (93) compare_quad -> .

    CTEI            reduce using rule 93 (compare_quad -> .)
    CTEF            reduce using rule 93 (compare_quad -> .)
    CTEC            reduce using rule 93 (compare_quad -> .)
    CTESTRING       reduce using rule 93 (compare_quad -> .)
    LPAREN          reduce using rule 93 (compare_quad -> .)
    ID              reduce using rule 93 (compare_quad -> .)
    PLUS            reduce using rule 93 (compare_quad -> .)
    MINUS           reduce using rule 93 (compare_quad -> .)
    MUL             reduce using rule 93 (compare_quad -> .)
    DIV             reduce using rule 93 (compare_quad -> .)
    AND             reduce using rule 93 (compare_quad -> .)
    OR              reduce using rule 93 (compare_quad -> .)
    RBRACKET        reduce using rule 93 (compare_quad -> .)
    RPAREN          reduce using rule 93 (compare_quad -> .)
    COMMA           reduce using rule 93 (compare_quad -> .)
    SEMICOLON       reduce using rule 93 (compare_quad -> .)
    TO              reduce using rule 93 (compare_quad -> .)

    compare_quad                   shift and go to state 182

state 153

    (108) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (110) genera_sum_quad -> .

    GT              reduce using rule 110 (genera_sum_quad -> .)
    LT              reduce using rule 110 (genera_sum_quad -> .)
    GTE             reduce using rule 110 (genera_sum_quad -> .)
    LTE             reduce using rule 110 (genera_sum_quad -> .)
    NE              reduce using rule 110 (genera_sum_quad -> .)
    COMPARE         reduce using rule 110 (genera_sum_quad -> .)
    AND             reduce using rule 110 (genera_sum_quad -> .)
    OR              reduce using rule 110 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 110 (genera_sum_quad -> .)
    RPAREN          reduce using rule 110 (genera_sum_quad -> .)
    COMMA           reduce using rule 110 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 110 (genera_sum_quad -> .)
    TO              reduce using rule 110 (genera_sum_quad -> .)
    CTEI            reduce using rule 110 (genera_sum_quad -> .)
    CTEF            reduce using rule 110 (genera_sum_quad -> .)
    CTEC            reduce using rule 110 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 110 (genera_sum_quad -> .)
    LPAREN          reduce using rule 110 (genera_sum_quad -> .)
    ID              reduce using rule 110 (genera_sum_quad -> .)
    PLUS            reduce using rule 110 (genera_sum_quad -> .)
    MINUS           reduce using rule 110 (genera_sum_quad -> .)
    MUL             reduce using rule 110 (genera_sum_quad -> .)
    DIV             reduce using rule 110 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 183

state 154

    (109) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (110) genera_sum_quad -> .

    GT              reduce using rule 110 (genera_sum_quad -> .)
    LT              reduce using rule 110 (genera_sum_quad -> .)
    GTE             reduce using rule 110 (genera_sum_quad -> .)
    LTE             reduce using rule 110 (genera_sum_quad -> .)
    NE              reduce using rule 110 (genera_sum_quad -> .)
    COMPARE         reduce using rule 110 (genera_sum_quad -> .)
    AND             reduce using rule 110 (genera_sum_quad -> .)
    OR              reduce using rule 110 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 110 (genera_sum_quad -> .)
    RPAREN          reduce using rule 110 (genera_sum_quad -> .)
    COMMA           reduce using rule 110 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 110 (genera_sum_quad -> .)
    TO              reduce using rule 110 (genera_sum_quad -> .)
    CTEI            reduce using rule 110 (genera_sum_quad -> .)
    CTEF            reduce using rule 110 (genera_sum_quad -> .)
    CTEC            reduce using rule 110 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 110 (genera_sum_quad -> .)
    LPAREN          reduce using rule 110 (genera_sum_quad -> .)
    ID              reduce using rule 110 (genera_sum_quad -> .)
    PLUS            reduce using rule 110 (genera_sum_quad -> .)
    MINUS           reduce using rule 110 (genera_sum_quad -> .)
    MUL             reduce using rule 110 (genera_sum_quad -> .)
    DIV             reduce using rule 110 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 184

state 155

    (117) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (111) genera_mul_quad -> .

    PLUS            reduce using rule 111 (genera_mul_quad -> .)
    MINUS           reduce using rule 111 (genera_mul_quad -> .)
    GT              reduce using rule 111 (genera_mul_quad -> .)
    LT              reduce using rule 111 (genera_mul_quad -> .)
    GTE             reduce using rule 111 (genera_mul_quad -> .)
    LTE             reduce using rule 111 (genera_mul_quad -> .)
    NE              reduce using rule 111 (genera_mul_quad -> .)
    COMPARE         reduce using rule 111 (genera_mul_quad -> .)
    AND             reduce using rule 111 (genera_mul_quad -> .)
    OR              reduce using rule 111 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 111 (genera_mul_quad -> .)
    RPAREN          reduce using rule 111 (genera_mul_quad -> .)
    COMMA           reduce using rule 111 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 111 (genera_mul_quad -> .)
    TO              reduce using rule 111 (genera_mul_quad -> .)
    CTEI            reduce using rule 111 (genera_mul_quad -> .)
    CTEF            reduce using rule 111 (genera_mul_quad -> .)
    CTEC            reduce using rule 111 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 111 (genera_mul_quad -> .)
    LPAREN          reduce using rule 111 (genera_mul_quad -> .)
    ID              reduce using rule 111 (genera_mul_quad -> .)
    MUL             reduce using rule 111 (genera_mul_quad -> .)
    DIV             reduce using rule 111 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 185

state 156

    (118) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (111) genera_mul_quad -> .

    PLUS            reduce using rule 111 (genera_mul_quad -> .)
    MINUS           reduce using rule 111 (genera_mul_quad -> .)
    GT              reduce using rule 111 (genera_mul_quad -> .)
    LT              reduce using rule 111 (genera_mul_quad -> .)
    GTE             reduce using rule 111 (genera_mul_quad -> .)
    LTE             reduce using rule 111 (genera_mul_quad -> .)
    NE              reduce using rule 111 (genera_mul_quad -> .)
    COMPARE         reduce using rule 111 (genera_mul_quad -> .)
    AND             reduce using rule 111 (genera_mul_quad -> .)
    OR              reduce using rule 111 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 111 (genera_mul_quad -> .)
    RPAREN          reduce using rule 111 (genera_mul_quad -> .)
    COMMA           reduce using rule 111 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 111 (genera_mul_quad -> .)
    TO              reduce using rule 111 (genera_mul_quad -> .)
    CTEI            reduce using rule 111 (genera_mul_quad -> .)
    CTEF            reduce using rule 111 (genera_mul_quad -> .)
    CTEC            reduce using rule 111 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 111 (genera_mul_quad -> .)
    LPAREN          reduce using rule 111 (genera_mul_quad -> .)
    ID              reduce using rule 111 (genera_mul_quad -> .)
    MUL             reduce using rule 111 (genera_mul_quad -> .)
    DIV             reduce using rule 111 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 186

state 157

    (61) llamada -> ID era_call LPAREN aux_exp . quad_param RPAREN gosub_quad llena_endproc
    (65) quad_param -> .

    RPAREN          reduce using rule 65 (quad_param -> .)

    quad_param                     shift and go to state 187

state 158

    (62) aux_exp -> exp .
    (63) aux_exp -> exp . COMMA aux_exp

    RPAREN          reduce using rule 62 (aux_exp -> exp .)
    COMMA           shift and go to state 188


state 159

    (64) aux_exp -> empty .
    (21) var1 -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 64 (aux_exp -> empty .) ]


state 160

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 189


state 161

    (40) statement -> statement1 statement .

    RCURLY          reduce using rule 40 (statement -> statement1 statement .)
    RETURN          reduce using rule 40 (statement -> statement1 statement .)
    ID              reduce using rule 40 (statement -> statement1 statement .)
    READ            reduce using rule 40 (statement -> statement1 statement .)
    WRITE           reduce using rule 40 (statement -> statement1 statement .)
    FOR             reduce using rule 40 (statement -> statement1 statement .)
    IF              reduce using rule 40 (statement -> statement1 statement .)
    WHILE           reduce using rule 40 (statement -> statement1 statement .)


state 162

    (42) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    WRITE           reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 42 (statement1 -> asignacion SEMICOLON .)


state 163

    (43) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    WRITE           reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 43 (statement1 -> llamada SEMICOLON .)


state 164

    (44) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    WRITE           reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 44 (statement1 -> lectura SEMICOLON .)


state 165

    (45) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    WRITE           reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 45 (statement1 -> escritura SEMICOLON .)


state 166

    (49) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (25) arr -> . LBRACKET CTEI RBRACKET
    (26) arr -> . LBRACKET exp RBRACKET

    EQUALS          shift and go to state 190
    LBRACKET        shift and go to state 51

    arr                            shift and go to state 191

state 167

    (88) lectura -> READ operatorRead . LPAREN exp operatorReadQuad RPAREN

    LPAREN          shift and go to state 192


state 168

    (81) escritura -> WRITE LPAREN . operadorWrite escritura1 operadorWriteQuad RPAREN
    (112) operadorWrite -> .

    COMILLA         reduce using rule 112 (operadorWrite -> .)
    CTEI            reduce using rule 112 (operadorWrite -> .)
    CTEF            reduce using rule 112 (operadorWrite -> .)
    CTEC            reduce using rule 112 (operadorWrite -> .)
    CTESTRING       reduce using rule 112 (operadorWrite -> .)
    LPAREN          reduce using rule 112 (operadorWrite -> .)
    ID              reduce using rule 112 (operadorWrite -> .)
    RPAREN          reduce using rule 112 (operadorWrite -> .)
    COMMA           reduce using rule 112 (operadorWrite -> .)
    OR              reduce using rule 112 (operadorWrite -> .)
    AND             reduce using rule 112 (operadorWrite -> .)
    GT              reduce using rule 112 (operadorWrite -> .)
    LT              reduce using rule 112 (operadorWrite -> .)
    GTE             reduce using rule 112 (operadorWrite -> .)
    LTE             reduce using rule 112 (operadorWrite -> .)
    NE              reduce using rule 112 (operadorWrite -> .)
    COMPARE         reduce using rule 112 (operadorWrite -> .)
    PLUS            reduce using rule 112 (operadorWrite -> .)
    MINUS           reduce using rule 112 (operadorWrite -> .)
    MUL             reduce using rule 112 (operadorWrite -> .)
    DIV             reduce using rule 112 (operadorWrite -> .)

    operadorWrite                  shift and go to state 193

state 169

    (74) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end

    LPAREN          shift and go to state 194


state 170

    (69) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    exp                            shift and go to state 195
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 171

    (80) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement loop_end

    LPAREN          shift and go to state 196


state 172

    (54) param1 -> ID COMMA param1 addParam .

    RPAREN          reduce using rule 54 (param1 -> ID COMMA param1 addParam .)
    INT             reduce using rule 54 (param1 -> ID COMMA param1 addParam .)
    FLOAT           reduce using rule 54 (param1 -> ID COMMA param1 addParam .)
    CHAR            reduce using rule 54 (param1 -> ID COMMA param1 addParam .)


state 173

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RCURLY end_func

    LCURLY          shift and go to state 197


state 174

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LCURLY          shift and go to state 198


state 175

    (90) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 90 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 90 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 90 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 90 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 90 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 176

    (98) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 98 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 177

    (101) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 101 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 178

    (102) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 102 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 179

    (103) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 103 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 180

    (104) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 104 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 181

    (105) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 105 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 182

    (106) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 106 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 183

    (108) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 108 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 184

    (109) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 109 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 185

    (117) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 117 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 186

    (118) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 118 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 187

    (61) llamada -> ID era_call LPAREN aux_exp quad_param . RPAREN gosub_quad llena_endproc

    RPAREN          shift and go to state 199


state 188

    (63) aux_exp -> exp COMMA . aux_exp
    (62) aux_exp -> . exp
    (63) aux_exp -> . exp COMMA aux_exp
    (64) aux_exp -> . empty
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (126) empty -> .
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 126 (empty -> .)
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73

    exp                            shift and go to state 158
    aux_exp                        shift and go to state 200
    empty                          shift and go to state 159
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71

state 189

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 190

    (49) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 201

state 191

    (50) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 202


state 192

    (88) lectura -> READ operatorRead LPAREN . exp operatorReadQuad RPAREN
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    exp                            shift and go to state 203
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 193

    (81) escritura -> WRITE LPAREN operadorWrite . escritura1 operadorWriteQuad RPAREN
    (82) escritura1 -> . escritura2 COMMA escritura2
    (83) escritura1 -> . escritura2
    (84) escritura2 -> . COMILLA CTESTRING COMILLA
    (85) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (86) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (87) escritura2 -> . exp
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    COMILLA         shift and go to state 206
    CTEI            shift and go to state 207
    CTEF            shift and go to state 208
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    escritura1                     shift and go to state 204
    escritura2                     shift and go to state 205
    exp                            shift and go to state 209
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 194

    (74) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (75) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 211

    for1                           shift and go to state 210

state 195

    (69) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 212


state 196

    (80) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement loop_end
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    exp                            shift and go to state 213
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 197

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (126) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RCURLY          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 214
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 198

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (126) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    vars                           shift and go to state 215
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 199

    (61) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN . gosub_quad llena_endproc
    (68) gosub_quad -> .

    MUL             reduce using rule 68 (gosub_quad -> .)
    DIV             reduce using rule 68 (gosub_quad -> .)
    PLUS            reduce using rule 68 (gosub_quad -> .)
    MINUS           reduce using rule 68 (gosub_quad -> .)
    GT              reduce using rule 68 (gosub_quad -> .)
    LT              reduce using rule 68 (gosub_quad -> .)
    GTE             reduce using rule 68 (gosub_quad -> .)
    LTE             reduce using rule 68 (gosub_quad -> .)
    NE              reduce using rule 68 (gosub_quad -> .)
    COMPARE         reduce using rule 68 (gosub_quad -> .)
    AND             reduce using rule 68 (gosub_quad -> .)
    OR              reduce using rule 68 (gosub_quad -> .)
    RBRACKET        reduce using rule 68 (gosub_quad -> .)
    RPAREN          reduce using rule 68 (gosub_quad -> .)
    COMMA           reduce using rule 68 (gosub_quad -> .)
    SEMICOLON       reduce using rule 68 (gosub_quad -> .)
    TO              reduce using rule 68 (gosub_quad -> .)
    CTEI            reduce using rule 68 (gosub_quad -> .)
    CTEF            reduce using rule 68 (gosub_quad -> .)
    CTEC            reduce using rule 68 (gosub_quad -> .)
    CTESTRING       reduce using rule 68 (gosub_quad -> .)
    LPAREN          reduce using rule 68 (gosub_quad -> .)
    ID              reduce using rule 68 (gosub_quad -> .)

    gosub_quad                     shift and go to state 216

state 200

    (63) aux_exp -> exp COMMA aux_exp .

    RPAREN          reduce using rule 63 (aux_exp -> exp COMMA aux_exp .)


state 201

    (49) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

    exp                            shift and go to state 217
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 202

    (50) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (52) addOperadorName -> .

    CTEI            reduce using rule 52 (addOperadorName -> .)
    CTEF            reduce using rule 52 (addOperadorName -> .)
    CTEC            reduce using rule 52 (addOperadorName -> .)
    CTESTRING       reduce using rule 52 (addOperadorName -> .)
    LPAREN          reduce using rule 52 (addOperadorName -> .)
    ID              reduce using rule 52 (addOperadorName -> .)
    OR              reduce using rule 52 (addOperadorName -> .)
    AND             reduce using rule 52 (addOperadorName -> .)
    GT              reduce using rule 52 (addOperadorName -> .)
    LT              reduce using rule 52 (addOperadorName -> .)
    GTE             reduce using rule 52 (addOperadorName -> .)
    LTE             reduce using rule 52 (addOperadorName -> .)
    NE              reduce using rule 52 (addOperadorName -> .)
    COMPARE         reduce using rule 52 (addOperadorName -> .)
    PLUS            reduce using rule 52 (addOperadorName -> .)
    MINUS           reduce using rule 52 (addOperadorName -> .)
    MUL             reduce using rule 52 (addOperadorName -> .)
    DIV             reduce using rule 52 (addOperadorName -> .)
    SEMICOLON       reduce using rule 52 (addOperadorName -> .)
    TO              reduce using rule 52 (addOperadorName -> .)

    addOperadorName                shift and go to state 218

state 203

    (88) lectura -> READ operatorRead LPAREN exp . operatorReadQuad RPAREN
    (115) operatorReadQuad -> .

    RPAREN          reduce using rule 115 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 219

state 204

    (81) escritura -> WRITE LPAREN operadorWrite escritura1 . operadorWriteQuad RPAREN
    (113) operadorWriteQuad -> .

    RPAREN          reduce using rule 113 (operadorWriteQuad -> .)

    operadorWriteQuad              shift and go to state 220

state 205

    (82) escritura1 -> escritura2 . COMMA escritura2
    (83) escritura1 -> escritura2 .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 83 (escritura1 -> escritura2 .)


state 206

    (84) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 222


state 207

    (85) escritura2 -> CTEI . saveCTE operadorWriteQuad
    (120) pexp -> CTEI . saveCTE
    (129) saveCTE -> .

    COMMA           reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 223

state 208

    (86) escritura2 -> CTEF . saveCTE operadorWriteQuad
    (121) pexp -> CTEF . saveCTE
    (129) saveCTE -> .

    COMMA           reduce using rule 129 (saveCTE -> .)
    RPAREN          reduce using rule 129 (saveCTE -> .)
    MUL             reduce using rule 129 (saveCTE -> .)
    DIV             reduce using rule 129 (saveCTE -> .)
    PLUS            reduce using rule 129 (saveCTE -> .)
    MINUS           reduce using rule 129 (saveCTE -> .)
    GT              reduce using rule 129 (saveCTE -> .)
    LT              reduce using rule 129 (saveCTE -> .)
    GTE             reduce using rule 129 (saveCTE -> .)
    LTE             reduce using rule 129 (saveCTE -> .)
    NE              reduce using rule 129 (saveCTE -> .)
    COMPARE         reduce using rule 129 (saveCTE -> .)
    AND             reduce using rule 129 (saveCTE -> .)
    OR              reduce using rule 129 (saveCTE -> .)

    saveCTE                        shift and go to state 224

state 209

    (87) escritura2 -> exp .

    COMMA           reduce using rule 87 (escritura2 -> exp .)
    RPAREN          reduce using rule 87 (escritura2 -> exp .)


state 210

    (74) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY for_end

    RPAREN          shift and go to state 225


state 211

    (75) for1 -> FROM . asignacion TO exp
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 227

    asignacion                     shift and go to state 226

state 212

    (69) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (94) if_quad -> .

    LCURLY          reduce using rule 94 (if_quad -> .)

    if_quad                        shift and go to state 228

state 213

    (80) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement loop_end

    RPAREN          shift and go to state 229


state 214

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RCURLY end_func
    (36) fun_goto -> .

    ID              reduce using rule 36 (fun_goto -> .)
    READ            reduce using rule 36 (fun_goto -> .)
    WRITE           reduce using rule 36 (fun_goto -> .)
    FOR             reduce using rule 36 (fun_goto -> .)
    IF              reduce using rule 36 (fun_goto -> .)
    WHILE           reduce using rule 36 (fun_goto -> .)
    RCURLY          reduce using rule 36 (fun_goto -> .)

    fun_goto                       shift and go to state 230

state 215

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (36) fun_goto -> .

    ID              reduce using rule 36 (fun_goto -> .)
    READ            reduce using rule 36 (fun_goto -> .)
    WRITE           reduce using rule 36 (fun_goto -> .)
    FOR             reduce using rule 36 (fun_goto -> .)
    IF              reduce using rule 36 (fun_goto -> .)
    WHILE           reduce using rule 36 (fun_goto -> .)
    RETURN          reduce using rule 36 (fun_goto -> .)

    fun_goto                       shift and go to state 231

state 216

    (61) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad . llena_endproc
    (66) llena_endproc -> .

    MUL             reduce using rule 66 (llena_endproc -> .)
    DIV             reduce using rule 66 (llena_endproc -> .)
    PLUS            reduce using rule 66 (llena_endproc -> .)
    MINUS           reduce using rule 66 (llena_endproc -> .)
    GT              reduce using rule 66 (llena_endproc -> .)
    LT              reduce using rule 66 (llena_endproc -> .)
    GTE             reduce using rule 66 (llena_endproc -> .)
    LTE             reduce using rule 66 (llena_endproc -> .)
    NE              reduce using rule 66 (llena_endproc -> .)
    COMPARE         reduce using rule 66 (llena_endproc -> .)
    AND             reduce using rule 66 (llena_endproc -> .)
    OR              reduce using rule 66 (llena_endproc -> .)
    RBRACKET        reduce using rule 66 (llena_endproc -> .)
    RPAREN          reduce using rule 66 (llena_endproc -> .)
    COMMA           reduce using rule 66 (llena_endproc -> .)
    SEMICOLON       reduce using rule 66 (llena_endproc -> .)
    TO              reduce using rule 66 (llena_endproc -> .)
    CTEI            reduce using rule 66 (llena_endproc -> .)
    CTEF            reduce using rule 66 (llena_endproc -> .)
    CTEC            reduce using rule 66 (llena_endproc -> .)
    CTESTRING       reduce using rule 66 (llena_endproc -> .)
    LPAREN          reduce using rule 66 (llena_endproc -> .)
    ID              reduce using rule 66 (llena_endproc -> .)

    llena_endproc                  shift and go to state 232

state 217

    (49) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (51) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 51 (genera_quad_asignacion -> .)
    TO              reduce using rule 51 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 233

state 218

    (50) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    TO              reduce using rule 126 (empty -> .)

    exp                            shift and go to state 234
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 219

    (88) lectura -> READ operatorRead LPAREN exp operatorReadQuad . RPAREN

    RPAREN          shift and go to state 235


state 220

    (81) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad . RPAREN

    RPAREN          shift and go to state 236


state 221

    (82) escritura1 -> escritura2 COMMA . escritura2
    (84) escritura2 -> . COMILLA CTESTRING COMILLA
    (85) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (86) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (87) escritura2 -> . exp
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    COMILLA         shift and go to state 206
    CTEI            shift and go to state 207
    CTEF            shift and go to state 208
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    escritura2                     shift and go to state 237
    exp                            shift and go to state 209
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 222

    (84) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 238


state 223

    (85) escritura2 -> CTEI saveCTE . operadorWriteQuad
    (120) pexp -> CTEI saveCTE .
    (113) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 113 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 113 (operadorWriteQuad -> .)
    MUL             reduce using rule 120 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 120 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 120 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 120 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 120 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 120 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 120 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 120 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 120 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 120 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 120 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 120 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 113 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 113 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 120 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 120 (pexp -> CTEI saveCTE .) ]

    operadorWriteQuad              shift and go to state 239

state 224

    (86) escritura2 -> CTEF saveCTE . operadorWriteQuad
    (121) pexp -> CTEF saveCTE .
    (113) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 113 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 113 (operadorWriteQuad -> .)
    MUL             reduce using rule 121 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 113 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 113 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 121 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 121 (pexp -> CTEF saveCTE .) ]

    operadorWriteQuad              shift and go to state 240

state 225

    (74) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY for_end
    (73) for_quad -> .

    LCURLY          reduce using rule 73 (for_quad -> .)

    for_quad                       shift and go to state 241

state 226

    (75) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 242


state 227

    (49) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (128) saveId2 -> .

    EQUALS          reduce using rule 128 (saveId2 -> .)
    LBRACKET        reduce using rule 128 (saveId2 -> .)

    saveId2                        shift and go to state 166

state 228

    (69) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 243


state 229

    (80) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement loop_end
    (78) while_quad -> .

    LCURLY          reduce using rule 78 (while_quad -> .)

    while_quad                     shift and go to state 244

state 230

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RCURLY end_func
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 245
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 231

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RETURN          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 246
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 232

    (61) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .

    MUL             reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    DIV             reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    PLUS            reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    MINUS           reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GT              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LT              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GTE             reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LTE             reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    NE              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMPARE         reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    AND             reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    OR              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    RBRACKET        reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    RPAREN          reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMMA           reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    SEMICOLON       reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    TO              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEI            reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEF            reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEC            reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTESTRING       reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LPAREN          reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    ID              reduce using rule 61 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)


state 233

    (49) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 49 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 49 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 234

    (50) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (51) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 51 (genera_quad_asignacion -> .)
    TO              reduce using rule 51 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 247

state 235

    (88) lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 88 (lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .)


state 236

    (81) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .

    SEMICOLON       reduce using rule 81 (escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .)


state 237

    (82) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 82 (escritura1 -> escritura2 COMMA escritura2 .)


state 238

    (84) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 84 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 84 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 239

    (85) escritura2 -> CTEI saveCTE operadorWriteQuad .

    COMMA           reduce using rule 85 (escritura2 -> CTEI saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 85 (escritura2 -> CTEI saveCTE operadorWriteQuad .)


state 240

    (86) escritura2 -> CTEF saveCTE operadorWriteQuad .

    COMMA           reduce using rule 86 (escritura2 -> CTEF saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 86 (escritura2 -> CTEF saveCTE operadorWriteQuad .)


state 241

    (74) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY for_end

    LCURLY          shift and go to state 248


state 242

    (75) for1 -> FROM asignacion TO . exp
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)

    exp                            shift and go to state 249
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 243

    (69) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 250
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 244

    (80) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement loop_end

    LCURLY          shift and go to state 251


state 245

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RCURLY end_func

    RCURLY          shift and go to state 252


state 246

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    RETURN          shift and go to state 253


state 247

    (50) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 50 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 50 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 248

    (74) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY for_end
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 254
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 249

    (75) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 75 (for1 -> FROM asignacion TO exp .)


state 250

    (69) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 255


state 251

    (80) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement loop_end
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

  ! ID              [ reduce using rule 126 (empty -> .) ]
  ! READ            [ reduce using rule 126 (empty -> .) ]
  ! WRITE           [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]
  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]

    statement                      shift and go to state 256
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 252

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY . end_func
    (37) end_func -> .

    FUNCTION        reduce using rule 37 (end_func -> .)
    MAIN            reduce using rule 37 (end_func -> .)
    $end            reduce using rule 37 (end_func -> .)

    end_func                       shift and go to state 257

state 253

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (38) operadorReturn -> .

    CTEI            reduce using rule 38 (operadorReturn -> .)
    CTEF            reduce using rule 38 (operadorReturn -> .)
    CTEC            reduce using rule 38 (operadorReturn -> .)
    CTESTRING       reduce using rule 38 (operadorReturn -> .)
    LPAREN          reduce using rule 38 (operadorReturn -> .)
    ID              reduce using rule 38 (operadorReturn -> .)
    SEMICOLON       reduce using rule 38 (operadorReturn -> .)
    OR              reduce using rule 38 (operadorReturn -> .)
    AND             reduce using rule 38 (operadorReturn -> .)
    GT              reduce using rule 38 (operadorReturn -> .)
    LT              reduce using rule 38 (operadorReturn -> .)
    GTE             reduce using rule 38 (operadorReturn -> .)
    LTE             reduce using rule 38 (operadorReturn -> .)
    NE              reduce using rule 38 (operadorReturn -> .)
    COMPARE         reduce using rule 38 (operadorReturn -> .)
    PLUS            reduce using rule 38 (operadorReturn -> .)
    MINUS           reduce using rule 38 (operadorReturn -> .)
    MUL             reduce using rule 38 (operadorReturn -> .)
    DIV             reduce using rule 38 (operadorReturn -> .)

    operadorReturn                 shift and go to state 258

state 254

    (74) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY for_end

    RCURLY          shift and go to state 259


state 255

    (69) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (70) else -> . ELSE else_quad LCURLY statement RCURLY
    (71) else -> . empty
    (126) empty -> .

    ELSE            shift and go to state 261
    ID              reduce using rule 126 (empty -> .)
    READ            reduce using rule 126 (empty -> .)
    WRITE           reduce using rule 126 (empty -> .)
    FOR             reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RCURLY          reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)

    else                           shift and go to state 260
    empty                          shift and go to state 262

state 256

    (80) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . loop_end
    (77) loop_end -> .

    ID              reduce using rule 77 (loop_end -> .)
    READ            reduce using rule 77 (loop_end -> .)
    WRITE           reduce using rule 77 (loop_end -> .)
    FOR             reduce using rule 77 (loop_end -> .)
    IF              reduce using rule 77 (loop_end -> .)
    WHILE           reduce using rule 77 (loop_end -> .)
    RCURLY          reduce using rule 77 (loop_end -> .)
    RETURN          reduce using rule 77 (loop_end -> .)

    loop_end                       shift and go to state 263

state 257

    (34) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .

    FUNCTION        reduce using rule 34 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    MAIN            reduce using rule 34 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    $end            reduce using rule 34 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)


state 258

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY end_func
    (89) exp -> . nexp
    (90) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (97) nexp -> . compexp
    (98) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (99) compexp -> . sumexp
    (100) compexp -> . compexp1 sumexp
    (107) sumexp -> . mulexp
    (108) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (109) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (101) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (102) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (116) mulexp -> . pexp
    (117) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (118) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (119) pexp -> . var1 saveId
    (120) pexp -> . CTEI saveCTE
    (121) pexp -> . CTEF saveCTE
    (122) pexp -> . CTEC saveCTE
    (123) pexp -> . CTESTRING saveCTE
    (124) pexp -> . llamada
    (125) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (126) empty -> .

    CTEI            shift and go to state 94
    CTEF            shift and go to state 68
    CTEC            shift and go to state 69
    CTESTRING       shift and go to state 70
    LPAREN          shift and go to state 72
    ID              shift and go to state 73
    MUL             reduce using rule 126 (empty -> .)
    DIV             reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    MINUS           reduce using rule 126 (empty -> .)
    GT              reduce using rule 126 (empty -> .)
    LT              reduce using rule 126 (empty -> .)
    GTE             reduce using rule 126 (empty -> .)
    LTE             reduce using rule 126 (empty -> .)
    NE              reduce using rule 126 (empty -> .)
    COMPARE         reduce using rule 126 (empty -> .)
    AND             reduce using rule 126 (empty -> .)
    OR              reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)

    exp                            shift and go to state 264
    nexp                           shift and go to state 61
    compexp                        shift and go to state 62
    sumexp                         shift and go to state 63
    compexp1                       shift and go to state 64
    mulexp                         shift and go to state 65
    pexp                           shift and go to state 66
    var1                           shift and go to state 67
    llamada                        shift and go to state 71
    empty                          shift and go to state 35

state 259

    (74) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . for_end
    (76) for_end -> .

    ID              reduce using rule 76 (for_end -> .)
    READ            reduce using rule 76 (for_end -> .)
    WRITE           reduce using rule 76 (for_end -> .)
    FOR             reduce using rule 76 (for_end -> .)
    IF              reduce using rule 76 (for_end -> .)
    WHILE           reduce using rule 76 (for_end -> .)
    RCURLY          reduce using rule 76 (for_end -> .)
    RETURN          reduce using rule 76 (for_end -> .)

    for_end                        shift and go to state 265

state 260

    (69) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (95) end_if -> .

    ID              reduce using rule 95 (end_if -> .)
    READ            reduce using rule 95 (end_if -> .)
    WRITE           reduce using rule 95 (end_if -> .)
    FOR             reduce using rule 95 (end_if -> .)
    IF              reduce using rule 95 (end_if -> .)
    WHILE           reduce using rule 95 (end_if -> .)
    RCURLY          reduce using rule 95 (end_if -> .)
    RETURN          reduce using rule 95 (end_if -> .)

    end_if                         shift and go to state 266

state 261

    (70) else -> ELSE . else_quad LCURLY statement RCURLY
    (96) else_quad -> .

    LCURLY          reduce using rule 96 (else_quad -> .)

    else_quad                      shift and go to state 267

state 262

    (71) else -> empty .

    ID              reduce using rule 71 (else -> empty .)
    READ            reduce using rule 71 (else -> empty .)
    WRITE           reduce using rule 71 (else -> empty .)
    FOR             reduce using rule 71 (else -> empty .)
    IF              reduce using rule 71 (else -> empty .)
    WHILE           reduce using rule 71 (else -> empty .)
    RCURLY          reduce using rule 71 (else -> empty .)
    RETURN          reduce using rule 71 (else -> empty .)


state 263

    (80) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .

    ID              reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    READ            reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WRITE           reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    FOR             reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    IF              reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WHILE           reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RCURLY          reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RETURN          reduce using rule 80 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)


state 264

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY end_func
    (39) quad_return -> .

    SEMICOLON       reduce using rule 39 (quad_return -> .)

    quad_return                    shift and go to state 268

state 265

    (74) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .

    ID              reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    READ            reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WRITE           reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    FOR             reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    IF              reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WHILE           reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RCURLY          reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RETURN          reduce using rule 74 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)


state 266

    (69) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WRITE           reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 69 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 267

    (70) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 269


state 268

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 270


state 269

    (70) else -> ELSE else_quad LCURLY . statement RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (126) empty -> .
    (49) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (50) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (88) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (81) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (74) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (69) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (80) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end

    RCURLY          reduce using rule 126 (empty -> .)
    ID              shift and go to state 136
    READ            shift and go to state 137
    WRITE           shift and go to state 138
    FOR             shift and go to state 139
    IF              shift and go to state 140
    WHILE           shift and go to state 141

    statement                      shift and go to state 271
    statement1                     shift and go to state 127
    empty                          shift and go to state 128
    asignacion                     shift and go to state 129
    llamada                        shift and go to state 130
    lectura                        shift and go to state 131
    escritura                      shift and go to state 132
    for                            shift and go to state 133
    if                             shift and go to state 134
    while                          shift and go to state 135

state 270

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY end_func

    RCURLY          shift and go to state 272


state 271

    (70) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 273


state 272

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY . end_func
    (37) end_func -> .

    FUNCTION        reduce using rule 37 (end_func -> .)
    MAIN            reduce using rule 37 (end_func -> .)
    $end            reduce using rule 37 (end_func -> .)

    end_func                       shift and go to state 274

state 273

    (70) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WRITE           reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 70 (else -> ELSE else_quad LCURLY statement RCURLY .)


state 274

    (35) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .

    FUNCTION        reduce using rule 35 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    MAIN            reduce using rule 35 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    $end            reduce using rule 35 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MUL in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 114 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 115 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 115 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 116 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 116 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for ID in state 116 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 117 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 117 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 117 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 118 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 118 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 118 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 119 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 120 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 120 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 121 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 121 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 122 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 123 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 123 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 123 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 123 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for READ in state 127 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for READ in state 251 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 251 resolved as shift
WARNING: shift/reduce conflict for FOR in state 251 resolved as shift
WARNING: shift/reduce conflict for IF in state 251 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 251 resolved as shift
WARNING: reduce/reduce conflict in state 73 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 73
WARNING: reduce/reduce conflict in state 142 resolved using rule (param1 -> ID COMMA param1)
WARNING: rejected rule (addParam -> <empty>) in state 142
WARNING: reduce/reduce conflict in state 159 resolved using rule (var1 -> empty)
WARNING: rejected rule (aux_exp -> empty) in state 159
WARNING: reduce/reduce conflict in state 223 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 223
WARNING: reduce/reduce conflict in state 224 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 224
WARNING: Rule (aux_exp -> empty) is never reduced
