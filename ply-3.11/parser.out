Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars quadMain modules main_end programa2
Rule 4     programa1 -> vars quadMain modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     quadMain -> <empty>
Rule 9     main_end -> <empty>
Rule 10    tipo -> INT guardaTipoVar
Rule 11    tipo -> FLOAT guardaTipoVar
Rule 12    tipo -> CHAR guardaTipoVar
Rule 13    guardaTipoVar -> <empty>
Rule 14    vars -> var
Rule 15    vars -> empty
Rule 16    var -> VAR var2
Rule 17    var1 -> ID
Rule 18    var1 -> ID COMMA var1 addV
Rule 19    var1 -> ID arr
Rule 20    var1 -> ID arr COMMA var1 addV
Rule 21    var1 -> empty
Rule 22    addV -> <empty>
Rule 23    var2 -> var2 tipo var1 SEMICOLON addV
Rule 24    var2 -> empty
Rule 25    arr -> LBRACKET arr_handler const RBRACKET
Rule 26    arr_handler -> empty
Rule 27    const -> CTEI
Rule 28    modules -> fun modules
Rule 29    modules -> empty
Rule 30    save_fun -> <empty>
Rule 31    fun -> FUNCTION VOID fun1
Rule 32    fun -> FUNCTION function_handler INT fun2
Rule 33    fun -> FUNCTION function_handler CHAR fun2
Rule 34    fun -> FUNCTION function_handler FLOAT fun2
Rule 35    function_handler -> empty
Rule 36    fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
Rule 37    fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
Rule 38    fun_goto -> <empty>
Rule 39    end_func -> <empty>
Rule 40    operadorReturn -> <empty>
Rule 41    quad_return -> <empty>
Rule 42    statement -> statement1 statement
Rule 43    statement -> empty
Rule 44    statement1 -> asignacion SEMICOLON
Rule 45    statement1 -> llamada SEMICOLON
Rule 46    statement1 -> lectura SEMICOLON
Rule 47    statement1 -> escritura SEMICOLON
Rule 48    statement1 -> for
Rule 49    statement1 -> if
Rule 50    statement1 -> while
Rule 51    assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion
Rule 52    np_arr -> empty
Rule 53    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 54    asignacion -> assig_arreglo
Rule 55    asignacion -> llamada
Rule 56    genera_quad_asignacion -> <empty>
Rule 57    addOperadorName -> <empty>
Rule 58    param1 -> ID addParam
Rule 59    param1 -> ID COMMA param1 addParam
Rule 60    param1 -> ID arr
Rule 61    param1 -> ID COMMA param1
Rule 62    param1 -> empty
Rule 63    addParam -> <empty>
Rule 64    param2 -> param2 tipo param1
Rule 65    param2 -> empty
Rule 66    llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
Rule 67    aux_exp -> exp
Rule 68    aux_exp -> exp COMMA aux_exp
Rule 69    aux_exp -> empty
Rule 70    quad_param -> <empty>
Rule 71    llena_endproc -> <empty>
Rule 72    era_call -> <empty>
Rule 73    gosub_quad -> <empty>
Rule 74    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 75    else -> ELSE else_quad LCURLY statement RCURLY
Rule 76    else -> empty
Rule 77    for_op -> <empty>
Rule 78    for_quad -> <empty>
Rule 79    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
Rule 80    for1 -> FROM asignacion TO exp
Rule 81    loop_end -> <empty>
Rule 82    for_end -> <empty>
Rule 83    while_quad -> <empty>
Rule 84    while_op -> <empty>
Rule 85    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
Rule 86    escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
Rule 87    escritura1 -> escritura2 COMMA escritura2
Rule 88    escritura1 -> escritura2
Rule 89    escritura2 -> COMILLA CTESTRING COMILLA
Rule 90    escritura2 -> CTEI saveCTE operadorWriteQuad
Rule 91    escritura2 -> CTEF saveCTE operadorWriteQuad
Rule 92    escritura2 -> exp
Rule 93    lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN
Rule 94    exp -> nexp
Rule 95    exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 96    genera_quad_or -> <empty>
Rule 97    genera_quad_and -> <empty>
Rule 98    compare_quad -> <empty>
Rule 99    if_quad -> <empty>
Rule 100   end_if -> <empty>
Rule 101   else_quad -> <empty>
Rule 102   nexp -> compexp
Rule 103   nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 104   compexp -> sumexp
Rule 105   compexp -> compexp1 sumexp
Rule 106   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 107   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 108   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 109   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 110   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 111   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 112   sumexp -> mulexp
Rule 113   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 114   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 115   genera_sum_quad -> <empty>
Rule 116   genera_mul_quad -> <empty>
Rule 117   operadorWrite -> <empty>
Rule 118   operadorWriteQuad -> <empty>
Rule 119   operatorRead -> <empty>
Rule 120   operatorReadQuad -> <empty>
Rule 121   mulexp -> pexp
Rule 122   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 123   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 124   pexp -> var1 saveId
Rule 125   pexp -> CTEI saveCTE
Rule 126   pexp -> CTEF saveCTE
Rule 127   pexp -> CTEC saveCTE
Rule 128   pexp -> CTESTRING saveCTE
Rule 129   pexp -> llamada
Rule 130   pexp -> LPAREN exp RPAREN
Rule 131   empty -> <empty>
Rule 132   saveId -> <empty>
Rule 133   saveId2 -> <empty>
Rule 134   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 103
CHAR                 : 12 33
COMILLA              : 89 89
COMMA                : 18 20 59 61 68 87
COMPARE              : 111
CTEC                 : 127
CTEF                 : 91 126
CTEI                 : 27 90 125
CTESTRING            : 89 128
DIV                  : 123
ELSE                 : 75
END                  : 7
EQUALS               : 51 53
FLOAT                : 11 34
FOR                  : 79
FROM                 : 80
FUNCTION             : 31 32 33 34
GT                   : 106
GTE                  : 108
ID                   : 1 17 18 19 20 36 37 51 53 58 59 60 61 66
IF                   : 74
INT                  : 10 32
LBRACKET             : 25
LCURLY               : 7 36 37 74 75 79 85
LPAREN               : 7 36 37 66 74 79 85 86 93 130
LT                   : 107
LTE                  : 109
MAIN                 : 7
MINUS                : 114
MUL                  : 122
NE                   : 110
OR                   : 95
PLUS                 : 113
PROGRAM              : 1
RBRACKET             : 25
RCURLY               : 7 36 37 74 75 79
READ                 : 93
RETURN               : 37
RPAREN               : 7 36 37 66 74 79 85 86 93 130
SEMICOLON            : 1 23 36 37 37 44 45 46 47
TO                   : 80
VAR                  : 16
VOID                 : 31
WHILE                : 85
WRITE                : 86
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 51 53 95 103 106 107 108 109 110 111 113 114 122 123
addP                 : 1
addParam             : 58 59
addV                 : 18 20 23
arr                  : 19 20 51 60
arr_handler          : 25
asignacion           : 44 80
assig_arreglo        : 54
aux_exp              : 66 68
compare_quad         : 106 107 108 109 110 111
compexp              : 102 103 103
compexp1             : 105
const                : 25
else                 : 74
else_quad            : 75
empty                : 15 21 24 26 29 35 43 52 62 65 69 76
end_func             : 36 37
end_if               : 74
era_call             : 66
escritura            : 47
escritura1           : 86
escritura2           : 87 87 88
exp                  : 37 51 53 67 68 74 80 85 92 93 130
for                  : 48
for1                 : 79
for_end              : 79
for_op               : 79
for_quad             : 79
fun                  : 28
fun1                 : 31
fun2                 : 32 33 34
fun_goto             : 36 37
function_handler     : 32 33 34
genera_mul_quad      : 122 123
genera_quad_and      : 103
genera_quad_asignacion : 51 53
genera_quad_or       : 95
genera_sum_quad      : 113 114
gosub_quad           : 66
guardaTipoVar        : 10 11 12
if                   : 49
if_quad              : 74
lectura              : 46
llamada              : 45 55 129
llena_endproc        : 66
loop_end             : 85
main                 : 6
main_end             : 3
modules              : 3 4 28
mulexp               : 112 113 113 114 114
nexp                 : 94 95 95
np_arr               : 51
operadorReturn       : 37
operadorWrite        : 86
operadorWriteQuad    : 86 90 91
operatorRead         : 93
operatorReadQuad     : 93
param1               : 59 61 64
param2               : 7 36 37 64
pexp                 : 121 122 122 123 123
programa             : 0
programa1            : 1
programa2            : 3 5
quadMain             : 3 4
quad_param           : 66
quad_return          : 37
saveCTE              : 90 91 125 126 127 128
saveId               : 124
saveId2              : 51 53
save_fun             : 7 36 37
statement            : 7 36 37 42 74 75 79 85
statement1           : 42
sumexp               : 104 105 106 106 107 107 108 108 109 109 110 110 111 111
tipo                 : 23 64
var                  : 14
var1                 : 18 20 23 124
var2                 : 16 23
vars                 : 3 4 7 36 37
while                : 50
while_op             : 85
while_quad           : 85

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUNCTION        reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars quadMain modules main_end programa2
    (4) programa1 -> . vars quadMain modules
    (5) programa1 -> . programa2
    (14) vars -> . var
    (15) vars -> . empty
    (6) programa2 -> . main
    (16) var -> . VAR var2
    (131) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUNCTION        reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 131 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . quadMain modules main_end programa2
    (4) programa1 -> vars . quadMain modules
    (8) quadMain -> .

    FUNCTION        reduce using rule 8 (quadMain -> .)
    MAIN            reduce using rule 8 (quadMain -> .)
    $end            reduce using rule 8 (quadMain -> .)

    quadMain                       shift and go to state 14

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (14) vars -> var .

    FUNCTION        reduce using rule 14 (vars -> var .)
    MAIN            reduce using rule 14 (vars -> var .)
    $end            reduce using rule 14 (vars -> var .)
    ID              reduce using rule 14 (vars -> var .)
    READ            reduce using rule 14 (vars -> var .)
    WRITE           reduce using rule 14 (vars -> var .)
    FOR             reduce using rule 14 (vars -> var .)
    IF              reduce using rule 14 (vars -> var .)
    WHILE           reduce using rule 14 (vars -> var .)
    RCURLY          reduce using rule 14 (vars -> var .)
    RETURN          reduce using rule 14 (vars -> var .)


state 10

    (15) vars -> empty .

    FUNCTION        reduce using rule 15 (vars -> empty .)
    MAIN            reduce using rule 15 (vars -> empty .)
    $end            reduce using rule 15 (vars -> empty .)
    ID              reduce using rule 15 (vars -> empty .)
    READ            reduce using rule 15 (vars -> empty .)
    WRITE           reduce using rule 15 (vars -> empty .)
    FOR             reduce using rule 15 (vars -> empty .)
    IF              reduce using rule 15 (vars -> empty .)
    WHILE           reduce using rule 15 (vars -> empty .)
    RCURLY          reduce using rule 15 (vars -> empty .)
    RETURN          reduce using rule 15 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (16) var -> VAR . var2
    (23) var2 -> . var2 tipo var1 SEMICOLON addV
    (24) var2 -> . empty
    (131) empty -> .

    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    FUNCTION        reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (30) save_fun -> .

    LPAREN          reduce using rule 30 (save_fun -> .)

    save_fun                       shift and go to state 17

state 14

    (3) programa1 -> vars quadMain . modules main_end programa2
    (4) programa1 -> vars quadMain . modules
    (28) modules -> . fun modules
    (29) modules -> . empty
    (31) fun -> . FUNCTION VOID fun1
    (32) fun -> . FUNCTION function_handler INT fun2
    (33) fun -> . FUNCTION function_handler CHAR fun2
    (34) fun -> . FUNCTION function_handler FLOAT fun2
    (131) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)

    modules                        shift and go to state 18
    fun                            shift and go to state 19
    empty                          shift and go to state 20

state 15

    (16) var -> VAR var2 .
    (23) var2 -> var2 . tipo var1 SEMICOLON addV
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    FUNCTION        reduce using rule 16 (var -> VAR var2 .)
    MAIN            reduce using rule 16 (var -> VAR var2 .)
    $end            reduce using rule 16 (var -> VAR var2 .)
    ID              reduce using rule 16 (var -> VAR var2 .)
    READ            reduce using rule 16 (var -> VAR var2 .)
    WRITE           reduce using rule 16 (var -> VAR var2 .)
    FOR             reduce using rule 16 (var -> VAR var2 .)
    IF              reduce using rule 16 (var -> VAR var2 .)
    WHILE           reduce using rule 16 (var -> VAR var2 .)
    RCURLY          reduce using rule 16 (var -> VAR var2 .)
    RETURN          reduce using rule 16 (var -> VAR var2 .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 22

state 16

    (24) var2 -> empty .

    INT             reduce using rule 24 (var2 -> empty .)
    FLOAT           reduce using rule 24 (var2 -> empty .)
    CHAR            reduce using rule 24 (var2 -> empty .)
    FUNCTION        reduce using rule 24 (var2 -> empty .)
    MAIN            reduce using rule 24 (var2 -> empty .)
    $end            reduce using rule 24 (var2 -> empty .)
    ID              reduce using rule 24 (var2 -> empty .)
    READ            reduce using rule 24 (var2 -> empty .)
    WRITE           reduce using rule 24 (var2 -> empty .)
    FOR             reduce using rule 24 (var2 -> empty .)
    IF              reduce using rule 24 (var2 -> empty .)
    WHILE           reduce using rule 24 (var2 -> empty .)
    RCURLY          reduce using rule 24 (var2 -> empty .)
    RETURN          reduce using rule 24 (var2 -> empty .)


state 17

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 26


state 18

    (3) programa1 -> vars quadMain modules . main_end programa2
    (4) programa1 -> vars quadMain modules .
    (9) main_end -> .

    $end            reduce using rule 4 (programa1 -> vars quadMain modules .)
    MAIN            reduce using rule 9 (main_end -> .)

    main_end                       shift and go to state 27

state 19

    (28) modules -> fun . modules
    (28) modules -> . fun modules
    (29) modules -> . empty
    (31) fun -> . FUNCTION VOID fun1
    (32) fun -> . FUNCTION function_handler INT fun2
    (33) fun -> . FUNCTION function_handler CHAR fun2
    (34) fun -> . FUNCTION function_handler FLOAT fun2
    (131) empty -> .

    FUNCTION        shift and go to state 21
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)

    fun                            shift and go to state 19
    modules                        shift and go to state 28
    empty                          shift and go to state 20

state 20

    (29) modules -> empty .

    MAIN            reduce using rule 29 (modules -> empty .)
    $end            reduce using rule 29 (modules -> empty .)


state 21

    (31) fun -> FUNCTION . VOID fun1
    (32) fun -> FUNCTION . function_handler INT fun2
    (33) fun -> FUNCTION . function_handler CHAR fun2
    (34) fun -> FUNCTION . function_handler FLOAT fun2
    (35) function_handler -> . empty
    (131) empty -> .

    VOID            shift and go to state 29
    INT             reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)

    function_handler               shift and go to state 30
    empty                          shift and go to state 31

state 22

    (23) var2 -> var2 tipo . var1 SEMICOLON addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 33
    SEMICOLON       reduce using rule 131 (empty -> .)

    var1                           shift and go to state 32
    empty                          shift and go to state 34

state 23

    (10) tipo -> INT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 35

state 24

    (11) tipo -> FLOAT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 36

state 25

    (12) tipo -> CHAR . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 37

state 26

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (64) param2 -> . param2 tipo param1
    (65) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 38
    empty                          shift and go to state 39

state 27

    (3) programa1 -> vars quadMain modules main_end . programa2
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    MAIN            shift and go to state 13

    programa2                      shift and go to state 40
    main                           shift and go to state 11

state 28

    (28) modules -> fun modules .

    MAIN            reduce using rule 28 (modules -> fun modules .)
    $end            reduce using rule 28 (modules -> fun modules .)


state 29

    (31) fun -> FUNCTION VOID . fun1
    (36) fun1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    ID              shift and go to state 42

    fun1                           shift and go to state 41

state 30

    (32) fun -> FUNCTION function_handler . INT fun2
    (33) fun -> FUNCTION function_handler . CHAR fun2
    (34) fun -> FUNCTION function_handler . FLOAT fun2

    INT             shift and go to state 43
    CHAR            shift and go to state 44
    FLOAT           shift and go to state 45


state 31

    (35) function_handler -> empty .

    INT             reduce using rule 35 (function_handler -> empty .)
    CHAR            reduce using rule 35 (function_handler -> empty .)
    FLOAT           reduce using rule 35 (function_handler -> empty .)


state 32

    (23) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 46


state 33

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (25) arr -> . LBRACKET arr_handler const RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 47
    LBRACKET        shift and go to state 49

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]

    arr                            shift and go to state 48

state 34

    (21) var1 -> empty .

    SEMICOLON       reduce using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    TO              reduce using rule 21 (var1 -> empty .)
    CTEI            reduce using rule 21 (var1 -> empty .)
    CTEF            reduce using rule 21 (var1 -> empty .)
    CTEC            reduce using rule 21 (var1 -> empty .)
    CTESTRING       reduce using rule 21 (var1 -> empty .)
    LPAREN          reduce using rule 21 (var1 -> empty .)
    ID              reduce using rule 21 (var1 -> empty .)


state 35

    (10) tipo -> INT guardaTipoVar .

    ID              reduce using rule 10 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> INT guardaTipoVar .)


state 36

    (11) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)


state 37

    (12) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 12 (tipo -> CHAR guardaTipoVar .)


state 38

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (64) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 50
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 39

    (65) param2 -> empty .

    RPAREN          reduce using rule 65 (param2 -> empty .)
    INT             reduce using rule 65 (param2 -> empty .)
    FLOAT           reduce using rule 65 (param2 -> empty .)
    CHAR            reduce using rule 65 (param2 -> empty .)


state 40

    (3) programa1 -> vars quadMain modules main_end programa2 .

    $end            reduce using rule 3 (programa1 -> vars quadMain modules main_end programa2 .)


state 41

    (31) fun -> FUNCTION VOID fun1 .

    FUNCTION        reduce using rule 31 (fun -> FUNCTION VOID fun1 .)
    MAIN            reduce using rule 31 (fun -> FUNCTION VOID fun1 .)
    $end            reduce using rule 31 (fun -> FUNCTION VOID fun1 .)


state 42

    (36) fun1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (30) save_fun -> .

    LPAREN          reduce using rule 30 (save_fun -> .)

    save_fun                       shift and go to state 52

state 43

    (32) fun -> FUNCTION function_handler INT . fun2
    (37) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 54

    fun2                           shift and go to state 53

state 44

    (33) fun -> FUNCTION function_handler CHAR . fun2
    (37) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 54

    fun2                           shift and go to state 55

state 45

    (34) fun -> FUNCTION function_handler FLOAT . fun2
    (37) fun2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 54

    fun2                           shift and go to state 56

state 46

    (23) var2 -> var2 tipo var1 SEMICOLON . addV
    (22) addV -> .

    INT             reduce using rule 22 (addV -> .)
    FLOAT           reduce using rule 22 (addV -> .)
    CHAR            reduce using rule 22 (addV -> .)
    FUNCTION        reduce using rule 22 (addV -> .)
    MAIN            reduce using rule 22 (addV -> .)
    $end            reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)
    READ            reduce using rule 22 (addV -> .)
    WRITE           reduce using rule 22 (addV -> .)
    FOR             reduce using rule 22 (addV -> .)
    IF              reduce using rule 22 (addV -> .)
    WHILE           reduce using rule 22 (addV -> .)
    RCURLY          reduce using rule 22 (addV -> .)
    RETURN          reduce using rule 22 (addV -> .)

    addV                           shift and go to state 57

state 47

    (18) var1 -> ID COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 33
    SEMICOLON       reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    CTEI            reduce using rule 131 (empty -> .)
    CTEF            reduce using rule 131 (empty -> .)
    CTEC            reduce using rule 131 (empty -> .)
    CTESTRING       reduce using rule 131 (empty -> .)
    LPAREN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]

    var1                           shift and go to state 58
    empty                          shift and go to state 34

state 48

    (19) var1 -> ID arr .
    (20) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (var1 -> ID arr .)
    MUL             reduce using rule 19 (var1 -> ID arr .)
    DIV             reduce using rule 19 (var1 -> ID arr .)
    PLUS            reduce using rule 19 (var1 -> ID arr .)
    MINUS           reduce using rule 19 (var1 -> ID arr .)
    GT              reduce using rule 19 (var1 -> ID arr .)
    LT              reduce using rule 19 (var1 -> ID arr .)
    GTE             reduce using rule 19 (var1 -> ID arr .)
    LTE             reduce using rule 19 (var1 -> ID arr .)
    NE              reduce using rule 19 (var1 -> ID arr .)
    COMPARE         reduce using rule 19 (var1 -> ID arr .)
    AND             reduce using rule 19 (var1 -> ID arr .)
    OR              reduce using rule 19 (var1 -> ID arr .)
    RPAREN          reduce using rule 19 (var1 -> ID arr .)
    TO              reduce using rule 19 (var1 -> ID arr .)
    CTEI            reduce using rule 19 (var1 -> ID arr .)
    CTEF            reduce using rule 19 (var1 -> ID arr .)
    CTEC            reduce using rule 19 (var1 -> ID arr .)
    CTESTRING       reduce using rule 19 (var1 -> ID arr .)
    LPAREN          reduce using rule 19 (var1 -> ID arr .)
    ID              reduce using rule 19 (var1 -> ID arr .)
    COMMA           shift and go to state 59

  ! COMMA           [ reduce using rule 19 (var1 -> ID arr .) ]


state 49

    (25) arr -> LBRACKET . arr_handler const RBRACKET
    (26) arr_handler -> . empty
    (131) empty -> .

    CTEI            reduce using rule 131 (empty -> .)

    arr_handler                    shift and go to state 60
    empty                          shift and go to state 61

state 50

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 62


state 51

    (64) param2 -> param2 tipo . param1
    (58) param1 -> . ID addParam
    (59) param1 -> . ID COMMA param1 addParam
    (60) param1 -> . ID arr
    (61) param1 -> . ID COMMA param1
    (62) param1 -> . empty
    (131) empty -> .

    ID              shift and go to state 64
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param1                         shift and go to state 63
    empty                          shift and go to state 65

state 52

    (36) fun1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    LPAREN          shift and go to state 66


state 53

    (32) fun -> FUNCTION function_handler INT fun2 .

    FUNCTION        reduce using rule 32 (fun -> FUNCTION function_handler INT fun2 .)
    MAIN            reduce using rule 32 (fun -> FUNCTION function_handler INT fun2 .)
    $end            reduce using rule 32 (fun -> FUNCTION function_handler INT fun2 .)


state 54

    (37) fun2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (30) save_fun -> .

    LPAREN          reduce using rule 30 (save_fun -> .)

    save_fun                       shift and go to state 67

state 55

    (33) fun -> FUNCTION function_handler CHAR fun2 .

    FUNCTION        reduce using rule 33 (fun -> FUNCTION function_handler CHAR fun2 .)
    MAIN            reduce using rule 33 (fun -> FUNCTION function_handler CHAR fun2 .)
    $end            reduce using rule 33 (fun -> FUNCTION function_handler CHAR fun2 .)


state 56

    (34) fun -> FUNCTION function_handler FLOAT fun2 .

    FUNCTION        reduce using rule 34 (fun -> FUNCTION function_handler FLOAT fun2 .)
    MAIN            reduce using rule 34 (fun -> FUNCTION function_handler FLOAT fun2 .)
    $end            reduce using rule 34 (fun -> FUNCTION function_handler FLOAT fun2 .)


state 57

    (23) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUNCTION        reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WRITE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 58

    (18) var1 -> ID COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 68

state 59

    (20) var1 -> ID arr COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 33
    SEMICOLON       reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    CTEI            reduce using rule 131 (empty -> .)
    CTEF            reduce using rule 131 (empty -> .)
    CTEC            reduce using rule 131 (empty -> .)
    CTESTRING       reduce using rule 131 (empty -> .)
    LPAREN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]

    var1                           shift and go to state 69
    empty                          shift and go to state 34

state 60

    (25) arr -> LBRACKET arr_handler . const RBRACKET
    (27) const -> . CTEI

    CTEI            shift and go to state 71

    const                          shift and go to state 70

state 61

    (26) arr_handler -> empty .

    CTEI            reduce using rule 26 (arr_handler -> empty .)


state 62

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 72
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 63

    (64) param2 -> param2 tipo param1 .

    RPAREN          reduce using rule 64 (param2 -> param2 tipo param1 .)
    INT             reduce using rule 64 (param2 -> param2 tipo param1 .)
    FLOAT           reduce using rule 64 (param2 -> param2 tipo param1 .)
    CHAR            reduce using rule 64 (param2 -> param2 tipo param1 .)


state 64

    (58) param1 -> ID . addParam
    (59) param1 -> ID . COMMA param1 addParam
    (60) param1 -> ID . arr
    (61) param1 -> ID . COMMA param1
    (63) addParam -> .
    (25) arr -> . LBRACKET arr_handler const RBRACKET

    COMMA           shift and go to state 74
    RPAREN          reduce using rule 63 (addParam -> .)
    INT             reduce using rule 63 (addParam -> .)
    FLOAT           reduce using rule 63 (addParam -> .)
    CHAR            reduce using rule 63 (addParam -> .)
    LBRACKET        shift and go to state 49

    addParam                       shift and go to state 73
    arr                            shift and go to state 75

state 65

    (62) param1 -> empty .

    RPAREN          reduce using rule 62 (param1 -> empty .)
    INT             reduce using rule 62 (param1 -> empty .)
    FLOAT           reduce using rule 62 (param1 -> empty .)
    CHAR            reduce using rule 62 (param1 -> empty .)


state 66

    (36) fun1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (64) param2 -> . param2 tipo param1
    (65) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 76
    empty                          shift and go to state 39

state 67

    (37) fun2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LPAREN          shift and go to state 77


state 68

    (18) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID COMMA var1 addV .)


state 69

    (20) var1 -> ID arr COMMA var1 . addV
    (22) addV -> .

    SEMICOLON       reduce using rule 22 (addV -> .)
    MUL             reduce using rule 22 (addV -> .)
    DIV             reduce using rule 22 (addV -> .)
    PLUS            reduce using rule 22 (addV -> .)
    MINUS           reduce using rule 22 (addV -> .)
    GT              reduce using rule 22 (addV -> .)
    LT              reduce using rule 22 (addV -> .)
    GTE             reduce using rule 22 (addV -> .)
    LTE             reduce using rule 22 (addV -> .)
    NE              reduce using rule 22 (addV -> .)
    COMPARE         reduce using rule 22 (addV -> .)
    AND             reduce using rule 22 (addV -> .)
    OR              reduce using rule 22 (addV -> .)
    RPAREN          reduce using rule 22 (addV -> .)
    COMMA           reduce using rule 22 (addV -> .)
    TO              reduce using rule 22 (addV -> .)
    CTEI            reduce using rule 22 (addV -> .)
    CTEF            reduce using rule 22 (addV -> .)
    CTEC            reduce using rule 22 (addV -> .)
    CTESTRING       reduce using rule 22 (addV -> .)
    LPAREN          reduce using rule 22 (addV -> .)
    ID              reduce using rule 22 (addV -> .)

    addV                           shift and go to state 78

state 70

    (25) arr -> LBRACKET arr_handler const . RBRACKET

    RBRACKET        shift and go to state 79


state 71

    (27) const -> CTEI .

    RBRACKET        reduce using rule 27 (const -> CTEI .)


state 72

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 80
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 73

    (58) param1 -> ID addParam .

    RPAREN          reduce using rule 58 (param1 -> ID addParam .)
    INT             reduce using rule 58 (param1 -> ID addParam .)
    FLOAT           reduce using rule 58 (param1 -> ID addParam .)
    CHAR            reduce using rule 58 (param1 -> ID addParam .)


state 74

    (59) param1 -> ID COMMA . param1 addParam
    (61) param1 -> ID COMMA . param1
    (58) param1 -> . ID addParam
    (59) param1 -> . ID COMMA param1 addParam
    (60) param1 -> . ID arr
    (61) param1 -> . ID COMMA param1
    (62) param1 -> . empty
    (131) empty -> .

    ID              shift and go to state 64
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param1                         shift and go to state 97
    empty                          shift and go to state 65

state 75

    (60) param1 -> ID arr .

    RPAREN          reduce using rule 60 (param1 -> ID arr .)
    INT             reduce using rule 60 (param1 -> ID arr .)
    FLOAT           reduce using rule 60 (param1 -> ID arr .)
    CHAR            reduce using rule 60 (param1 -> ID arr .)


state 76

    (36) fun1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (64) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 98
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 77

    (37) fun2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (64) param2 -> . param2 tipo param1
    (65) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 99
    empty                          shift and go to state 39

state 78

    (20) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)


state 79

    (25) arr -> LBRACKET arr_handler const RBRACKET .

    COMMA           reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    SEMICOLON       reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    MUL             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    DIV             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    PLUS            reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    MINUS           reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    GT              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    LT              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    GTE             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    LTE             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    NE              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    COMPARE         reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    AND             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    OR              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    RPAREN          reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    TO              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    CTEI            reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    CTEF            reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    CTEC            reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    CTESTRING       reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    LPAREN          reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    ID              reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    INT             reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    FLOAT           reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    CHAR            reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)
    EQUALS          reduce using rule 25 (arr -> LBRACKET arr_handler const RBRACKET .)


state 80

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 100


state 81

    (42) statement -> statement1 . statement
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    statement1                     shift and go to state 81
    statement                      shift and go to state 101
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 82

    (43) statement -> empty .

    RCURLY          reduce using rule 43 (statement -> empty .)
    RETURN          reduce using rule 43 (statement -> empty .)
    ID              reduce using rule 43 (statement -> empty .)
    READ            reduce using rule 43 (statement -> empty .)
    WRITE           reduce using rule 43 (statement -> empty .)
    FOR             reduce using rule 43 (statement -> empty .)
    IF              reduce using rule 43 (statement -> empty .)
    WHILE           reduce using rule 43 (statement -> empty .)


state 83

    (44) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 102


state 84

    (45) statement1 -> llamada . SEMICOLON
    (55) asignacion -> llamada .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 103

  ! SEMICOLON       [ reduce using rule 55 (asignacion -> llamada .) ]


state 85

    (46) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 104


state 86

    (47) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 105


state 87

    (48) statement1 -> for .

    ID              reduce using rule 48 (statement1 -> for .)
    READ            reduce using rule 48 (statement1 -> for .)
    WRITE           reduce using rule 48 (statement1 -> for .)
    FOR             reduce using rule 48 (statement1 -> for .)
    IF              reduce using rule 48 (statement1 -> for .)
    WHILE           reduce using rule 48 (statement1 -> for .)
    RCURLY          reduce using rule 48 (statement1 -> for .)
    RETURN          reduce using rule 48 (statement1 -> for .)


state 88

    (49) statement1 -> if .

    ID              reduce using rule 49 (statement1 -> if .)
    READ            reduce using rule 49 (statement1 -> if .)
    WRITE           reduce using rule 49 (statement1 -> if .)
    FOR             reduce using rule 49 (statement1 -> if .)
    IF              reduce using rule 49 (statement1 -> if .)
    WHILE           reduce using rule 49 (statement1 -> if .)
    RCURLY          reduce using rule 49 (statement1 -> if .)
    RETURN          reduce using rule 49 (statement1 -> if .)


state 89

    (50) statement1 -> while .

    ID              reduce using rule 50 (statement1 -> while .)
    READ            reduce using rule 50 (statement1 -> while .)
    WRITE           reduce using rule 50 (statement1 -> while .)
    FOR             reduce using rule 50 (statement1 -> while .)
    IF              reduce using rule 50 (statement1 -> while .)
    WHILE           reduce using rule 50 (statement1 -> while .)
    RCURLY          reduce using rule 50 (statement1 -> while .)
    RETURN          reduce using rule 50 (statement1 -> while .)


state 90

    (53) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (66) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (51) assig_arreglo -> ID . saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion
    (133) saveId2 -> .
    (72) era_call -> .

    EQUALS          reduce using rule 133 (saveId2 -> .)
    LBRACKET        reduce using rule 133 (saveId2 -> .)
    LPAREN          reduce using rule 72 (era_call -> .)

    saveId2                        shift and go to state 106
    era_call                       shift and go to state 107

state 91

    (54) asignacion -> assig_arreglo .

    SEMICOLON       reduce using rule 54 (asignacion -> assig_arreglo .)
    TO              reduce using rule 54 (asignacion -> assig_arreglo .)


state 92

    (93) lectura -> READ . operatorRead LPAREN exp operatorReadQuad RPAREN
    (119) operatorRead -> .

    LPAREN          reduce using rule 119 (operatorRead -> .)

    operatorRead                   shift and go to state 108

state 93

    (86) escritura -> WRITE . LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN

    LPAREN          shift and go to state 109


state 94

    (79) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (77) for_op -> .

    LPAREN          reduce using rule 77 (for_op -> .)

    for_op                         shift and go to state 110

state 95

    (74) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 111


state 96

    (85) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (84) while_op -> .

    LPAREN          reduce using rule 84 (while_op -> .)

    while_op                       shift and go to state 112

state 97

    (59) param1 -> ID COMMA param1 . addParam
    (61) param1 -> ID COMMA param1 .
    (63) addParam -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 61 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for INT resolved using rule 61 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for FLOAT resolved using rule 61 (param1 -> ID COMMA param1 .)
  ! reduce/reduce conflict for CHAR resolved using rule 61 (param1 -> ID COMMA param1 .)
    RPAREN          reduce using rule 61 (param1 -> ID COMMA param1 .)
    INT             reduce using rule 61 (param1 -> ID COMMA param1 .)
    FLOAT           reduce using rule 61 (param1 -> ID COMMA param1 .)
    CHAR            reduce using rule 61 (param1 -> ID COMMA param1 .)

  ! RPAREN          [ reduce using rule 63 (addParam -> .) ]
  ! INT             [ reduce using rule 63 (addParam -> .) ]
  ! FLOAT           [ reduce using rule 63 (addParam -> .) ]
  ! CHAR            [ reduce using rule 63 (addParam -> .) ]

    addParam                       shift and go to state 113

state 98

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    SEMICOLON       shift and go to state 114


state 99

    (37) fun2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (64) param2 -> param2 . tipo param1
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 115
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 51

state 100

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 116


state 101

    (42) statement -> statement1 statement .

    RCURLY          reduce using rule 42 (statement -> statement1 statement .)
    RETURN          reduce using rule 42 (statement -> statement1 statement .)
    ID              reduce using rule 42 (statement -> statement1 statement .)
    READ            reduce using rule 42 (statement -> statement1 statement .)
    WRITE           reduce using rule 42 (statement -> statement1 statement .)
    FOR             reduce using rule 42 (statement -> statement1 statement .)
    IF              reduce using rule 42 (statement -> statement1 statement .)
    WHILE           reduce using rule 42 (statement -> statement1 statement .)


state 102

    (44) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    WRITE           reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 44 (statement1 -> asignacion SEMICOLON .)


state 103

    (45) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    WRITE           reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 45 (statement1 -> llamada SEMICOLON .)


state 104

    (46) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    WRITE           reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 46 (statement1 -> lectura SEMICOLON .)


state 105

    (47) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    WRITE           reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 47 (statement1 -> escritura SEMICOLON .)


state 106

    (53) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (51) assig_arreglo -> ID saveId2 . arr EQUALS addOperadorName exp np_arr genera_quad_asignacion
    (25) arr -> . LBRACKET arr_handler const RBRACKET

    EQUALS          shift and go to state 117
    LBRACKET        shift and go to state 49

    arr                            shift and go to state 118

state 107

    (66) llamada -> ID era_call . LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    LPAREN          shift and go to state 119


state 108

    (93) lectura -> READ operatorRead . LPAREN exp operatorReadQuad RPAREN

    LPAREN          shift and go to state 120


state 109

    (86) escritura -> WRITE LPAREN . operadorWrite escritura1 operadorWriteQuad RPAREN
    (117) operadorWrite -> .

    COMILLA         reduce using rule 117 (operadorWrite -> .)
    CTEI            reduce using rule 117 (operadorWrite -> .)
    CTEF            reduce using rule 117 (operadorWrite -> .)
    CTEC            reduce using rule 117 (operadorWrite -> .)
    CTESTRING       reduce using rule 117 (operadorWrite -> .)
    LPAREN          reduce using rule 117 (operadorWrite -> .)
    ID              reduce using rule 117 (operadorWrite -> .)
    RPAREN          reduce using rule 117 (operadorWrite -> .)
    COMMA           reduce using rule 117 (operadorWrite -> .)
    OR              reduce using rule 117 (operadorWrite -> .)
    AND             reduce using rule 117 (operadorWrite -> .)
    GT              reduce using rule 117 (operadorWrite -> .)
    LT              reduce using rule 117 (operadorWrite -> .)
    GTE             reduce using rule 117 (operadorWrite -> .)
    LTE             reduce using rule 117 (operadorWrite -> .)
    NE              reduce using rule 117 (operadorWrite -> .)
    COMPARE         reduce using rule 117 (operadorWrite -> .)
    PLUS            reduce using rule 117 (operadorWrite -> .)
    MINUS           reduce using rule 117 (operadorWrite -> .)
    MUL             reduce using rule 117 (operadorWrite -> .)
    DIV             reduce using rule 117 (operadorWrite -> .)

    operadorWrite                  shift and go to state 121

state 110

    (79) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end

    LPAREN          shift and go to state 122


state 111

    (74) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 124
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 112

    (85) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement loop_end

    LPAREN          shift and go to state 138


state 113

    (59) param1 -> ID COMMA param1 addParam .

    RPAREN          reduce using rule 59 (param1 -> ID COMMA param1 addParam .)
    INT             reduce using rule 59 (param1 -> ID COMMA param1 addParam .)
    FLOAT           reduce using rule 59 (param1 -> ID COMMA param1 addParam .)
    CHAR            reduce using rule 59 (param1 -> ID COMMA param1 addParam .)


state 114

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RCURLY end_func

    LCURLY          shift and go to state 139


state 115

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 140


state 116

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 117

    (53) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 141

state 118

    (51) assig_arreglo -> ID saveId2 arr . EQUALS addOperadorName exp np_arr genera_quad_asignacion

    EQUALS          shift and go to state 142


state 119

    (66) llamada -> ID era_call LPAREN . aux_exp quad_param RPAREN gosub_quad llena_endproc
    (67) aux_exp -> . exp
    (68) aux_exp -> . exp COMMA aux_exp
    (69) aux_exp -> . empty
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (131) empty -> .
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137

    aux_exp                        shift and go to state 143
    exp                            shift and go to state 144
    empty                          shift and go to state 145
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136

state 120

    (93) lectura -> READ operatorRead LPAREN . exp operatorReadQuad RPAREN
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 146
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 121

    (86) escritura -> WRITE LPAREN operadorWrite . escritura1 operadorWriteQuad RPAREN
    (87) escritura1 -> . escritura2 COMMA escritura2
    (88) escritura1 -> . escritura2
    (89) escritura2 -> . COMILLA CTESTRING COMILLA
    (90) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (91) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (92) escritura2 -> . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    COMILLA         shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    escritura1                     shift and go to state 147
    escritura2                     shift and go to state 148
    exp                            shift and go to state 152
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 122

    (79) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 154

    for1                           shift and go to state 153

state 123

    (130) pexp -> LPAREN . exp RPAREN
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 155
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 124

    (74) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 156


state 125

    (94) exp -> nexp .
    (95) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RPAREN          reduce using rule 94 (exp -> nexp .)
    COMMA           reduce using rule 94 (exp -> nexp .)
    SEMICOLON       reduce using rule 94 (exp -> nexp .)
    TO              reduce using rule 94 (exp -> nexp .)
    OR              shift and go to state 157


state 126

    (102) nexp -> compexp .
    (103) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 102 (nexp -> compexp .)
    RPAREN          reduce using rule 102 (nexp -> compexp .)
    COMMA           reduce using rule 102 (nexp -> compexp .)
    SEMICOLON       reduce using rule 102 (nexp -> compexp .)
    TO              reduce using rule 102 (nexp -> compexp .)
    AND             shift and go to state 158


state 127

    (104) compexp -> sumexp .
    (106) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (107) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (108) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (111) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 104 (compexp -> sumexp .)
    OR              reduce using rule 104 (compexp -> sumexp .)
    RPAREN          reduce using rule 104 (compexp -> sumexp .)
    COMMA           reduce using rule 104 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 104 (compexp -> sumexp .)
    TO              reduce using rule 104 (compexp -> sumexp .)
    GT              shift and go to state 159
    LT              shift and go to state 160
    GTE             shift and go to state 161
    LTE             shift and go to state 162
    NE              shift and go to state 163
    COMPARE         shift and go to state 164


state 128

    (105) compexp -> compexp1 . sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    sumexp                         shift and go to state 165
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 129

    (112) sumexp -> mulexp .
    (113) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 112 (sumexp -> mulexp .)
    LT              reduce using rule 112 (sumexp -> mulexp .)
    GTE             reduce using rule 112 (sumexp -> mulexp .)
    LTE             reduce using rule 112 (sumexp -> mulexp .)
    NE              reduce using rule 112 (sumexp -> mulexp .)
    COMPARE         reduce using rule 112 (sumexp -> mulexp .)
    AND             reduce using rule 112 (sumexp -> mulexp .)
    OR              reduce using rule 112 (sumexp -> mulexp .)
    RPAREN          reduce using rule 112 (sumexp -> mulexp .)
    COMMA           reduce using rule 112 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 112 (sumexp -> mulexp .)
    TO              reduce using rule 112 (sumexp -> mulexp .)
    CTEI            reduce using rule 112 (sumexp -> mulexp .)
    CTEF            reduce using rule 112 (sumexp -> mulexp .)
    CTEC            reduce using rule 112 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 112 (sumexp -> mulexp .)
    LPAREN          reduce using rule 112 (sumexp -> mulexp .)
    ID              reduce using rule 112 (sumexp -> mulexp .)
    MUL             reduce using rule 112 (sumexp -> mulexp .)
    DIV             reduce using rule 112 (sumexp -> mulexp .)
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167

  ! PLUS            [ reduce using rule 112 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 112 (sumexp -> mulexp .) ]


state 130

    (121) mulexp -> pexp .
    (122) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 121 (mulexp -> pexp .)
    MINUS           reduce using rule 121 (mulexp -> pexp .)
    GT              reduce using rule 121 (mulexp -> pexp .)
    LT              reduce using rule 121 (mulexp -> pexp .)
    GTE             reduce using rule 121 (mulexp -> pexp .)
    LTE             reduce using rule 121 (mulexp -> pexp .)
    NE              reduce using rule 121 (mulexp -> pexp .)
    COMPARE         reduce using rule 121 (mulexp -> pexp .)
    AND             reduce using rule 121 (mulexp -> pexp .)
    OR              reduce using rule 121 (mulexp -> pexp .)
    RPAREN          reduce using rule 121 (mulexp -> pexp .)
    COMMA           reduce using rule 121 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 121 (mulexp -> pexp .)
    TO              reduce using rule 121 (mulexp -> pexp .)
    CTEI            reduce using rule 121 (mulexp -> pexp .)
    CTEF            reduce using rule 121 (mulexp -> pexp .)
    CTEC            reduce using rule 121 (mulexp -> pexp .)
    CTESTRING       reduce using rule 121 (mulexp -> pexp .)
    LPAREN          reduce using rule 121 (mulexp -> pexp .)
    ID              reduce using rule 121 (mulexp -> pexp .)
    MUL             shift and go to state 168
    DIV             shift and go to state 169

  ! MUL             [ reduce using rule 121 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 121 (mulexp -> pexp .) ]


state 131

    (124) pexp -> var1 . saveId
    (132) saveId -> .

    MUL             reduce using rule 132 (saveId -> .)
    DIV             reduce using rule 132 (saveId -> .)
    PLUS            reduce using rule 132 (saveId -> .)
    MINUS           reduce using rule 132 (saveId -> .)
    GT              reduce using rule 132 (saveId -> .)
    LT              reduce using rule 132 (saveId -> .)
    GTE             reduce using rule 132 (saveId -> .)
    LTE             reduce using rule 132 (saveId -> .)
    NE              reduce using rule 132 (saveId -> .)
    COMPARE         reduce using rule 132 (saveId -> .)
    AND             reduce using rule 132 (saveId -> .)
    OR              reduce using rule 132 (saveId -> .)
    RPAREN          reduce using rule 132 (saveId -> .)
    COMMA           reduce using rule 132 (saveId -> .)
    SEMICOLON       reduce using rule 132 (saveId -> .)
    TO              reduce using rule 132 (saveId -> .)
    CTEI            reduce using rule 132 (saveId -> .)
    CTEF            reduce using rule 132 (saveId -> .)
    CTEC            reduce using rule 132 (saveId -> .)
    CTESTRING       reduce using rule 132 (saveId -> .)
    LPAREN          reduce using rule 132 (saveId -> .)
    ID              reduce using rule 132 (saveId -> .)

    saveId                         shift and go to state 170

state 132

    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 171

state 133

    (126) pexp -> CTEF . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 172

state 134

    (127) pexp -> CTEC . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 173

state 135

    (128) pexp -> CTESTRING . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 174

state 136

    (129) pexp -> llamada .

    MUL             reduce using rule 129 (pexp -> llamada .)
    DIV             reduce using rule 129 (pexp -> llamada .)
    PLUS            reduce using rule 129 (pexp -> llamada .)
    MINUS           reduce using rule 129 (pexp -> llamada .)
    GT              reduce using rule 129 (pexp -> llamada .)
    LT              reduce using rule 129 (pexp -> llamada .)
    GTE             reduce using rule 129 (pexp -> llamada .)
    LTE             reduce using rule 129 (pexp -> llamada .)
    NE              reduce using rule 129 (pexp -> llamada .)
    COMPARE         reduce using rule 129 (pexp -> llamada .)
    AND             reduce using rule 129 (pexp -> llamada .)
    OR              reduce using rule 129 (pexp -> llamada .)
    RPAREN          reduce using rule 129 (pexp -> llamada .)
    COMMA           reduce using rule 129 (pexp -> llamada .)
    SEMICOLON       reduce using rule 129 (pexp -> llamada .)
    TO              reduce using rule 129 (pexp -> llamada .)
    CTEI            reduce using rule 129 (pexp -> llamada .)
    CTEF            reduce using rule 129 (pexp -> llamada .)
    CTEC            reduce using rule 129 (pexp -> llamada .)
    CTESTRING       reduce using rule 129 (pexp -> llamada .)
    LPAREN          reduce using rule 129 (pexp -> llamada .)
    ID              reduce using rule 129 (pexp -> llamada .)


state 137

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (66) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (25) arr -> . LBRACKET arr_handler const RBRACKET
    (72) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 47
    LBRACKET        shift and go to state 49

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 72 (era_call -> .) ]

    arr                            shift and go to state 48
    era_call                       shift and go to state 107

state 138

    (85) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement loop_end
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 175
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 139

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 176
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 140

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LCURLY          shift and go to state 177


state 141

    (53) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp                            shift and go to state 178
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 142

    (51) assig_arreglo -> ID saveId2 arr EQUALS . addOperadorName exp np_arr genera_quad_asignacion
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 179

state 143

    (66) llamada -> ID era_call LPAREN aux_exp . quad_param RPAREN gosub_quad llena_endproc
    (70) quad_param -> .

    RPAREN          reduce using rule 70 (quad_param -> .)

    quad_param                     shift and go to state 180

state 144

    (67) aux_exp -> exp .
    (68) aux_exp -> exp . COMMA aux_exp

    RPAREN          reduce using rule 67 (aux_exp -> exp .)
    COMMA           shift and go to state 181


state 145

    (69) aux_exp -> empty .
    (21) var1 -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 21 (var1 -> empty .)
    MUL             reduce using rule 21 (var1 -> empty .)
    DIV             reduce using rule 21 (var1 -> empty .)
    PLUS            reduce using rule 21 (var1 -> empty .)
    MINUS           reduce using rule 21 (var1 -> empty .)
    GT              reduce using rule 21 (var1 -> empty .)
    LT              reduce using rule 21 (var1 -> empty .)
    GTE             reduce using rule 21 (var1 -> empty .)
    LTE             reduce using rule 21 (var1 -> empty .)
    NE              reduce using rule 21 (var1 -> empty .)
    COMPARE         reduce using rule 21 (var1 -> empty .)
    AND             reduce using rule 21 (var1 -> empty .)
    OR              reduce using rule 21 (var1 -> empty .)
    COMMA           reduce using rule 21 (var1 -> empty .)
    RPAREN          reduce using rule 21 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 69 (aux_exp -> empty .) ]


state 146

    (93) lectura -> READ operatorRead LPAREN exp . operatorReadQuad RPAREN
    (120) operatorReadQuad -> .

    RPAREN          reduce using rule 120 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 182

state 147

    (86) escritura -> WRITE LPAREN operadorWrite escritura1 . operadorWriteQuad RPAREN
    (118) operadorWriteQuad -> .

    RPAREN          reduce using rule 118 (operadorWriteQuad -> .)

    operadorWriteQuad              shift and go to state 183

state 148

    (87) escritura1 -> escritura2 . COMMA escritura2
    (88) escritura1 -> escritura2 .

    COMMA           shift and go to state 184
    RPAREN          reduce using rule 88 (escritura1 -> escritura2 .)


state 149

    (89) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 185


state 150

    (90) escritura2 -> CTEI . saveCTE operadorWriteQuad
    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

    COMMA           reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 186

state 151

    (91) escritura2 -> CTEF . saveCTE operadorWriteQuad
    (126) pexp -> CTEF . saveCTE
    (134) saveCTE -> .

    COMMA           reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 187

state 152

    (92) escritura2 -> exp .

    COMMA           reduce using rule 92 (escritura2 -> exp .)
    RPAREN          reduce using rule 92 (escritura2 -> exp .)


state 153

    (79) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY for_end

    RPAREN          shift and go to state 188


state 154

    (80) for1 -> FROM . asignacion TO exp
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    ID              shift and go to state 190

    asignacion                     shift and go to state 189
    assig_arreglo                  shift and go to state 91
    llamada                        shift and go to state 191

state 155

    (130) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 192


state 156

    (74) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (99) if_quad -> .

    LCURLY          reduce using rule 99 (if_quad -> .)

    if_quad                        shift and go to state 193

state 157

    (95) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 194

state 158

    (103) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 195

state 159

    (106) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 196

state 160

    (107) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 197

state 161

    (108) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 198

state 162

    (109) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 199

state 163

    (110) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 200

state 164

    (111) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 201

state 165

    (105) compexp -> compexp1 sumexp .

    AND             reduce using rule 105 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 105 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 105 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 105 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 105 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 105 (compexp -> compexp1 sumexp .)


state 166

    (113) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 202

state 167

    (114) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 203

state 168

    (122) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 204

state 169

    (123) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 205

state 170

    (124) pexp -> var1 saveId .

    MUL             reduce using rule 124 (pexp -> var1 saveId .)
    DIV             reduce using rule 124 (pexp -> var1 saveId .)
    PLUS            reduce using rule 124 (pexp -> var1 saveId .)
    MINUS           reduce using rule 124 (pexp -> var1 saveId .)
    GT              reduce using rule 124 (pexp -> var1 saveId .)
    LT              reduce using rule 124 (pexp -> var1 saveId .)
    GTE             reduce using rule 124 (pexp -> var1 saveId .)
    LTE             reduce using rule 124 (pexp -> var1 saveId .)
    NE              reduce using rule 124 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 124 (pexp -> var1 saveId .)
    AND             reduce using rule 124 (pexp -> var1 saveId .)
    OR              reduce using rule 124 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 124 (pexp -> var1 saveId .)
    COMMA           reduce using rule 124 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 124 (pexp -> var1 saveId .)
    TO              reduce using rule 124 (pexp -> var1 saveId .)
    CTEI            reduce using rule 124 (pexp -> var1 saveId .)
    CTEF            reduce using rule 124 (pexp -> var1 saveId .)
    CTEC            reduce using rule 124 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 124 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 124 (pexp -> var1 saveId .)
    ID              reduce using rule 124 (pexp -> var1 saveId .)


state 171

    (125) pexp -> CTEI saveCTE .

    MUL             reduce using rule 125 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 125 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 125 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 125 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 125 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 125 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 125 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 125 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 125 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 125 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 125 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 125 (pexp -> CTEI saveCTE .)


state 172

    (126) pexp -> CTEF saveCTE .

    MUL             reduce using rule 126 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 126 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 126 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 126 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 126 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 126 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 126 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 126 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 126 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 126 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 126 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 126 (pexp -> CTEF saveCTE .)


state 173

    (127) pexp -> CTEC saveCTE .

    MUL             reduce using rule 127 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 127 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 127 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 127 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 127 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 127 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 127 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 127 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 127 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 127 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 127 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 127 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 127 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 127 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 127 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 127 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 127 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 127 (pexp -> CTEC saveCTE .)


state 174

    (128) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 128 (pexp -> CTESTRING saveCTE .)


state 175

    (85) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement loop_end

    RPAREN          shift and go to state 206


state 176

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RCURLY end_func
    (38) fun_goto -> .

    ID              reduce using rule 38 (fun_goto -> .)
    READ            reduce using rule 38 (fun_goto -> .)
    WRITE           reduce using rule 38 (fun_goto -> .)
    FOR             reduce using rule 38 (fun_goto -> .)
    IF              reduce using rule 38 (fun_goto -> .)
    WHILE           reduce using rule 38 (fun_goto -> .)
    RCURLY          reduce using rule 38 (fun_goto -> .)

    fun_goto                       shift and go to state 207

state 177

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 208
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 178

    (53) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (56) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 56 (genera_quad_asignacion -> .)
    TO              reduce using rule 56 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 209

state 179

    (51) assig_arreglo -> ID saveId2 arr EQUALS addOperadorName . exp np_arr genera_quad_asignacion
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp                            shift and go to state 210
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 180

    (66) llamada -> ID era_call LPAREN aux_exp quad_param . RPAREN gosub_quad llena_endproc

    RPAREN          shift and go to state 211


state 181

    (68) aux_exp -> exp COMMA . aux_exp
    (67) aux_exp -> . exp
    (68) aux_exp -> . exp COMMA aux_exp
    (69) aux_exp -> . empty
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (131) empty -> .
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137

    exp                            shift and go to state 144
    aux_exp                        shift and go to state 212
    empty                          shift and go to state 145
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136

state 182

    (93) lectura -> READ operatorRead LPAREN exp operatorReadQuad . RPAREN

    RPAREN          shift and go to state 213


state 183

    (86) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad . RPAREN

    RPAREN          shift and go to state 214


state 184

    (87) escritura1 -> escritura2 COMMA . escritura2
    (89) escritura2 -> . COMILLA CTESTRING COMILLA
    (90) escritura2 -> . CTEI saveCTE operadorWriteQuad
    (91) escritura2 -> . CTEF saveCTE operadorWriteQuad
    (92) escritura2 -> . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    COMILLA         shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    escritura2                     shift and go to state 215
    exp                            shift and go to state 152
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 185

    (89) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 216


state 186

    (90) escritura2 -> CTEI saveCTE . operadorWriteQuad
    (125) pexp -> CTEI saveCTE .
    (118) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 118 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 118 (operadorWriteQuad -> .)
    MUL             reduce using rule 125 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 125 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 125 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 125 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 125 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 125 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 118 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 118 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 125 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 125 (pexp -> CTEI saveCTE .) ]

    operadorWriteQuad              shift and go to state 217

state 187

    (91) escritura2 -> CTEF saveCTE . operadorWriteQuad
    (126) pexp -> CTEF saveCTE .
    (118) operadorWriteQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 118 (operadorWriteQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 118 (operadorWriteQuad -> .)
    MUL             reduce using rule 126 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 126 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 126 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 126 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 126 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 126 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 118 (operadorWriteQuad -> .)
    RPAREN          reduce using rule 118 (operadorWriteQuad -> .)

  ! COMMA           [ reduce using rule 126 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 126 (pexp -> CTEF saveCTE .) ]

    operadorWriteQuad              shift and go to state 218

state 188

    (79) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY for_end
    (78) for_quad -> .

    LCURLY          reduce using rule 78 (for_quad -> .)

    for_quad                       shift and go to state 219

state 189

    (80) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 220


state 190

    (53) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (51) assig_arreglo -> ID . saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion
    (66) llamada -> ID . era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (133) saveId2 -> .
    (72) era_call -> .

    EQUALS          reduce using rule 133 (saveId2 -> .)
    LBRACKET        reduce using rule 133 (saveId2 -> .)
    LPAREN          reduce using rule 72 (era_call -> .)

    saveId2                        shift and go to state 106
    era_call                       shift and go to state 107

state 191

    (55) asignacion -> llamada .

    TO              reduce using rule 55 (asignacion -> llamada .)


state 192

    (130) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)


state 193

    (74) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 221


state 194

    (95) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    nexp                           shift and go to state 222
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 195

    (103) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    compexp                        shift and go to state 223
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 196

    (106) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 224
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 197

    (107) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 225
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 198

    (108) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 226
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 199

    (109) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 227
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 200

    (110) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 228
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 201

    (111) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 229
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 202

    (113) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    mulexp                         shift and go to state 230
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 203

    (114) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    mulexp                         shift and go to state 231
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 204

    (122) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    pexp                           shift and go to state 232
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 205

    (123) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    pexp                           shift and go to state 233
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 206

    (85) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement loop_end
    (83) while_quad -> .

    LCURLY          reduce using rule 83 (while_quad -> .)

    while_quad                     shift and go to state 234

state 207

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RCURLY end_func
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 235
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 208

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (38) fun_goto -> .

    ID              reduce using rule 38 (fun_goto -> .)
    READ            reduce using rule 38 (fun_goto -> .)
    WRITE           reduce using rule 38 (fun_goto -> .)
    FOR             reduce using rule 38 (fun_goto -> .)
    IF              reduce using rule 38 (fun_goto -> .)
    WHILE           reduce using rule 38 (fun_goto -> .)
    RETURN          reduce using rule 38 (fun_goto -> .)

    fun_goto                       shift and go to state 236

state 209

    (53) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 53 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 53 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 210

    (51) assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp . np_arr genera_quad_asignacion
    (52) np_arr -> . empty
    (131) empty -> .

    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    np_arr                         shift and go to state 237
    empty                          shift and go to state 238

state 211

    (66) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN . gosub_quad llena_endproc
    (73) gosub_quad -> .

    SEMICOLON       reduce using rule 73 (gosub_quad -> .)
    MUL             reduce using rule 73 (gosub_quad -> .)
    DIV             reduce using rule 73 (gosub_quad -> .)
    PLUS            reduce using rule 73 (gosub_quad -> .)
    MINUS           reduce using rule 73 (gosub_quad -> .)
    GT              reduce using rule 73 (gosub_quad -> .)
    LT              reduce using rule 73 (gosub_quad -> .)
    GTE             reduce using rule 73 (gosub_quad -> .)
    LTE             reduce using rule 73 (gosub_quad -> .)
    NE              reduce using rule 73 (gosub_quad -> .)
    COMPARE         reduce using rule 73 (gosub_quad -> .)
    AND             reduce using rule 73 (gosub_quad -> .)
    OR              reduce using rule 73 (gosub_quad -> .)
    RPAREN          reduce using rule 73 (gosub_quad -> .)
    COMMA           reduce using rule 73 (gosub_quad -> .)
    TO              reduce using rule 73 (gosub_quad -> .)
    CTEI            reduce using rule 73 (gosub_quad -> .)
    CTEF            reduce using rule 73 (gosub_quad -> .)
    CTEC            reduce using rule 73 (gosub_quad -> .)
    CTESTRING       reduce using rule 73 (gosub_quad -> .)
    LPAREN          reduce using rule 73 (gosub_quad -> .)
    ID              reduce using rule 73 (gosub_quad -> .)

    gosub_quad                     shift and go to state 239

state 212

    (68) aux_exp -> exp COMMA aux_exp .

    RPAREN          reduce using rule 68 (aux_exp -> exp COMMA aux_exp .)


state 213

    (93) lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 93 (lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .)


state 214

    (86) escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .

    SEMICOLON       reduce using rule 86 (escritura -> WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN .)


state 215

    (87) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 87 (escritura1 -> escritura2 COMMA escritura2 .)


state 216

    (89) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 89 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 89 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 217

    (90) escritura2 -> CTEI saveCTE operadorWriteQuad .

    COMMA           reduce using rule 90 (escritura2 -> CTEI saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 90 (escritura2 -> CTEI saveCTE operadorWriteQuad .)


state 218

    (91) escritura2 -> CTEF saveCTE operadorWriteQuad .

    COMMA           reduce using rule 91 (escritura2 -> CTEF saveCTE operadorWriteQuad .)
    RPAREN          reduce using rule 91 (escritura2 -> CTEF saveCTE operadorWriteQuad .)


state 219

    (79) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY for_end

    LCURLY          shift and go to state 240


state 220

    (80) for1 -> FROM asignacion TO . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 241
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 221

    (74) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 242
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 222

    (95) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (96) genera_quad_or -> .

    RPAREN          reduce using rule 96 (genera_quad_or -> .)
    COMMA           reduce using rule 96 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 96 (genera_quad_or -> .)
    TO              reduce using rule 96 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 243

state 223

    (103) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (97) genera_quad_and -> .

    OR              reduce using rule 97 (genera_quad_and -> .)
    RPAREN          reduce using rule 97 (genera_quad_and -> .)
    COMMA           reduce using rule 97 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 97 (genera_quad_and -> .)
    TO              reduce using rule 97 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 244

state 224

    (106) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 245

state 225

    (107) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 246

state 226

    (108) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 247

state 227

    (109) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 248

state 228

    (110) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 249

state 229

    (111) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 250

state 230

    (113) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (115) genera_sum_quad -> .

    GT              reduce using rule 115 (genera_sum_quad -> .)
    LT              reduce using rule 115 (genera_sum_quad -> .)
    GTE             reduce using rule 115 (genera_sum_quad -> .)
    LTE             reduce using rule 115 (genera_sum_quad -> .)
    NE              reduce using rule 115 (genera_sum_quad -> .)
    COMPARE         reduce using rule 115 (genera_sum_quad -> .)
    AND             reduce using rule 115 (genera_sum_quad -> .)
    OR              reduce using rule 115 (genera_sum_quad -> .)
    RPAREN          reduce using rule 115 (genera_sum_quad -> .)
    COMMA           reduce using rule 115 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 115 (genera_sum_quad -> .)
    TO              reduce using rule 115 (genera_sum_quad -> .)
    CTEI            reduce using rule 115 (genera_sum_quad -> .)
    CTEF            reduce using rule 115 (genera_sum_quad -> .)
    CTEC            reduce using rule 115 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 115 (genera_sum_quad -> .)
    LPAREN          reduce using rule 115 (genera_sum_quad -> .)
    ID              reduce using rule 115 (genera_sum_quad -> .)
    PLUS            reduce using rule 115 (genera_sum_quad -> .)
    MINUS           reduce using rule 115 (genera_sum_quad -> .)
    MUL             reduce using rule 115 (genera_sum_quad -> .)
    DIV             reduce using rule 115 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 251

state 231

    (114) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (115) genera_sum_quad -> .

    GT              reduce using rule 115 (genera_sum_quad -> .)
    LT              reduce using rule 115 (genera_sum_quad -> .)
    GTE             reduce using rule 115 (genera_sum_quad -> .)
    LTE             reduce using rule 115 (genera_sum_quad -> .)
    NE              reduce using rule 115 (genera_sum_quad -> .)
    COMPARE         reduce using rule 115 (genera_sum_quad -> .)
    AND             reduce using rule 115 (genera_sum_quad -> .)
    OR              reduce using rule 115 (genera_sum_quad -> .)
    RPAREN          reduce using rule 115 (genera_sum_quad -> .)
    COMMA           reduce using rule 115 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 115 (genera_sum_quad -> .)
    TO              reduce using rule 115 (genera_sum_quad -> .)
    CTEI            reduce using rule 115 (genera_sum_quad -> .)
    CTEF            reduce using rule 115 (genera_sum_quad -> .)
    CTEC            reduce using rule 115 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 115 (genera_sum_quad -> .)
    LPAREN          reduce using rule 115 (genera_sum_quad -> .)
    ID              reduce using rule 115 (genera_sum_quad -> .)
    PLUS            reduce using rule 115 (genera_sum_quad -> .)
    MINUS           reduce using rule 115 (genera_sum_quad -> .)
    MUL             reduce using rule 115 (genera_sum_quad -> .)
    DIV             reduce using rule 115 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 252

state 232

    (122) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (116) genera_mul_quad -> .

    PLUS            reduce using rule 116 (genera_mul_quad -> .)
    MINUS           reduce using rule 116 (genera_mul_quad -> .)
    GT              reduce using rule 116 (genera_mul_quad -> .)
    LT              reduce using rule 116 (genera_mul_quad -> .)
    GTE             reduce using rule 116 (genera_mul_quad -> .)
    LTE             reduce using rule 116 (genera_mul_quad -> .)
    NE              reduce using rule 116 (genera_mul_quad -> .)
    COMPARE         reduce using rule 116 (genera_mul_quad -> .)
    AND             reduce using rule 116 (genera_mul_quad -> .)
    OR              reduce using rule 116 (genera_mul_quad -> .)
    RPAREN          reduce using rule 116 (genera_mul_quad -> .)
    COMMA           reduce using rule 116 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 116 (genera_mul_quad -> .)
    TO              reduce using rule 116 (genera_mul_quad -> .)
    CTEI            reduce using rule 116 (genera_mul_quad -> .)
    CTEF            reduce using rule 116 (genera_mul_quad -> .)
    CTEC            reduce using rule 116 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 116 (genera_mul_quad -> .)
    LPAREN          reduce using rule 116 (genera_mul_quad -> .)
    ID              reduce using rule 116 (genera_mul_quad -> .)
    MUL             reduce using rule 116 (genera_mul_quad -> .)
    DIV             reduce using rule 116 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 253

state 233

    (123) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (116) genera_mul_quad -> .

    PLUS            reduce using rule 116 (genera_mul_quad -> .)
    MINUS           reduce using rule 116 (genera_mul_quad -> .)
    GT              reduce using rule 116 (genera_mul_quad -> .)
    LT              reduce using rule 116 (genera_mul_quad -> .)
    GTE             reduce using rule 116 (genera_mul_quad -> .)
    LTE             reduce using rule 116 (genera_mul_quad -> .)
    NE              reduce using rule 116 (genera_mul_quad -> .)
    COMPARE         reduce using rule 116 (genera_mul_quad -> .)
    AND             reduce using rule 116 (genera_mul_quad -> .)
    OR              reduce using rule 116 (genera_mul_quad -> .)
    RPAREN          reduce using rule 116 (genera_mul_quad -> .)
    COMMA           reduce using rule 116 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 116 (genera_mul_quad -> .)
    TO              reduce using rule 116 (genera_mul_quad -> .)
    CTEI            reduce using rule 116 (genera_mul_quad -> .)
    CTEF            reduce using rule 116 (genera_mul_quad -> .)
    CTEC            reduce using rule 116 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 116 (genera_mul_quad -> .)
    LPAREN          reduce using rule 116 (genera_mul_quad -> .)
    ID              reduce using rule 116 (genera_mul_quad -> .)
    MUL             reduce using rule 116 (genera_mul_quad -> .)
    DIV             reduce using rule 116 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 254

state 234

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement loop_end

    LCURLY          shift and go to state 255


state 235

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RCURLY end_func

    RCURLY          shift and go to state 256


state 236

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 257
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 237

    (51) assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp np_arr . genera_quad_asignacion
    (56) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 56 (genera_quad_asignacion -> .)
    TO              reduce using rule 56 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 258

state 238

    (52) np_arr -> empty .

    SEMICOLON       reduce using rule 52 (np_arr -> empty .)
    TO              reduce using rule 52 (np_arr -> empty .)


state 239

    (66) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad . llena_endproc
    (71) llena_endproc -> .

    SEMICOLON       reduce using rule 71 (llena_endproc -> .)
    MUL             reduce using rule 71 (llena_endproc -> .)
    DIV             reduce using rule 71 (llena_endproc -> .)
    PLUS            reduce using rule 71 (llena_endproc -> .)
    MINUS           reduce using rule 71 (llena_endproc -> .)
    GT              reduce using rule 71 (llena_endproc -> .)
    LT              reduce using rule 71 (llena_endproc -> .)
    GTE             reduce using rule 71 (llena_endproc -> .)
    LTE             reduce using rule 71 (llena_endproc -> .)
    NE              reduce using rule 71 (llena_endproc -> .)
    COMPARE         reduce using rule 71 (llena_endproc -> .)
    AND             reduce using rule 71 (llena_endproc -> .)
    OR              reduce using rule 71 (llena_endproc -> .)
    RPAREN          reduce using rule 71 (llena_endproc -> .)
    COMMA           reduce using rule 71 (llena_endproc -> .)
    TO              reduce using rule 71 (llena_endproc -> .)
    CTEI            reduce using rule 71 (llena_endproc -> .)
    CTEF            reduce using rule 71 (llena_endproc -> .)
    CTEC            reduce using rule 71 (llena_endproc -> .)
    CTESTRING       reduce using rule 71 (llena_endproc -> .)
    LPAREN          reduce using rule 71 (llena_endproc -> .)
    ID              reduce using rule 71 (llena_endproc -> .)

    llena_endproc                  shift and go to state 259

state 240

    (79) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY for_end
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 260
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 241

    (80) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 80 (for1 -> FROM asignacion TO exp .)


state 242

    (74) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 261


state 243

    (95) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RPAREN          reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 244

    (103) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 245

    (106) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 246

    (107) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 247

    (108) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 248

    (109) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 249

    (110) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 250

    (111) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 251

    (113) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 252

    (114) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 253

    (122) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 254

    (123) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 255

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement loop_end
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

  ! ID              [ reduce using rule 131 (empty -> .) ]
  ! READ            [ reduce using rule 131 (empty -> .) ]
  ! WRITE           [ reduce using rule 131 (empty -> .) ]
  ! FOR             [ reduce using rule 131 (empty -> .) ]
  ! IF              [ reduce using rule 131 (empty -> .) ]
  ! WHILE           [ reduce using rule 131 (empty -> .) ]

    statement                      shift and go to state 262
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 256

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY . end_func
    (39) end_func -> .

    FUNCTION        reduce using rule 39 (end_func -> .)
    MAIN            reduce using rule 39 (end_func -> .)
    $end            reduce using rule 39 (end_func -> .)

    end_func                       shift and go to state 263

state 257

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    RETURN          shift and go to state 264


state 258

    (51) assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion .

    SEMICOLON       reduce using rule 51 (assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion .)
    TO              reduce using rule 51 (assig_arreglo -> ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion .)


state 259

    (66) llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .

    SEMICOLON       reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    MUL             reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    DIV             reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    PLUS            reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    MINUS           reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GT              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LT              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    GTE             reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LTE             reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    NE              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMPARE         reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    AND             reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    OR              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    RPAREN          reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    COMMA           reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    TO              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEI            reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEF            reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTEC            reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    CTESTRING       reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    LPAREN          reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)
    ID              reduce using rule 66 (llamada -> ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc .)


state 260

    (79) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY for_end

    RCURLY          shift and go to state 265


state 261

    (74) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (75) else -> . ELSE else_quad LCURLY statement RCURLY
    (76) else -> . empty
    (131) empty -> .

    ELSE            shift and go to state 267
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    WRITE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    else                           shift and go to state 266
    empty                          shift and go to state 268

state 262

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . loop_end
    (81) loop_end -> .

    ID              reduce using rule 81 (loop_end -> .)
    READ            reduce using rule 81 (loop_end -> .)
    WRITE           reduce using rule 81 (loop_end -> .)
    FOR             reduce using rule 81 (loop_end -> .)
    IF              reduce using rule 81 (loop_end -> .)
    WHILE           reduce using rule 81 (loop_end -> .)
    RCURLY          reduce using rule 81 (loop_end -> .)
    RETURN          reduce using rule 81 (loop_end -> .)

    loop_end                       shift and go to state 269

state 263

    (36) fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .

    FUNCTION        reduce using rule 36 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    MAIN            reduce using rule 36 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    $end            reduce using rule 36 (fun1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)


state 264

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (40) operadorReturn -> .

    CTEI            reduce using rule 40 (operadorReturn -> .)
    CTEF            reduce using rule 40 (operadorReturn -> .)
    CTEC            reduce using rule 40 (operadorReturn -> .)
    CTESTRING       reduce using rule 40 (operadorReturn -> .)
    LPAREN          reduce using rule 40 (operadorReturn -> .)
    ID              reduce using rule 40 (operadorReturn -> .)
    SEMICOLON       reduce using rule 40 (operadorReturn -> .)
    OR              reduce using rule 40 (operadorReturn -> .)
    AND             reduce using rule 40 (operadorReturn -> .)
    GT              reduce using rule 40 (operadorReturn -> .)
    LT              reduce using rule 40 (operadorReturn -> .)
    GTE             reduce using rule 40 (operadorReturn -> .)
    LTE             reduce using rule 40 (operadorReturn -> .)
    NE              reduce using rule 40 (operadorReturn -> .)
    COMPARE         reduce using rule 40 (operadorReturn -> .)
    PLUS            reduce using rule 40 (operadorReturn -> .)
    MINUS           reduce using rule 40 (operadorReturn -> .)
    MUL             reduce using rule 40 (operadorReturn -> .)
    DIV             reduce using rule 40 (operadorReturn -> .)

    operadorReturn                 shift and go to state 270

state 265

    (79) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . for_end
    (82) for_end -> .

    ID              reduce using rule 82 (for_end -> .)
    READ            reduce using rule 82 (for_end -> .)
    WRITE           reduce using rule 82 (for_end -> .)
    FOR             reduce using rule 82 (for_end -> .)
    IF              reduce using rule 82 (for_end -> .)
    WHILE           reduce using rule 82 (for_end -> .)
    RCURLY          reduce using rule 82 (for_end -> .)
    RETURN          reduce using rule 82 (for_end -> .)

    for_end                        shift and go to state 271

state 266

    (74) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (100) end_if -> .

    ID              reduce using rule 100 (end_if -> .)
    READ            reduce using rule 100 (end_if -> .)
    WRITE           reduce using rule 100 (end_if -> .)
    FOR             reduce using rule 100 (end_if -> .)
    IF              reduce using rule 100 (end_if -> .)
    WHILE           reduce using rule 100 (end_if -> .)
    RCURLY          reduce using rule 100 (end_if -> .)
    RETURN          reduce using rule 100 (end_if -> .)

    end_if                         shift and go to state 272

state 267

    (75) else -> ELSE . else_quad LCURLY statement RCURLY
    (101) else_quad -> .

    LCURLY          reduce using rule 101 (else_quad -> .)

    else_quad                      shift and go to state 273

state 268

    (76) else -> empty .

    ID              reduce using rule 76 (else -> empty .)
    READ            reduce using rule 76 (else -> empty .)
    WRITE           reduce using rule 76 (else -> empty .)
    FOR             reduce using rule 76 (else -> empty .)
    IF              reduce using rule 76 (else -> empty .)
    WHILE           reduce using rule 76 (else -> empty .)
    RCURLY          reduce using rule 76 (else -> empty .)
    RETURN          reduce using rule 76 (else -> empty .)


state 269

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .

    ID              reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    READ            reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WRITE           reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    FOR             reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    IF              reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    WHILE           reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RCURLY          reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)
    RETURN          reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end .)


state 270

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY end_func
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . empty
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (131) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 133
    CTEC            shift and go to state 134
    CTESTRING       shift and go to state 135
    LPAREN          shift and go to state 123
    ID              shift and go to state 137
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)

    exp                            shift and go to state 274
    nexp                           shift and go to state 125
    compexp                        shift and go to state 126
    sumexp                         shift and go to state 127
    compexp1                       shift and go to state 128
    mulexp                         shift and go to state 129
    pexp                           shift and go to state 130
    var1                           shift and go to state 131
    llamada                        shift and go to state 136
    empty                          shift and go to state 34

state 271

    (79) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .

    ID              reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    READ            reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WRITE           reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    FOR             reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    IF              reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WHILE           reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RCURLY          reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RETURN          reduce using rule 79 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)


state 272

    (74) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WRITE           reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 74 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 273

    (75) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 275


state 274

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY end_func
    (41) quad_return -> .

    SEMICOLON       reduce using rule 41 (quad_return -> .)

    quad_return                    shift and go to state 276

state 275

    (75) else -> ELSE else_quad LCURLY . statement RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (131) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . assig_arreglo
    (55) asignacion -> . llamada
    (66) llamada -> . ID era_call LPAREN aux_exp quad_param RPAREN gosub_quad llena_endproc
    (93) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (86) escritura -> . WRITE LPAREN operadorWrite escritura1 operadorWriteQuad RPAREN
    (79) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (74) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement loop_end
    (51) assig_arreglo -> . ID saveId2 arr EQUALS addOperadorName exp np_arr genera_quad_asignacion

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 90
    READ            shift and go to state 92
    WRITE           shift and go to state 93
    FOR             shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 96

    statement                      shift and go to state 277
    statement1                     shift and go to state 81
    empty                          shift and go to state 82
    asignacion                     shift and go to state 83
    llamada                        shift and go to state 84
    lectura                        shift and go to state 85
    escritura                      shift and go to state 86
    for                            shift and go to state 87
    if                             shift and go to state 88
    while                          shift and go to state 89
    assig_arreglo                  shift and go to state 91

state 276

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 278


state 277

    (75) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 279


state 278

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY end_func

    RCURLY          shift and go to state 280


state 279

    (75) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WRITE           reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 75 (else -> ELSE else_quad LCURLY statement RCURLY .)


state 280

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY . end_func
    (39) end_func -> .

    FUNCTION        reduce using rule 39 (end_func -> .)
    MAIN            reduce using rule 39 (end_func -> .)
    $end            reduce using rule 39 (end_func -> .)

    end_func                       shift and go to state 281

state 281

    (37) fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .

    FUNCTION        reduce using rule 37 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    MAIN            reduce using rule 37 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    $end            reduce using rule 37 (fun2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 33 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for READ in state 81 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MUL in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 196 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 196 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 197 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 197 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 197 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 197 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 198 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 198 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 198 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 198 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for ID in state 198 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 199 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 199 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 199 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 199 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 199 resolved as shift
WARNING: shift/reduce conflict for ID in state 199 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 200 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 200 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 200 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 200 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 200 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 201 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 201 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 201 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 201 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 201 resolved as shift
WARNING: shift/reduce conflict for ID in state 201 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 202 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 202 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 202 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 202 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 202 resolved as shift
WARNING: shift/reduce conflict for ID in state 202 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 203 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 203 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 203 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 203 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 203 resolved as shift
WARNING: shift/reduce conflict for ID in state 203 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 204 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 204 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 204 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 204 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 204 resolved as shift
WARNING: shift/reduce conflict for ID in state 204 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 205 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 205 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 205 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 205 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 205 resolved as shift
WARNING: shift/reduce conflict for ID in state 205 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: shift/reduce conflict for READ in state 255 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: reduce/reduce conflict in state 97 resolved using rule (param1 -> ID COMMA param1)
WARNING: rejected rule (addParam -> <empty>) in state 97
WARNING: reduce/reduce conflict in state 137 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 137
WARNING: reduce/reduce conflict in state 145 resolved using rule (var1 -> empty)
WARNING: rejected rule (aux_exp -> empty) in state 145
WARNING: reduce/reduce conflict in state 186 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (operadorWriteQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 187
WARNING: Rule (aux_exp -> empty) is never reduced
